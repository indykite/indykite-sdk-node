// @generated by protobuf-ts 2.9.0 with parameter long_type_string,client_grpc1,generate_dependencies
// @generated from protobuf file "indykite/config/v1beta1/policy_builder.proto" (package "indykite.config.v1beta1", syntax proto3)
// tslint:disable
//
// Copyright (c) 2024 IndyKite AS.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
/**
 * @generated from protobuf message indykite.config.v1beta1.PolicyBuilderConfig
 */
export interface PolicyBuilderConfig {
    /**
     * @generated from protobuf field: string subject_type = 1;
     */
    subjectType: string;
    /**
     * @generated from protobuf field: string resource_type = 2;
     */
    resourceType: string;
    /**
     * @generated from protobuf field: repeated string actions = 3;
     */
    actions: string[];
    /**
     * @generated from protobuf field: indykite.config.v1beta1.PolicyBuilderConditions conditions = 4;
     */
    conditions?: PolicyBuilderConditions;
}
/**
 * @generated from protobuf message indykite.config.v1beta1.PolicyBuilderConditions
 */
export interface PolicyBuilderConditions {
    /**
     * @generated from protobuf field: repeated indykite.config.v1beta1.PolicyBuilderNode nodes = 1;
     */
    nodes: PolicyBuilderNode[];
    /**
     * @generated from protobuf field: repeated indykite.config.v1beta1.PolicyBuilderRelationship relationships = 2;
     */
    relationships: PolicyBuilderRelationship[];
}
/**
 * @generated from protobuf message indykite.config.v1beta1.PolicyBuilderNode
 */
export interface PolicyBuilderNode {
    /**
     * @generated from protobuf field: string alias = 1;
     */
    alias: string;
    /**
     * @generated from protobuf field: repeated string labels = 2;
     */
    labels: string[];
    /**
     * @generated from protobuf field: indykite.config.v1beta1.Filter filter = 3;
     */
    filter?: Filter;
}
/**
 * @generated from protobuf message indykite.config.v1beta1.PolicyBuilderRelationship
 */
export interface PolicyBuilderRelationship {
    /**
     * @generated from protobuf field: bool undirected = 1;
     */
    undirected: boolean;
    /**
     * @generated from protobuf field: string source_alias = 2;
     */
    sourceAlias: string;
    /**
     * @generated from protobuf field: string target_alias = 3;
     */
    targetAlias: string;
    /**
     * @generated from protobuf field: string relationship_type = 4;
     */
    relationshipType: string;
    /**
     * @generated from protobuf field: indykite.config.v1beta1.Filter filter = 5;
     */
    filter?: Filter;
}
/**
 * @generated from protobuf message indykite.config.v1beta1.Filter
 */
export interface Filter {
    /**
     * @generated from protobuf oneof: filter
     */
    filter: {
        oneofKind: "notFilter";
        /**
         * @generated from protobuf field: indykite.config.v1beta1.NotFilter not_filter = 1;
         */
        notFilter: NotFilter;
    } | {
        oneofKind: "simpleFilter";
        /**
         * @generated from protobuf field: indykite.config.v1beta1.SimpleFilter simple_filter = 2;
         */
        simpleFilter: SimpleFilter;
    } | {
        oneofKind: "complexFilter";
        /**
         * @generated from protobuf field: indykite.config.v1beta1.ComplexFilter complex_filter = 3;
         */
        complexFilter: ComplexFilter;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message indykite.config.v1beta1.NotFilter
 */
export interface NotFilter {
    /**
     * @generated from protobuf field: indykite.config.v1beta1.Filter filter = 1;
     */
    filter?: Filter;
}
/**
 * @generated from protobuf message indykite.config.v1beta1.SimpleFilter
 */
export interface SimpleFilter {
    /**
     * @generated from protobuf field: string property_name = 1;
     */
    propertyName: string;
    /**
     * @generated from protobuf field: indykite.config.v1beta1.PropertyValueType property_value = 2;
     */
    propertyValue?: PropertyValueType;
    /**
     * @generated from protobuf field: indykite.config.v1beta1.ComparisonOperator operator = 3;
     */
    operator: ComparisonOperator;
}
/**
 * @generated from protobuf message indykite.config.v1beta1.ComplexFilter
 */
export interface ComplexFilter {
    /**
     * @generated from protobuf field: repeated indykite.config.v1beta1.Filter filters = 1;
     */
    filters: Filter[];
    /**
     * @generated from protobuf field: indykite.config.v1beta1.BoolOperator operator = 2;
     */
    operator: BoolOperator;
}
/**
 * @generated from protobuf message indykite.config.v1beta1.PropertyValueType
 */
export interface PropertyValueType {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "boolValue";
        /**
         * @generated from protobuf field: bool bool_value = 1;
         */
        boolValue: boolean;
    } | {
        oneofKind: "intValue";
        /**
         * @generated from protobuf field: int32 int_value = 2;
         */
        intValue: number;
    } | {
        oneofKind: "floatValue";
        /**
         * @generated from protobuf field: double float_value = 3;
         */
        floatValue: number;
    } | {
        oneofKind: "timeValue";
        /**
         * @generated from protobuf field: google.protobuf.Timestamp time_value = 4;
         */
        timeValue: Timestamp;
    } | {
        oneofKind: "durationValue";
        /**
         * @generated from protobuf field: google.protobuf.Duration duration_value = 5;
         */
        durationValue: Duration;
    } | {
        oneofKind: "stringValue";
        /**
         * @generated from protobuf field: string string_value = 6;
         */
        stringValue: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum indykite.config.v1beta1.ComparisonOperator
 */
export enum ComparisonOperator {
    /**
     * @generated from protobuf enum value: COMPARISON_OPERATOR_INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from protobuf enum value: COMPARISON_OPERATOR_EQUAL = 1;
     */
    EQUAL = 1,
    /**
     * @generated from protobuf enum value: COMPARISON_OPERATOR_NOT_EQUAL = 2;
     */
    NOT_EQUAL = 2,
    /**
     * @generated from protobuf enum value: COMPARISON_OPERATOR_GREATER = 3;
     */
    GREATER = 3,
    /**
     * @generated from protobuf enum value: COMPARISON_OPERATOR_GREATER_OR_EQUAL = 4;
     */
    GREATER_OR_EQUAL = 4,
    /**
     * @generated from protobuf enum value: COMPARISON_OPERATOR_LESS = 5;
     */
    LESS = 5,
    /**
     * @generated from protobuf enum value: COMPARISON_OPERATOR_LESS_OR_EQUAL = 6;
     */
    LESS_OR_EQUAL = 6
}
/**
 * @generated from protobuf enum indykite.config.v1beta1.BoolOperator
 */
export enum BoolOperator {
    /**
     * @generated from protobuf enum value: BOOL_OPERATOR_INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from protobuf enum value: BOOL_OPERATOR_AND = 1;
     */
    AND = 1,
    /**
     * @generated from protobuf enum value: BOOL_OPERATOR_OR = 2;
     */
    OR = 2,
    /**
     * @generated from protobuf enum value: BOOL_OPERATOR_XOR = 3;
     */
    XOR = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class PolicyBuilderConfig$Type extends MessageType<PolicyBuilderConfig> {
    constructor() {
        super("indykite.config.v1beta1.PolicyBuilderConfig", [
            { no: 1, name: "subject_type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true, string: { minLen: "2", maxLen: "50", pattern: "^[A-Z][a-zA-Z0-9]+$" } } } },
            { no: 2, name: "resource_type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true, string: { minLen: "2", maxLen: "50", pattern: "^[A-Z][a-zA-Z0-9]+$" } } } },
            { no: 3, name: "actions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { repeated: { minItems: "1", maxItems: "5", unique: true, items: { string: { minLen: "2", maxLen: "100", pattern: "^[a-zA-Z0-9.:_\\-\\/]{2,}$" } } } } } },
            { no: 4, name: "conditions", kind: "message", T: () => PolicyBuilderConditions, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<PolicyBuilderConfig>): PolicyBuilderConfig {
        const message = { subjectType: "", resourceType: "", actions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyBuilderConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyBuilderConfig): PolicyBuilderConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string subject_type */ 1:
                    message.subjectType = reader.string();
                    break;
                case /* string resource_type */ 2:
                    message.resourceType = reader.string();
                    break;
                case /* repeated string actions */ 3:
                    message.actions.push(reader.string());
                    break;
                case /* indykite.config.v1beta1.PolicyBuilderConditions conditions */ 4:
                    message.conditions = PolicyBuilderConditions.internalBinaryRead(reader, reader.uint32(), options, message.conditions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicyBuilderConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string subject_type = 1; */
        if (message.subjectType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.subjectType);
        /* string resource_type = 2; */
        if (message.resourceType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resourceType);
        /* repeated string actions = 3; */
        for (let i = 0; i < message.actions.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.actions[i]);
        /* indykite.config.v1beta1.PolicyBuilderConditions conditions = 4; */
        if (message.conditions)
            PolicyBuilderConditions.internalBinaryWrite(message.conditions, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.config.v1beta1.PolicyBuilderConfig
 */
export const PolicyBuilderConfig = new PolicyBuilderConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolicyBuilderConditions$Type extends MessageType<PolicyBuilderConditions> {
    constructor() {
        super("indykite.config.v1beta1.PolicyBuilderConditions", [
            { no: 1, name: "nodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PolicyBuilderNode, options: { "buf.validate.field": { required: true, repeated: { minItems: "2" } } } },
            { no: 2, name: "relationships", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PolicyBuilderRelationship, options: { "buf.validate.field": { required: true, repeated: { minItems: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<PolicyBuilderConditions>): PolicyBuilderConditions {
        const message = { nodes: [], relationships: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyBuilderConditions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyBuilderConditions): PolicyBuilderConditions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated indykite.config.v1beta1.PolicyBuilderNode nodes */ 1:
                    message.nodes.push(PolicyBuilderNode.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated indykite.config.v1beta1.PolicyBuilderRelationship relationships */ 2:
                    message.relationships.push(PolicyBuilderRelationship.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicyBuilderConditions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated indykite.config.v1beta1.PolicyBuilderNode nodes = 1; */
        for (let i = 0; i < message.nodes.length; i++)
            PolicyBuilderNode.internalBinaryWrite(message.nodes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated indykite.config.v1beta1.PolicyBuilderRelationship relationships = 2; */
        for (let i = 0; i < message.relationships.length; i++)
            PolicyBuilderRelationship.internalBinaryWrite(message.relationships[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.config.v1beta1.PolicyBuilderConditions
 */
export const PolicyBuilderConditions = new PolicyBuilderConditions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolicyBuilderNode$Type extends MessageType<PolicyBuilderNode> {
    constructor() {
        super("indykite.config.v1beta1.PolicyBuilderNode", [
            { no: 1, name: "alias", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true, string: { minLen: "2", maxLen: "50", pattern: "^[a-z][a-zA-Z0-9]+$" } } } },
            { no: 2, name: "labels", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { repeated: { unique: true, items: { string: { minLen: "2", maxLen: "50", pattern: "^[A-Z][a-zA-Z0-9]+$" } } } } } },
            { no: 3, name: "filter", kind: "message", T: () => Filter }
        ]);
    }
    create(value?: PartialMessage<PolicyBuilderNode>): PolicyBuilderNode {
        const message = { alias: "", labels: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyBuilderNode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyBuilderNode): PolicyBuilderNode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string alias */ 1:
                    message.alias = reader.string();
                    break;
                case /* repeated string labels */ 2:
                    message.labels.push(reader.string());
                    break;
                case /* indykite.config.v1beta1.Filter filter */ 3:
                    message.filter = Filter.internalBinaryRead(reader, reader.uint32(), options, message.filter);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicyBuilderNode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string alias = 1; */
        if (message.alias !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.alias);
        /* repeated string labels = 2; */
        for (let i = 0; i < message.labels.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.labels[i]);
        /* indykite.config.v1beta1.Filter filter = 3; */
        if (message.filter)
            Filter.internalBinaryWrite(message.filter, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.config.v1beta1.PolicyBuilderNode
 */
export const PolicyBuilderNode = new PolicyBuilderNode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolicyBuilderRelationship$Type extends MessageType<PolicyBuilderRelationship> {
    constructor() {
        super("indykite.config.v1beta1.PolicyBuilderRelationship", [
            { no: 1, name: "undirected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "source_alias", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true, string: { minLen: "2", maxLen: "50", pattern: "^[a-z][a-zA-Z0-9]+$" } } } },
            { no: 3, name: "target_alias", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true, string: { minLen: "2", maxLen: "50", pattern: "^[a-z][a-zA-Z0-9]+$" } } } },
            { no: 4, name: "relationship_type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "2", maxLen: "50", pattern: "^[A-Z][a-zA-Z0-9]+$" } } } },
            { no: 5, name: "filter", kind: "message", T: () => Filter }
        ]);
    }
    create(value?: PartialMessage<PolicyBuilderRelationship>): PolicyBuilderRelationship {
        const message = { undirected: false, sourceAlias: "", targetAlias: "", relationshipType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicyBuilderRelationship>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicyBuilderRelationship): PolicyBuilderRelationship {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool undirected */ 1:
                    message.undirected = reader.bool();
                    break;
                case /* string source_alias */ 2:
                    message.sourceAlias = reader.string();
                    break;
                case /* string target_alias */ 3:
                    message.targetAlias = reader.string();
                    break;
                case /* string relationship_type */ 4:
                    message.relationshipType = reader.string();
                    break;
                case /* indykite.config.v1beta1.Filter filter */ 5:
                    message.filter = Filter.internalBinaryRead(reader, reader.uint32(), options, message.filter);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicyBuilderRelationship, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool undirected = 1; */
        if (message.undirected !== false)
            writer.tag(1, WireType.Varint).bool(message.undirected);
        /* string source_alias = 2; */
        if (message.sourceAlias !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sourceAlias);
        /* string target_alias = 3; */
        if (message.targetAlias !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.targetAlias);
        /* string relationship_type = 4; */
        if (message.relationshipType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.relationshipType);
        /* indykite.config.v1beta1.Filter filter = 5; */
        if (message.filter)
            Filter.internalBinaryWrite(message.filter, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.config.v1beta1.PolicyBuilderRelationship
 */
export const PolicyBuilderRelationship = new PolicyBuilderRelationship$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Filter$Type extends MessageType<Filter> {
    constructor() {
        super("indykite.config.v1beta1.Filter", [
            { no: 1, name: "not_filter", kind: "message", oneof: "filter", T: () => NotFilter },
            { no: 2, name: "simple_filter", kind: "message", oneof: "filter", T: () => SimpleFilter },
            { no: 3, name: "complex_filter", kind: "message", oneof: "filter", T: () => ComplexFilter }
        ]);
    }
    create(value?: PartialMessage<Filter>): Filter {
        const message = { filter: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Filter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Filter): Filter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.config.v1beta1.NotFilter not_filter */ 1:
                    message.filter = {
                        oneofKind: "notFilter",
                        notFilter: NotFilter.internalBinaryRead(reader, reader.uint32(), options, (message.filter as any).notFilter)
                    };
                    break;
                case /* indykite.config.v1beta1.SimpleFilter simple_filter */ 2:
                    message.filter = {
                        oneofKind: "simpleFilter",
                        simpleFilter: SimpleFilter.internalBinaryRead(reader, reader.uint32(), options, (message.filter as any).simpleFilter)
                    };
                    break;
                case /* indykite.config.v1beta1.ComplexFilter complex_filter */ 3:
                    message.filter = {
                        oneofKind: "complexFilter",
                        complexFilter: ComplexFilter.internalBinaryRead(reader, reader.uint32(), options, (message.filter as any).complexFilter)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Filter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.config.v1beta1.NotFilter not_filter = 1; */
        if (message.filter.oneofKind === "notFilter")
            NotFilter.internalBinaryWrite(message.filter.notFilter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* indykite.config.v1beta1.SimpleFilter simple_filter = 2; */
        if (message.filter.oneofKind === "simpleFilter")
            SimpleFilter.internalBinaryWrite(message.filter.simpleFilter, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* indykite.config.v1beta1.ComplexFilter complex_filter = 3; */
        if (message.filter.oneofKind === "complexFilter")
            ComplexFilter.internalBinaryWrite(message.filter.complexFilter, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.config.v1beta1.Filter
 */
export const Filter = new Filter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotFilter$Type extends MessageType<NotFilter> {
    constructor() {
        super("indykite.config.v1beta1.NotFilter", [
            { no: 1, name: "filter", kind: "message", T: () => Filter, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<NotFilter>): NotFilter {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotFilter): NotFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.config.v1beta1.Filter filter */ 1:
                    message.filter = Filter.internalBinaryRead(reader, reader.uint32(), options, message.filter);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.config.v1beta1.Filter filter = 1; */
        if (message.filter)
            Filter.internalBinaryWrite(message.filter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.config.v1beta1.NotFilter
 */
export const NotFilter = new NotFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SimpleFilter$Type extends MessageType<SimpleFilter> {
    constructor() {
        super("indykite.config.v1beta1.SimpleFilter", [
            { no: 1, name: "property_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "property_value", kind: "message", T: () => PropertyValueType, options: { "buf.validate.field": { required: true } } },
            { no: 3, name: "operator", kind: "enum", T: () => ["indykite.config.v1beta1.ComparisonOperator", ComparisonOperator, "COMPARISON_OPERATOR_"], options: { "buf.validate.field": { required: true, enum: { definedOnly: true, notIn: [0] } } } }
        ]);
    }
    create(value?: PartialMessage<SimpleFilter>): SimpleFilter {
        const message = { propertyName: "", operator: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SimpleFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimpleFilter): SimpleFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string property_name */ 1:
                    message.propertyName = reader.string();
                    break;
                case /* indykite.config.v1beta1.PropertyValueType property_value */ 2:
                    message.propertyValue = PropertyValueType.internalBinaryRead(reader, reader.uint32(), options, message.propertyValue);
                    break;
                case /* indykite.config.v1beta1.ComparisonOperator operator */ 3:
                    message.operator = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimpleFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string property_name = 1; */
        if (message.propertyName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.propertyName);
        /* indykite.config.v1beta1.PropertyValueType property_value = 2; */
        if (message.propertyValue)
            PropertyValueType.internalBinaryWrite(message.propertyValue, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* indykite.config.v1beta1.ComparisonOperator operator = 3; */
        if (message.operator !== 0)
            writer.tag(3, WireType.Varint).int32(message.operator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.config.v1beta1.SimpleFilter
 */
export const SimpleFilter = new SimpleFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ComplexFilter$Type extends MessageType<ComplexFilter> {
    constructor() {
        super("indykite.config.v1beta1.ComplexFilter", [
            { no: 1, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Filter, options: { "buf.validate.field": { required: true, repeated: { minItems: "1", items: { required: true } } } } },
            { no: 2, name: "operator", kind: "enum", T: () => ["indykite.config.v1beta1.BoolOperator", BoolOperator, "BOOL_OPERATOR_"], options: { "buf.validate.field": { required: true, enum: { definedOnly: true, notIn: [0] } } } }
        ]);
    }
    create(value?: PartialMessage<ComplexFilter>): ComplexFilter {
        const message = { filters: [], operator: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ComplexFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComplexFilter): ComplexFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated indykite.config.v1beta1.Filter filters */ 1:
                    message.filters.push(Filter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* indykite.config.v1beta1.BoolOperator operator */ 2:
                    message.operator = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ComplexFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated indykite.config.v1beta1.Filter filters = 1; */
        for (let i = 0; i < message.filters.length; i++)
            Filter.internalBinaryWrite(message.filters[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* indykite.config.v1beta1.BoolOperator operator = 2; */
        if (message.operator !== 0)
            writer.tag(2, WireType.Varint).int32(message.operator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.config.v1beta1.ComplexFilter
 */
export const ComplexFilter = new ComplexFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PropertyValueType$Type extends MessageType<PropertyValueType> {
    constructor() {
        super("indykite.config.v1beta1.PropertyValueType", [
            { no: 1, name: "bool_value", kind: "scalar", oneof: "value", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "int_value", kind: "scalar", oneof: "value", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "float_value", kind: "scalar", oneof: "value", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "time_value", kind: "message", oneof: "value", T: () => Timestamp },
            { no: 5, name: "duration_value", kind: "message", oneof: "value", T: () => Duration },
            { no: 6, name: "string_value", kind: "scalar", oneof: "value", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PropertyValueType>): PropertyValueType {
        const message = { value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PropertyValueType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PropertyValueType): PropertyValueType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool bool_value */ 1:
                    message.value = {
                        oneofKind: "boolValue",
                        boolValue: reader.bool()
                    };
                    break;
                case /* int32 int_value */ 2:
                    message.value = {
                        oneofKind: "intValue",
                        intValue: reader.int32()
                    };
                    break;
                case /* double float_value */ 3:
                    message.value = {
                        oneofKind: "floatValue",
                        floatValue: reader.double()
                    };
                    break;
                case /* google.protobuf.Timestamp time_value */ 4:
                    message.value = {
                        oneofKind: "timeValue",
                        timeValue: Timestamp.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).timeValue)
                    };
                    break;
                case /* google.protobuf.Duration duration_value */ 5:
                    message.value = {
                        oneofKind: "durationValue",
                        durationValue: Duration.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).durationValue)
                    };
                    break;
                case /* string string_value */ 6:
                    message.value = {
                        oneofKind: "stringValue",
                        stringValue: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PropertyValueType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool bool_value = 1; */
        if (message.value.oneofKind === "boolValue")
            writer.tag(1, WireType.Varint).bool(message.value.boolValue);
        /* int32 int_value = 2; */
        if (message.value.oneofKind === "intValue")
            writer.tag(2, WireType.Varint).int32(message.value.intValue);
        /* double float_value = 3; */
        if (message.value.oneofKind === "floatValue")
            writer.tag(3, WireType.Bit64).double(message.value.floatValue);
        /* google.protobuf.Timestamp time_value = 4; */
        if (message.value.oneofKind === "timeValue")
            Timestamp.internalBinaryWrite(message.value.timeValue, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration duration_value = 5; */
        if (message.value.oneofKind === "durationValue")
            Duration.internalBinaryWrite(message.value.durationValue, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string string_value = 6; */
        if (message.value.oneofKind === "stringValue")
            writer.tag(6, WireType.LengthDelimited).string(message.value.stringValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.config.v1beta1.PropertyValueType
 */
export const PropertyValueType = new PropertyValueType$Type();
