// @generated by protobuf-ts 2.9.0 with parameter long_type_string,client_grpc1,generate_dependencies
// @generated from protobuf file "indykite/knowledge/v1beta2/identity_knowledge_api.proto" (package "indykite.knowledge.v1beta2", syntax proto3)
// tslint:disable
//
// Copyright (c) 2024 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Relationship } from "../objects/v1beta1/ikg";
import { Node } from "../objects/v1beta1/ikg";
import { Return } from "./model";
import { Value } from "../../objects/v1beta2/value";
/**
 * @generated from protobuf message indykite.knowledge.v1beta2.IdentityKnowledgeReadRequest
 */
export interface IdentityKnowledgeReadRequest {
    /**
     * @generated from protobuf field: string query = 1;
     */
    query: string;
    /**
     * @generated from protobuf field: map<string, indykite.objects.v1beta2.Value> input_params = 2;
     */
    inputParams: {
        [key: string]: Value;
    };
    /**
     * @generated from protobuf field: repeated indykite.knowledge.v1beta2.Return returns = 3;
     */
    returns: Return[];
}
/**
 * @generated from protobuf message indykite.knowledge.v1beta2.IdentityKnowledgeReadResponse
 */
export interface IdentityKnowledgeReadResponse {
    /**
     * @generated from protobuf field: repeated indykite.knowledge.objects.v1beta1.Node nodes = 1;
     */
    nodes: Node[];
    /**
     * @generated from protobuf field: repeated indykite.knowledge.objects.v1beta1.Relationship relationships = 2;
     */
    relationships: Relationship[];
}
// @generated message type with reflection information, may provide speed optimized methods
class IdentityKnowledgeReadRequest$Type extends MessageType<IdentityKnowledgeReadRequest> {
    constructor() {
        super("indykite.knowledge.v1beta2.IdentityKnowledgeReadRequest", [
            { no: 1, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "512000" } } } },
            { no: 2, name: "input_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Value } },
            { no: 3, name: "returns", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Return, options: { "validate.rules": { repeated: { minItems: "1", maxItems: "20" } } } }
        ]);
    }
    create(value?: PartialMessage<IdentityKnowledgeReadRequest>): IdentityKnowledgeReadRequest {
        const message = { query: "", inputParams: {}, returns: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IdentityKnowledgeReadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IdentityKnowledgeReadRequest): IdentityKnowledgeReadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query */ 1:
                    message.query = reader.string();
                    break;
                case /* map<string, indykite.objects.v1beta2.Value> input_params */ 2:
                    this.binaryReadMap2(message.inputParams, reader, options);
                    break;
                case /* repeated indykite.knowledge.v1beta2.Return returns */ 3:
                    message.returns.push(Return.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: IdentityKnowledgeReadRequest["inputParams"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof IdentityKnowledgeReadRequest["inputParams"] | undefined, val: IdentityKnowledgeReadRequest["inputParams"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Value.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.knowledge.v1beta2.IdentityKnowledgeReadRequest.input_params");
            }
        }
        map[key ?? ""] = val ?? Value.create();
    }
    internalBinaryWrite(message: IdentityKnowledgeReadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query = 1; */
        if (message.query !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.query);
        /* map<string, indykite.objects.v1beta2.Value> input_params = 2; */
        for (let k of Object.keys(message.inputParams)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Value.internalBinaryWrite(message.inputParams[k], writer, options);
            writer.join().join();
        }
        /* repeated indykite.knowledge.v1beta2.Return returns = 3; */
        for (let i = 0; i < message.returns.length; i++)
            Return.internalBinaryWrite(message.returns[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.knowledge.v1beta2.IdentityKnowledgeReadRequest
 */
export const IdentityKnowledgeReadRequest = new IdentityKnowledgeReadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IdentityKnowledgeReadResponse$Type extends MessageType<IdentityKnowledgeReadResponse> {
    constructor() {
        super("indykite.knowledge.v1beta2.IdentityKnowledgeReadResponse", [
            { no: 1, name: "nodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Node },
            { no: 2, name: "relationships", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Relationship }
        ]);
    }
    create(value?: PartialMessage<IdentityKnowledgeReadResponse>): IdentityKnowledgeReadResponse {
        const message = { nodes: [], relationships: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IdentityKnowledgeReadResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IdentityKnowledgeReadResponse): IdentityKnowledgeReadResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated indykite.knowledge.objects.v1beta1.Node nodes */ 1:
                    message.nodes.push(Node.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated indykite.knowledge.objects.v1beta1.Relationship relationships */ 2:
                    message.relationships.push(Relationship.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IdentityKnowledgeReadResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated indykite.knowledge.objects.v1beta1.Node nodes = 1; */
        for (let i = 0; i < message.nodes.length; i++)
            Node.internalBinaryWrite(message.nodes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated indykite.knowledge.objects.v1beta1.Relationship relationships = 2; */
        for (let i = 0; i < message.relationships.length; i++)
            Relationship.internalBinaryWrite(message.relationships[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.knowledge.v1beta2.IdentityKnowledgeReadResponse
 */
export const IdentityKnowledgeReadResponse = new IdentityKnowledgeReadResponse$Type();
/**
 * @generated ServiceType for protobuf service indykite.knowledge.v1beta2.IdentityKnowledgeAPI
 */
export const IdentityKnowledgeAPI = new ServiceType("indykite.knowledge.v1beta2.IdentityKnowledgeAPI", [
    { name: "IdentityKnowledgeRead", options: {}, I: IdentityKnowledgeReadRequest, O: IdentityKnowledgeReadResponse }
]);
