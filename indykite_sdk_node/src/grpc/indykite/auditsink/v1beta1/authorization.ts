// @generated by protobuf-ts 2.9.0 with parameter long_type_string,client_grpc1,generate_dependencies
// @generated from protobuf file "indykite/auditsink/v1beta1/authorization.proto" (package "indykite.auditsink.v1beta1", syntax proto3)
// tslint:disable
//
// Copyright (c) 2023 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { Duration } from "../../../google/protobuf/duration";
import { Value } from "../../objects/v1beta1/struct";
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.AuthorizationSubject
 */
export interface AuthorizationSubject {
    /**
     * @generated from protobuf oneof: subject
     */
    subject: {
        oneofKind: "digitalTwin";
        /**
         * @generated from protobuf field: indykite.auditsink.v1beta1.AuthorizationDigitalTwin digital_twin = 1;
         */
        digitalTwin: AuthorizationDigitalTwin;
    } | {
        oneofKind: "digitalTwinProperty";
        /**
         * @generated from protobuf field: indykite.auditsink.v1beta1.AuthorizationSubject.Property digital_twin_property = 2;
         */
        digitalTwinProperty: AuthorizationSubject_Property;
    } | {
        oneofKind: "accessToken";
        /**
         * @generated from protobuf field: string access_token = 3;
         */
        accessToken: string;
    } | {
        oneofKind: "externalId";
        /**
         * @generated from protobuf field: indykite.auditsink.v1beta1.AuthorizationSubject.ExternalID external_id = 4;
         */
        externalId: AuthorizationSubject_ExternalID;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.AuthorizationSubject.Property
 */
export interface AuthorizationSubject_Property {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: indykite.objects.v1beta1.Value value = 2;
     */
    value?: Value;
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.AuthorizationSubject.ExternalID
 */
export interface AuthorizationSubject_ExternalID {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: string external_id = 2;
     */
    externalId: string;
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.AuthorizationDigitalTwin
 */
export interface AuthorizationDigitalTwin {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.AuthorizationPolicy
 */
export interface AuthorizationPolicy {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.AuthorizationDenyReason
 */
export interface AuthorizationDenyReason {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.IsAuthorized
 */
export interface IsAuthorized {
    /**
     * @generated from protobuf field: indykite.auditsink.v1beta1.IsAuthorized.Request request = 1;
     */
    request?: IsAuthorized_Request;
    /**
     * @generated from protobuf field: indykite.auditsink.v1beta1.AuthorizationDigitalTwin resolved_digital_twin = 2;
     */
    resolvedDigitalTwin?: AuthorizationDigitalTwin;
    /**
     * @generated from protobuf field: indykite.auditsink.v1beta1.IsAuthorized.Response response = 3;
     */
    response?: IsAuthorized_Response;
    /**
     * @generated from protobuf field: repeated indykite.auditsink.v1beta1.AuthorizationPolicy policies_found = 4;
     */
    policiesFound: AuthorizationPolicy[];
    /**
     * @generated from protobuf field: indykite.auditsink.v1beta1.AuthorizationDenyReason deny_reason = 5;
     */
    denyReason?: AuthorizationDenyReason;
    /**
     * @generated from protobuf field: google.protobuf.Duration evaluation_time = 6;
     */
    evaluationTime?: Duration;
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.IsAuthorized.Request
 */
export interface IsAuthorized_Request {
    /**
     * AuthorizationSubject to check if is authorized to perform given actions.
     *
     * @generated from protobuf field: indykite.auditsink.v1beta1.AuthorizationSubject subject = 1;
     */
    subject?: AuthorizationSubject;
    /**
     * A list of resources to authorize against.
     *
     * @generated from protobuf field: repeated indykite.auditsink.v1beta1.IsAuthorized.Request.Resource resources = 2;
     */
    resources: IsAuthorized_Request_Resource[];
    /**
     * Policy input params
     *
     * @generated from protobuf field: map<string, indykite.objects.v1beta1.Value> input_params = 3;
     */
    inputParams: {
        [key: string]: Value;
    };
    /**
     * Only evaluate polices containing provided tags
     *
     * @generated from protobuf field: repeated string policy_tags = 4;
     */
    policyTags: string[];
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.IsAuthorized.Request.Resource
 */
export interface IsAuthorized_Request_Resource {
    /**
     * @generated from protobuf field: string external_id = 1;
     */
    externalId: string;
    /**
     * Resource type.
     *
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * A list of actions the subject want to perform.
     *
     * @generated from protobuf field: repeated string actions = 3;
     */
    actions: string[];
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.IsAuthorized.Response
 */
export interface IsAuthorized_Response {
    /**
     * Time the decision was made.
     *
     * @generated from protobuf field: google.protobuf.Timestamp decision_time = 1;
     */
    decisionTime?: Timestamp;
    /**
     * Map with resource type as key.
     *
     * @generated from protobuf field: map<string, indykite.auditsink.v1beta1.IsAuthorized.Response.ResourceType> decisions = 2;
     */
    decisions: {
        [key: string]: IsAuthorized_Response_ResourceType;
    };
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.IsAuthorized.Response.Action
 */
export interface IsAuthorized_Response_Action {
    /**
     * @generated from protobuf field: bool allow = 1;
     */
    allow: boolean;
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.IsAuthorized.Response.Resource
 */
export interface IsAuthorized_Response_Resource {
    /**
     * Map with action as key.
     *
     * @generated from protobuf field: map<string, indykite.auditsink.v1beta1.IsAuthorized.Response.Action> actions = 1;
     */
    actions: {
        [key: string]: IsAuthorized_Response_Action;
    };
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.IsAuthorized.Response.ResourceType
 */
export interface IsAuthorized_Response_ResourceType {
    /**
     * Map with resource id as key.
     *
     * @generated from protobuf field: map<string, indykite.auditsink.v1beta1.IsAuthorized.Response.Resource> resources = 1;
     */
    resources: {
        [key: string]: IsAuthorized_Response_Resource;
    };
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.WhatAuthorized
 */
export interface WhatAuthorized {
    /**
     * @generated from protobuf field: indykite.auditsink.v1beta1.WhatAuthorized.Request request = 1;
     */
    request?: WhatAuthorized_Request;
    /**
     * @generated from protobuf field: indykite.auditsink.v1beta1.AuthorizationDigitalTwin resolved_digital_twin = 2;
     */
    resolvedDigitalTwin?: AuthorizationDigitalTwin;
    /**
     * @generated from protobuf field: indykite.auditsink.v1beta1.WhatAuthorized.Response response = 3;
     */
    response?: WhatAuthorized_Response;
    /**
     * @generated from protobuf field: repeated indykite.auditsink.v1beta1.AuthorizationPolicy policies_found = 4;
     */
    policiesFound: AuthorizationPolicy[];
    /**
     * @generated from protobuf field: indykite.auditsink.v1beta1.AuthorizationDenyReason deny_reason = 5;
     */
    denyReason?: AuthorizationDenyReason;
    /**
     * @generated from protobuf field: google.protobuf.Duration evaluation_time = 6;
     */
    evaluationTime?: Duration;
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.WhatAuthorized.Request
 */
export interface WhatAuthorized_Request {
    /**
     * AuthorizationSubject to check if is authorized to perform given actions.
     *
     * @generated from protobuf field: indykite.auditsink.v1beta1.AuthorizationSubject subject = 1;
     */
    subject?: AuthorizationSubject;
    /**
     * A list of resources to authorize against.
     *
     * @generated from protobuf field: repeated indykite.auditsink.v1beta1.WhatAuthorized.Request.ResourceType resource_types = 2;
     */
    resourceTypes: WhatAuthorized_Request_ResourceType[];
    /**
     * Policy input params
     *
     * @generated from protobuf field: map<string, indykite.objects.v1beta1.Value> input_params = 3;
     */
    inputParams: {
        [key: string]: Value;
    };
    /**
     * Only evaluate polices containing provided tags
     *
     * @generated from protobuf field: repeated string policy_tags = 4;
     */
    policyTags: string[];
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.WhatAuthorized.Request.ResourceType
 */
export interface WhatAuthorized_Request_ResourceType {
    /**
     * Resource type.
     *
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * A list of actions the subject want to perform.
     *
     * @generated from protobuf field: repeated string actions = 2;
     */
    actions: string[];
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.WhatAuthorized.Response
 */
export interface WhatAuthorized_Response {
    /**
     * Time the decision was made
     *
     * @generated from protobuf field: google.protobuf.Timestamp decision_time = 1;
     */
    decisionTime?: Timestamp;
    /**
     * Map with resource type as key
     *
     * @generated from protobuf field: map<string, indykite.auditsink.v1beta1.WhatAuthorized.Response.ResourceType> decisions = 2;
     */
    decisions: {
        [key: string]: WhatAuthorized_Response_ResourceType;
    };
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.WhatAuthorized.Response.Resource
 */
export interface WhatAuthorized_Response_Resource {
    /**
     * Resource external identifier
     *
     * @generated from protobuf field: string external_id = 1;
     */
    externalId: string;
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.WhatAuthorized.Response.Action
 */
export interface WhatAuthorized_Response_Action {
    /**
     * List of resources
     *
     * @generated from protobuf field: repeated indykite.auditsink.v1beta1.WhatAuthorized.Response.Resource resources = 1;
     */
    resources: WhatAuthorized_Response_Resource[];
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.WhatAuthorized.Response.ResourceType
 */
export interface WhatAuthorized_Response_ResourceType {
    /**
     * Map with action as key
     *
     * @generated from protobuf field: map<string, indykite.auditsink.v1beta1.WhatAuthorized.Response.Action> actions = 1;
     */
    actions: {
        [key: string]: WhatAuthorized_Response_Action;
    };
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.WhoAuthorized
 */
export interface WhoAuthorized {
    /**
     * @generated from protobuf field: indykite.auditsink.v1beta1.WhoAuthorized.Request request = 1;
     */
    request?: WhoAuthorized_Request;
    /**
     * @generated from protobuf field: indykite.auditsink.v1beta1.AuthorizationDigitalTwin resolved_digital_twin = 2;
     */
    resolvedDigitalTwin?: AuthorizationDigitalTwin;
    /**
     * @generated from protobuf field: indykite.auditsink.v1beta1.WhoAuthorized.Response response = 3;
     */
    response?: WhoAuthorized_Response;
    /**
     * @generated from protobuf field: repeated indykite.auditsink.v1beta1.AuthorizationPolicy policies_found = 4;
     */
    policiesFound: AuthorizationPolicy[];
    /**
     * @generated from protobuf field: indykite.auditsink.v1beta1.AuthorizationDenyReason deny_reason = 5;
     */
    denyReason?: AuthorizationDenyReason;
    /**
     * @generated from protobuf field: google.protobuf.Duration evaluation_time = 6;
     */
    evaluationTime?: Duration;
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.WhoAuthorized.Request
 */
export interface WhoAuthorized_Request {
    /**
     * A list of resources to authorize against.
     *
     * @generated from protobuf field: repeated indykite.auditsink.v1beta1.WhoAuthorized.Request.Resource resources = 1;
     */
    resources: WhoAuthorized_Request_Resource[];
    /**
     * Policy input params
     *
     * @generated from protobuf field: map<string, indykite.objects.v1beta1.Value> input_params = 2;
     */
    inputParams: {
        [key: string]: Value;
    };
    /**
     * Only evaluate polices containing provided tags
     *
     * @generated from protobuf field: repeated string policy_tags = 3;
     */
    policyTags: string[];
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.WhoAuthorized.Request.Resource
 */
export interface WhoAuthorized_Request_Resource {
    /**
     * @generated from protobuf field: string external_id = 1;
     */
    externalId: string;
    /**
     * Resource type.
     *
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * A list of actions the subject want to perform.
     *
     * @generated from protobuf field: repeated string actions = 3;
     */
    actions: string[];
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.WhoAuthorized.Response
 */
export interface WhoAuthorized_Response {
    /**
     * Time the decision was made.
     *
     * @generated from protobuf field: google.protobuf.Timestamp decision_time = 1;
     */
    decisionTime?: Timestamp;
    /**
     * Map with resource type as key.
     *
     * @generated from protobuf field: map<string, indykite.auditsink.v1beta1.WhoAuthorized.Response.ResourceType> decisions = 2;
     */
    decisions: {
        [key: string]: WhoAuthorized_Response_ResourceType;
    };
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.WhoAuthorized.Response.Subject
 */
export interface WhoAuthorized_Response_Subject {
    /**
     * Resource external identifier.
     *
     * @generated from protobuf field: string external_id = 1;
     */
    externalId: string;
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.WhoAuthorized.Response.Action
 */
export interface WhoAuthorized_Response_Action {
    /**
     * List of subjects.
     *
     * @generated from protobuf field: repeated indykite.auditsink.v1beta1.WhoAuthorized.Response.Subject subjects = 1;
     */
    subjects: WhoAuthorized_Response_Subject[];
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.WhoAuthorized.Response.Resource
 */
export interface WhoAuthorized_Response_Resource {
    /**
     * Map with actions as key.
     *
     * @generated from protobuf field: map<string, indykite.auditsink.v1beta1.WhoAuthorized.Response.Action> actions = 1;
     */
    actions: {
        [key: string]: WhoAuthorized_Response_Action;
    };
}
/**
 * @generated from protobuf message indykite.auditsink.v1beta1.WhoAuthorized.Response.ResourceType
 */
export interface WhoAuthorized_Response_ResourceType {
    /**
     * Map with resource id as key.
     *
     * @generated from protobuf field: map<string, indykite.auditsink.v1beta1.WhoAuthorized.Response.Resource> resources = 1;
     */
    resources: {
        [key: string]: WhoAuthorized_Response_Resource;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizationSubject$Type extends MessageType<AuthorizationSubject> {
    constructor() {
        super("indykite.auditsink.v1beta1.AuthorizationSubject", [
            { no: 1, name: "digital_twin", kind: "message", oneof: "subject", T: () => AuthorizationDigitalTwin },
            { no: 2, name: "digital_twin_property", kind: "message", oneof: "subject", T: () => AuthorizationSubject_Property },
            { no: 3, name: "access_token", kind: "scalar", oneof: "subject", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "external_id", kind: "message", oneof: "subject", T: () => AuthorizationSubject_ExternalID }
        ]);
    }
    create(value?: PartialMessage<AuthorizationSubject>): AuthorizationSubject {
        const message = { subject: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthorizationSubject>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthorizationSubject): AuthorizationSubject {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.auditsink.v1beta1.AuthorizationDigitalTwin digital_twin */ 1:
                    message.subject = {
                        oneofKind: "digitalTwin",
                        digitalTwin: AuthorizationDigitalTwin.internalBinaryRead(reader, reader.uint32(), options, (message.subject as any).digitalTwin)
                    };
                    break;
                case /* indykite.auditsink.v1beta1.AuthorizationSubject.Property digital_twin_property */ 2:
                    message.subject = {
                        oneofKind: "digitalTwinProperty",
                        digitalTwinProperty: AuthorizationSubject_Property.internalBinaryRead(reader, reader.uint32(), options, (message.subject as any).digitalTwinProperty)
                    };
                    break;
                case /* string access_token */ 3:
                    message.subject = {
                        oneofKind: "accessToken",
                        accessToken: reader.string()
                    };
                    break;
                case /* indykite.auditsink.v1beta1.AuthorizationSubject.ExternalID external_id */ 4:
                    message.subject = {
                        oneofKind: "externalId",
                        externalId: AuthorizationSubject_ExternalID.internalBinaryRead(reader, reader.uint32(), options, (message.subject as any).externalId)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthorizationSubject, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.auditsink.v1beta1.AuthorizationDigitalTwin digital_twin = 1; */
        if (message.subject.oneofKind === "digitalTwin")
            AuthorizationDigitalTwin.internalBinaryWrite(message.subject.digitalTwin, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* indykite.auditsink.v1beta1.AuthorizationSubject.Property digital_twin_property = 2; */
        if (message.subject.oneofKind === "digitalTwinProperty")
            AuthorizationSubject_Property.internalBinaryWrite(message.subject.digitalTwinProperty, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string access_token = 3; */
        if (message.subject.oneofKind === "accessToken")
            writer.tag(3, WireType.LengthDelimited).string(message.subject.accessToken);
        /* indykite.auditsink.v1beta1.AuthorizationSubject.ExternalID external_id = 4; */
        if (message.subject.oneofKind === "externalId")
            AuthorizationSubject_ExternalID.internalBinaryWrite(message.subject.externalId, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.AuthorizationSubject
 */
export const AuthorizationSubject = new AuthorizationSubject$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizationSubject_Property$Type extends MessageType<AuthorizationSubject_Property> {
    constructor() {
        super("indykite.auditsink.v1beta1.AuthorizationSubject.Property", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "message", T: () => Value }
        ]);
    }
    create(value?: PartialMessage<AuthorizationSubject_Property>): AuthorizationSubject_Property {
        const message = { type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthorizationSubject_Property>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthorizationSubject_Property): AuthorizationSubject_Property {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* indykite.objects.v1beta1.Value value */ 2:
                    message.value = Value.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthorizationSubject_Property, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* indykite.objects.v1beta1.Value value = 2; */
        if (message.value)
            Value.internalBinaryWrite(message.value, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.AuthorizationSubject.Property
 */
export const AuthorizationSubject_Property = new AuthorizationSubject_Property$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizationSubject_ExternalID$Type extends MessageType<AuthorizationSubject_ExternalID> {
    constructor() {
        super("indykite.auditsink.v1beta1.AuthorizationSubject.ExternalID", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "external_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthorizationSubject_ExternalID>): AuthorizationSubject_ExternalID {
        const message = { type: "", externalId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthorizationSubject_ExternalID>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthorizationSubject_ExternalID): AuthorizationSubject_ExternalID {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string external_id */ 2:
                    message.externalId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthorizationSubject_ExternalID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string external_id = 2; */
        if (message.externalId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.externalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.AuthorizationSubject.ExternalID
 */
export const AuthorizationSubject_ExternalID = new AuthorizationSubject_ExternalID$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizationDigitalTwin$Type extends MessageType<AuthorizationDigitalTwin> {
    constructor() {
        super("indykite.auditsink.v1beta1.AuthorizationDigitalTwin", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthorizationDigitalTwin>): AuthorizationDigitalTwin {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthorizationDigitalTwin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthorizationDigitalTwin): AuthorizationDigitalTwin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthorizationDigitalTwin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.AuthorizationDigitalTwin
 */
export const AuthorizationDigitalTwin = new AuthorizationDigitalTwin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizationPolicy$Type extends MessageType<AuthorizationPolicy> {
    constructor() {
        super("indykite.auditsink.v1beta1.AuthorizationPolicy", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthorizationPolicy>): AuthorizationPolicy {
        const message = { id: "", name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthorizationPolicy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthorizationPolicy): AuthorizationPolicy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthorizationPolicy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.AuthorizationPolicy
 */
export const AuthorizationPolicy = new AuthorizationPolicy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizationDenyReason$Type extends MessageType<AuthorizationDenyReason> {
    constructor() {
        super("indykite.auditsink.v1beta1.AuthorizationDenyReason", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthorizationDenyReason>): AuthorizationDenyReason {
        const message = { message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthorizationDenyReason>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthorizationDenyReason): AuthorizationDenyReason {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthorizationDenyReason, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.AuthorizationDenyReason
 */
export const AuthorizationDenyReason = new AuthorizationDenyReason$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsAuthorized$Type extends MessageType<IsAuthorized> {
    constructor() {
        super("indykite.auditsink.v1beta1.IsAuthorized", [
            { no: 1, name: "request", kind: "message", T: () => IsAuthorized_Request },
            { no: 2, name: "resolved_digital_twin", kind: "message", T: () => AuthorizationDigitalTwin },
            { no: 3, name: "response", kind: "message", T: () => IsAuthorized_Response },
            { no: 4, name: "policies_found", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AuthorizationPolicy },
            { no: 5, name: "deny_reason", kind: "message", T: () => AuthorizationDenyReason },
            { no: 6, name: "evaluation_time", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<IsAuthorized>): IsAuthorized {
        const message = { policiesFound: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsAuthorized>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAuthorized): IsAuthorized {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.auditsink.v1beta1.IsAuthorized.Request request */ 1:
                    message.request = IsAuthorized_Request.internalBinaryRead(reader, reader.uint32(), options, message.request);
                    break;
                case /* indykite.auditsink.v1beta1.AuthorizationDigitalTwin resolved_digital_twin */ 2:
                    message.resolvedDigitalTwin = AuthorizationDigitalTwin.internalBinaryRead(reader, reader.uint32(), options, message.resolvedDigitalTwin);
                    break;
                case /* indykite.auditsink.v1beta1.IsAuthorized.Response response */ 3:
                    message.response = IsAuthorized_Response.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                case /* repeated indykite.auditsink.v1beta1.AuthorizationPolicy policies_found */ 4:
                    message.policiesFound.push(AuthorizationPolicy.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* indykite.auditsink.v1beta1.AuthorizationDenyReason deny_reason */ 5:
                    message.denyReason = AuthorizationDenyReason.internalBinaryRead(reader, reader.uint32(), options, message.denyReason);
                    break;
                case /* google.protobuf.Duration evaluation_time */ 6:
                    message.evaluationTime = Duration.internalBinaryRead(reader, reader.uint32(), options, message.evaluationTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IsAuthorized, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.auditsink.v1beta1.IsAuthorized.Request request = 1; */
        if (message.request)
            IsAuthorized_Request.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* indykite.auditsink.v1beta1.AuthorizationDigitalTwin resolved_digital_twin = 2; */
        if (message.resolvedDigitalTwin)
            AuthorizationDigitalTwin.internalBinaryWrite(message.resolvedDigitalTwin, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* indykite.auditsink.v1beta1.IsAuthorized.Response response = 3; */
        if (message.response)
            IsAuthorized_Response.internalBinaryWrite(message.response, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated indykite.auditsink.v1beta1.AuthorizationPolicy policies_found = 4; */
        for (let i = 0; i < message.policiesFound.length; i++)
            AuthorizationPolicy.internalBinaryWrite(message.policiesFound[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* indykite.auditsink.v1beta1.AuthorizationDenyReason deny_reason = 5; */
        if (message.denyReason)
            AuthorizationDenyReason.internalBinaryWrite(message.denyReason, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration evaluation_time = 6; */
        if (message.evaluationTime)
            Duration.internalBinaryWrite(message.evaluationTime, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.IsAuthorized
 */
export const IsAuthorized = new IsAuthorized$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsAuthorized_Request$Type extends MessageType<IsAuthorized_Request> {
    constructor() {
        super("indykite.auditsink.v1beta1.IsAuthorized.Request", [
            { no: 1, name: "subject", kind: "message", T: () => AuthorizationSubject },
            { no: 2, name: "resources", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IsAuthorized_Request_Resource },
            { no: 3, name: "input_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Value } },
            { no: 4, name: "policy_tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IsAuthorized_Request>): IsAuthorized_Request {
        const message = { resources: [], inputParams: {}, policyTags: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsAuthorized_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAuthorized_Request): IsAuthorized_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.auditsink.v1beta1.AuthorizationSubject subject */ 1:
                    message.subject = AuthorizationSubject.internalBinaryRead(reader, reader.uint32(), options, message.subject);
                    break;
                case /* repeated indykite.auditsink.v1beta1.IsAuthorized.Request.Resource resources */ 2:
                    message.resources.push(IsAuthorized_Request_Resource.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, indykite.objects.v1beta1.Value> input_params */ 3:
                    this.binaryReadMap3(message.inputParams, reader, options);
                    break;
                case /* repeated string policy_tags */ 4:
                    message.policyTags.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: IsAuthorized_Request["inputParams"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof IsAuthorized_Request["inputParams"] | undefined, val: IsAuthorized_Request["inputParams"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Value.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.auditsink.v1beta1.IsAuthorized.Request.input_params");
            }
        }
        map[key ?? ""] = val ?? Value.create();
    }
    internalBinaryWrite(message: IsAuthorized_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.auditsink.v1beta1.AuthorizationSubject subject = 1; */
        if (message.subject)
            AuthorizationSubject.internalBinaryWrite(message.subject, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated indykite.auditsink.v1beta1.IsAuthorized.Request.Resource resources = 2; */
        for (let i = 0; i < message.resources.length; i++)
            IsAuthorized_Request_Resource.internalBinaryWrite(message.resources[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, indykite.objects.v1beta1.Value> input_params = 3; */
        for (let k of Object.keys(message.inputParams)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Value.internalBinaryWrite(message.inputParams[k], writer, options);
            writer.join().join();
        }
        /* repeated string policy_tags = 4; */
        for (let i = 0; i < message.policyTags.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.policyTags[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.IsAuthorized.Request
 */
export const IsAuthorized_Request = new IsAuthorized_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsAuthorized_Request_Resource$Type extends MessageType<IsAuthorized_Request_Resource> {
    constructor() {
        super("indykite.auditsink.v1beta1.IsAuthorized.Request.Resource", [
            { no: 1, name: "external_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "actions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IsAuthorized_Request_Resource>): IsAuthorized_Request_Resource {
        const message = { externalId: "", type: "", actions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsAuthorized_Request_Resource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAuthorized_Request_Resource): IsAuthorized_Request_Resource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string external_id */ 1:
                    message.externalId = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* repeated string actions */ 3:
                    message.actions.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IsAuthorized_Request_Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string external_id = 1; */
        if (message.externalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.externalId);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* repeated string actions = 3; */
        for (let i = 0; i < message.actions.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.actions[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.IsAuthorized.Request.Resource
 */
export const IsAuthorized_Request_Resource = new IsAuthorized_Request_Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsAuthorized_Response$Type extends MessageType<IsAuthorized_Response> {
    constructor() {
        super("indykite.auditsink.v1beta1.IsAuthorized.Response", [
            { no: 1, name: "decision_time", kind: "message", T: () => Timestamp },
            { no: 2, name: "decisions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => IsAuthorized_Response_ResourceType } }
        ]);
    }
    create(value?: PartialMessage<IsAuthorized_Response>): IsAuthorized_Response {
        const message = { decisions: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsAuthorized_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAuthorized_Response): IsAuthorized_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp decision_time */ 1:
                    message.decisionTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.decisionTime);
                    break;
                case /* map<string, indykite.auditsink.v1beta1.IsAuthorized.Response.ResourceType> decisions */ 2:
                    this.binaryReadMap2(message.decisions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: IsAuthorized_Response["decisions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof IsAuthorized_Response["decisions"] | undefined, val: IsAuthorized_Response["decisions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = IsAuthorized_Response_ResourceType.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.auditsink.v1beta1.IsAuthorized.Response.decisions");
            }
        }
        map[key ?? ""] = val ?? IsAuthorized_Response_ResourceType.create();
    }
    internalBinaryWrite(message: IsAuthorized_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp decision_time = 1; */
        if (message.decisionTime)
            Timestamp.internalBinaryWrite(message.decisionTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, indykite.auditsink.v1beta1.IsAuthorized.Response.ResourceType> decisions = 2; */
        for (let k of Object.keys(message.decisions)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            IsAuthorized_Response_ResourceType.internalBinaryWrite(message.decisions[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.IsAuthorized.Response
 */
export const IsAuthorized_Response = new IsAuthorized_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsAuthorized_Response_Action$Type extends MessageType<IsAuthorized_Response_Action> {
    constructor() {
        super("indykite.auditsink.v1beta1.IsAuthorized.Response.Action", [
            { no: 1, name: "allow", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IsAuthorized_Response_Action>): IsAuthorized_Response_Action {
        const message = { allow: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsAuthorized_Response_Action>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAuthorized_Response_Action): IsAuthorized_Response_Action {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool allow */ 1:
                    message.allow = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IsAuthorized_Response_Action, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool allow = 1; */
        if (message.allow !== false)
            writer.tag(1, WireType.Varint).bool(message.allow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.IsAuthorized.Response.Action
 */
export const IsAuthorized_Response_Action = new IsAuthorized_Response_Action$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsAuthorized_Response_Resource$Type extends MessageType<IsAuthorized_Response_Resource> {
    constructor() {
        super("indykite.auditsink.v1beta1.IsAuthorized.Response.Resource", [
            { no: 1, name: "actions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => IsAuthorized_Response_Action } }
        ]);
    }
    create(value?: PartialMessage<IsAuthorized_Response_Resource>): IsAuthorized_Response_Resource {
        const message = { actions: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsAuthorized_Response_Resource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAuthorized_Response_Resource): IsAuthorized_Response_Resource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, indykite.auditsink.v1beta1.IsAuthorized.Response.Action> actions */ 1:
                    this.binaryReadMap1(message.actions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: IsAuthorized_Response_Resource["actions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof IsAuthorized_Response_Resource["actions"] | undefined, val: IsAuthorized_Response_Resource["actions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = IsAuthorized_Response_Action.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.auditsink.v1beta1.IsAuthorized.Response.Resource.actions");
            }
        }
        map[key ?? ""] = val ?? IsAuthorized_Response_Action.create();
    }
    internalBinaryWrite(message: IsAuthorized_Response_Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, indykite.auditsink.v1beta1.IsAuthorized.Response.Action> actions = 1; */
        for (let k of Object.keys(message.actions)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            IsAuthorized_Response_Action.internalBinaryWrite(message.actions[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.IsAuthorized.Response.Resource
 */
export const IsAuthorized_Response_Resource = new IsAuthorized_Response_Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsAuthorized_Response_ResourceType$Type extends MessageType<IsAuthorized_Response_ResourceType> {
    constructor() {
        super("indykite.auditsink.v1beta1.IsAuthorized.Response.ResourceType", [
            { no: 1, name: "resources", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => IsAuthorized_Response_Resource } }
        ]);
    }
    create(value?: PartialMessage<IsAuthorized_Response_ResourceType>): IsAuthorized_Response_ResourceType {
        const message = { resources: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsAuthorized_Response_ResourceType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAuthorized_Response_ResourceType): IsAuthorized_Response_ResourceType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, indykite.auditsink.v1beta1.IsAuthorized.Response.Resource> resources */ 1:
                    this.binaryReadMap1(message.resources, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: IsAuthorized_Response_ResourceType["resources"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof IsAuthorized_Response_ResourceType["resources"] | undefined, val: IsAuthorized_Response_ResourceType["resources"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = IsAuthorized_Response_Resource.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.auditsink.v1beta1.IsAuthorized.Response.ResourceType.resources");
            }
        }
        map[key ?? ""] = val ?? IsAuthorized_Response_Resource.create();
    }
    internalBinaryWrite(message: IsAuthorized_Response_ResourceType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, indykite.auditsink.v1beta1.IsAuthorized.Response.Resource> resources = 1; */
        for (let k of Object.keys(message.resources)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            IsAuthorized_Response_Resource.internalBinaryWrite(message.resources[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.IsAuthorized.Response.ResourceType
 */
export const IsAuthorized_Response_ResourceType = new IsAuthorized_Response_ResourceType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhatAuthorized$Type extends MessageType<WhatAuthorized> {
    constructor() {
        super("indykite.auditsink.v1beta1.WhatAuthorized", [
            { no: 1, name: "request", kind: "message", T: () => WhatAuthorized_Request },
            { no: 2, name: "resolved_digital_twin", kind: "message", T: () => AuthorizationDigitalTwin },
            { no: 3, name: "response", kind: "message", T: () => WhatAuthorized_Response },
            { no: 4, name: "policies_found", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AuthorizationPolicy },
            { no: 5, name: "deny_reason", kind: "message", T: () => AuthorizationDenyReason },
            { no: 6, name: "evaluation_time", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<WhatAuthorized>): WhatAuthorized {
        const message = { policiesFound: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhatAuthorized>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhatAuthorized): WhatAuthorized {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.auditsink.v1beta1.WhatAuthorized.Request request */ 1:
                    message.request = WhatAuthorized_Request.internalBinaryRead(reader, reader.uint32(), options, message.request);
                    break;
                case /* indykite.auditsink.v1beta1.AuthorizationDigitalTwin resolved_digital_twin */ 2:
                    message.resolvedDigitalTwin = AuthorizationDigitalTwin.internalBinaryRead(reader, reader.uint32(), options, message.resolvedDigitalTwin);
                    break;
                case /* indykite.auditsink.v1beta1.WhatAuthorized.Response response */ 3:
                    message.response = WhatAuthorized_Response.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                case /* repeated indykite.auditsink.v1beta1.AuthorizationPolicy policies_found */ 4:
                    message.policiesFound.push(AuthorizationPolicy.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* indykite.auditsink.v1beta1.AuthorizationDenyReason deny_reason */ 5:
                    message.denyReason = AuthorizationDenyReason.internalBinaryRead(reader, reader.uint32(), options, message.denyReason);
                    break;
                case /* google.protobuf.Duration evaluation_time */ 6:
                    message.evaluationTime = Duration.internalBinaryRead(reader, reader.uint32(), options, message.evaluationTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhatAuthorized, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.auditsink.v1beta1.WhatAuthorized.Request request = 1; */
        if (message.request)
            WhatAuthorized_Request.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* indykite.auditsink.v1beta1.AuthorizationDigitalTwin resolved_digital_twin = 2; */
        if (message.resolvedDigitalTwin)
            AuthorizationDigitalTwin.internalBinaryWrite(message.resolvedDigitalTwin, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* indykite.auditsink.v1beta1.WhatAuthorized.Response response = 3; */
        if (message.response)
            WhatAuthorized_Response.internalBinaryWrite(message.response, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated indykite.auditsink.v1beta1.AuthorizationPolicy policies_found = 4; */
        for (let i = 0; i < message.policiesFound.length; i++)
            AuthorizationPolicy.internalBinaryWrite(message.policiesFound[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* indykite.auditsink.v1beta1.AuthorizationDenyReason deny_reason = 5; */
        if (message.denyReason)
            AuthorizationDenyReason.internalBinaryWrite(message.denyReason, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration evaluation_time = 6; */
        if (message.evaluationTime)
            Duration.internalBinaryWrite(message.evaluationTime, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.WhatAuthorized
 */
export const WhatAuthorized = new WhatAuthorized$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhatAuthorized_Request$Type extends MessageType<WhatAuthorized_Request> {
    constructor() {
        super("indykite.auditsink.v1beta1.WhatAuthorized.Request", [
            { no: 1, name: "subject", kind: "message", T: () => AuthorizationSubject },
            { no: 2, name: "resource_types", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WhatAuthorized_Request_ResourceType },
            { no: 3, name: "input_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Value } },
            { no: 4, name: "policy_tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WhatAuthorized_Request>): WhatAuthorized_Request {
        const message = { resourceTypes: [], inputParams: {}, policyTags: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhatAuthorized_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhatAuthorized_Request): WhatAuthorized_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.auditsink.v1beta1.AuthorizationSubject subject */ 1:
                    message.subject = AuthorizationSubject.internalBinaryRead(reader, reader.uint32(), options, message.subject);
                    break;
                case /* repeated indykite.auditsink.v1beta1.WhatAuthorized.Request.ResourceType resource_types */ 2:
                    message.resourceTypes.push(WhatAuthorized_Request_ResourceType.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, indykite.objects.v1beta1.Value> input_params */ 3:
                    this.binaryReadMap3(message.inputParams, reader, options);
                    break;
                case /* repeated string policy_tags */ 4:
                    message.policyTags.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: WhatAuthorized_Request["inputParams"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WhatAuthorized_Request["inputParams"] | undefined, val: WhatAuthorized_Request["inputParams"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Value.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.auditsink.v1beta1.WhatAuthorized.Request.input_params");
            }
        }
        map[key ?? ""] = val ?? Value.create();
    }
    internalBinaryWrite(message: WhatAuthorized_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.auditsink.v1beta1.AuthorizationSubject subject = 1; */
        if (message.subject)
            AuthorizationSubject.internalBinaryWrite(message.subject, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated indykite.auditsink.v1beta1.WhatAuthorized.Request.ResourceType resource_types = 2; */
        for (let i = 0; i < message.resourceTypes.length; i++)
            WhatAuthorized_Request_ResourceType.internalBinaryWrite(message.resourceTypes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, indykite.objects.v1beta1.Value> input_params = 3; */
        for (let k of Object.keys(message.inputParams)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Value.internalBinaryWrite(message.inputParams[k], writer, options);
            writer.join().join();
        }
        /* repeated string policy_tags = 4; */
        for (let i = 0; i < message.policyTags.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.policyTags[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.WhatAuthorized.Request
 */
export const WhatAuthorized_Request = new WhatAuthorized_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhatAuthorized_Request_ResourceType$Type extends MessageType<WhatAuthorized_Request_ResourceType> {
    constructor() {
        super("indykite.auditsink.v1beta1.WhatAuthorized.Request.ResourceType", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "actions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WhatAuthorized_Request_ResourceType>): WhatAuthorized_Request_ResourceType {
        const message = { type: "", actions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhatAuthorized_Request_ResourceType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhatAuthorized_Request_ResourceType): WhatAuthorized_Request_ResourceType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* repeated string actions */ 2:
                    message.actions.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhatAuthorized_Request_ResourceType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* repeated string actions = 2; */
        for (let i = 0; i < message.actions.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.actions[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.WhatAuthorized.Request.ResourceType
 */
export const WhatAuthorized_Request_ResourceType = new WhatAuthorized_Request_ResourceType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhatAuthorized_Response$Type extends MessageType<WhatAuthorized_Response> {
    constructor() {
        super("indykite.auditsink.v1beta1.WhatAuthorized.Response", [
            { no: 1, name: "decision_time", kind: "message", T: () => Timestamp },
            { no: 2, name: "decisions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => WhatAuthorized_Response_ResourceType } }
        ]);
    }
    create(value?: PartialMessage<WhatAuthorized_Response>): WhatAuthorized_Response {
        const message = { decisions: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhatAuthorized_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhatAuthorized_Response): WhatAuthorized_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp decision_time */ 1:
                    message.decisionTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.decisionTime);
                    break;
                case /* map<string, indykite.auditsink.v1beta1.WhatAuthorized.Response.ResourceType> decisions */ 2:
                    this.binaryReadMap2(message.decisions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: WhatAuthorized_Response["decisions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WhatAuthorized_Response["decisions"] | undefined, val: WhatAuthorized_Response["decisions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = WhatAuthorized_Response_ResourceType.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.auditsink.v1beta1.WhatAuthorized.Response.decisions");
            }
        }
        map[key ?? ""] = val ?? WhatAuthorized_Response_ResourceType.create();
    }
    internalBinaryWrite(message: WhatAuthorized_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp decision_time = 1; */
        if (message.decisionTime)
            Timestamp.internalBinaryWrite(message.decisionTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, indykite.auditsink.v1beta1.WhatAuthorized.Response.ResourceType> decisions = 2; */
        for (let k of Object.keys(message.decisions)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            WhatAuthorized_Response_ResourceType.internalBinaryWrite(message.decisions[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.WhatAuthorized.Response
 */
export const WhatAuthorized_Response = new WhatAuthorized_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhatAuthorized_Response_Resource$Type extends MessageType<WhatAuthorized_Response_Resource> {
    constructor() {
        super("indykite.auditsink.v1beta1.WhatAuthorized.Response.Resource", [
            { no: 1, name: "external_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WhatAuthorized_Response_Resource>): WhatAuthorized_Response_Resource {
        const message = { externalId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhatAuthorized_Response_Resource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhatAuthorized_Response_Resource): WhatAuthorized_Response_Resource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string external_id */ 1:
                    message.externalId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhatAuthorized_Response_Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string external_id = 1; */
        if (message.externalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.externalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.WhatAuthorized.Response.Resource
 */
export const WhatAuthorized_Response_Resource = new WhatAuthorized_Response_Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhatAuthorized_Response_Action$Type extends MessageType<WhatAuthorized_Response_Action> {
    constructor() {
        super("indykite.auditsink.v1beta1.WhatAuthorized.Response.Action", [
            { no: 1, name: "resources", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WhatAuthorized_Response_Resource }
        ]);
    }
    create(value?: PartialMessage<WhatAuthorized_Response_Action>): WhatAuthorized_Response_Action {
        const message = { resources: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhatAuthorized_Response_Action>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhatAuthorized_Response_Action): WhatAuthorized_Response_Action {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated indykite.auditsink.v1beta1.WhatAuthorized.Response.Resource resources */ 1:
                    message.resources.push(WhatAuthorized_Response_Resource.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhatAuthorized_Response_Action, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated indykite.auditsink.v1beta1.WhatAuthorized.Response.Resource resources = 1; */
        for (let i = 0; i < message.resources.length; i++)
            WhatAuthorized_Response_Resource.internalBinaryWrite(message.resources[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.WhatAuthorized.Response.Action
 */
export const WhatAuthorized_Response_Action = new WhatAuthorized_Response_Action$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhatAuthorized_Response_ResourceType$Type extends MessageType<WhatAuthorized_Response_ResourceType> {
    constructor() {
        super("indykite.auditsink.v1beta1.WhatAuthorized.Response.ResourceType", [
            { no: 1, name: "actions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => WhatAuthorized_Response_Action } }
        ]);
    }
    create(value?: PartialMessage<WhatAuthorized_Response_ResourceType>): WhatAuthorized_Response_ResourceType {
        const message = { actions: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhatAuthorized_Response_ResourceType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhatAuthorized_Response_ResourceType): WhatAuthorized_Response_ResourceType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, indykite.auditsink.v1beta1.WhatAuthorized.Response.Action> actions */ 1:
                    this.binaryReadMap1(message.actions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: WhatAuthorized_Response_ResourceType["actions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WhatAuthorized_Response_ResourceType["actions"] | undefined, val: WhatAuthorized_Response_ResourceType["actions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = WhatAuthorized_Response_Action.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.auditsink.v1beta1.WhatAuthorized.Response.ResourceType.actions");
            }
        }
        map[key ?? ""] = val ?? WhatAuthorized_Response_Action.create();
    }
    internalBinaryWrite(message: WhatAuthorized_Response_ResourceType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, indykite.auditsink.v1beta1.WhatAuthorized.Response.Action> actions = 1; */
        for (let k of Object.keys(message.actions)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            WhatAuthorized_Response_Action.internalBinaryWrite(message.actions[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.WhatAuthorized.Response.ResourceType
 */
export const WhatAuthorized_Response_ResourceType = new WhatAuthorized_Response_ResourceType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAuthorized$Type extends MessageType<WhoAuthorized> {
    constructor() {
        super("indykite.auditsink.v1beta1.WhoAuthorized", [
            { no: 1, name: "request", kind: "message", T: () => WhoAuthorized_Request },
            { no: 2, name: "resolved_digital_twin", kind: "message", T: () => AuthorizationDigitalTwin },
            { no: 3, name: "response", kind: "message", T: () => WhoAuthorized_Response },
            { no: 4, name: "policies_found", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AuthorizationPolicy },
            { no: 5, name: "deny_reason", kind: "message", T: () => AuthorizationDenyReason },
            { no: 6, name: "evaluation_time", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<WhoAuthorized>): WhoAuthorized {
        const message = { policiesFound: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhoAuthorized>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAuthorized): WhoAuthorized {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.auditsink.v1beta1.WhoAuthorized.Request request */ 1:
                    message.request = WhoAuthorized_Request.internalBinaryRead(reader, reader.uint32(), options, message.request);
                    break;
                case /* indykite.auditsink.v1beta1.AuthorizationDigitalTwin resolved_digital_twin */ 2:
                    message.resolvedDigitalTwin = AuthorizationDigitalTwin.internalBinaryRead(reader, reader.uint32(), options, message.resolvedDigitalTwin);
                    break;
                case /* indykite.auditsink.v1beta1.WhoAuthorized.Response response */ 3:
                    message.response = WhoAuthorized_Response.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                case /* repeated indykite.auditsink.v1beta1.AuthorizationPolicy policies_found */ 4:
                    message.policiesFound.push(AuthorizationPolicy.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* indykite.auditsink.v1beta1.AuthorizationDenyReason deny_reason */ 5:
                    message.denyReason = AuthorizationDenyReason.internalBinaryRead(reader, reader.uint32(), options, message.denyReason);
                    break;
                case /* google.protobuf.Duration evaluation_time */ 6:
                    message.evaluationTime = Duration.internalBinaryRead(reader, reader.uint32(), options, message.evaluationTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhoAuthorized, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.auditsink.v1beta1.WhoAuthorized.Request request = 1; */
        if (message.request)
            WhoAuthorized_Request.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* indykite.auditsink.v1beta1.AuthorizationDigitalTwin resolved_digital_twin = 2; */
        if (message.resolvedDigitalTwin)
            AuthorizationDigitalTwin.internalBinaryWrite(message.resolvedDigitalTwin, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* indykite.auditsink.v1beta1.WhoAuthorized.Response response = 3; */
        if (message.response)
            WhoAuthorized_Response.internalBinaryWrite(message.response, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated indykite.auditsink.v1beta1.AuthorizationPolicy policies_found = 4; */
        for (let i = 0; i < message.policiesFound.length; i++)
            AuthorizationPolicy.internalBinaryWrite(message.policiesFound[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* indykite.auditsink.v1beta1.AuthorizationDenyReason deny_reason = 5; */
        if (message.denyReason)
            AuthorizationDenyReason.internalBinaryWrite(message.denyReason, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration evaluation_time = 6; */
        if (message.evaluationTime)
            Duration.internalBinaryWrite(message.evaluationTime, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.WhoAuthorized
 */
export const WhoAuthorized = new WhoAuthorized$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAuthorized_Request$Type extends MessageType<WhoAuthorized_Request> {
    constructor() {
        super("indykite.auditsink.v1beta1.WhoAuthorized.Request", [
            { no: 1, name: "resources", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WhoAuthorized_Request_Resource },
            { no: 2, name: "input_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Value } },
            { no: 3, name: "policy_tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WhoAuthorized_Request>): WhoAuthorized_Request {
        const message = { resources: [], inputParams: {}, policyTags: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhoAuthorized_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAuthorized_Request): WhoAuthorized_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated indykite.auditsink.v1beta1.WhoAuthorized.Request.Resource resources */ 1:
                    message.resources.push(WhoAuthorized_Request_Resource.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, indykite.objects.v1beta1.Value> input_params */ 2:
                    this.binaryReadMap2(message.inputParams, reader, options);
                    break;
                case /* repeated string policy_tags */ 3:
                    message.policyTags.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: WhoAuthorized_Request["inputParams"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WhoAuthorized_Request["inputParams"] | undefined, val: WhoAuthorized_Request["inputParams"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Value.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.auditsink.v1beta1.WhoAuthorized.Request.input_params");
            }
        }
        map[key ?? ""] = val ?? Value.create();
    }
    internalBinaryWrite(message: WhoAuthorized_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated indykite.auditsink.v1beta1.WhoAuthorized.Request.Resource resources = 1; */
        for (let i = 0; i < message.resources.length; i++)
            WhoAuthorized_Request_Resource.internalBinaryWrite(message.resources[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, indykite.objects.v1beta1.Value> input_params = 2; */
        for (let k of Object.keys(message.inputParams)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Value.internalBinaryWrite(message.inputParams[k], writer, options);
            writer.join().join();
        }
        /* repeated string policy_tags = 3; */
        for (let i = 0; i < message.policyTags.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.policyTags[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.WhoAuthorized.Request
 */
export const WhoAuthorized_Request = new WhoAuthorized_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAuthorized_Request_Resource$Type extends MessageType<WhoAuthorized_Request_Resource> {
    constructor() {
        super("indykite.auditsink.v1beta1.WhoAuthorized.Request.Resource", [
            { no: 1, name: "external_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "actions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WhoAuthorized_Request_Resource>): WhoAuthorized_Request_Resource {
        const message = { externalId: "", type: "", actions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhoAuthorized_Request_Resource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAuthorized_Request_Resource): WhoAuthorized_Request_Resource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string external_id */ 1:
                    message.externalId = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* repeated string actions */ 3:
                    message.actions.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhoAuthorized_Request_Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string external_id = 1; */
        if (message.externalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.externalId);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* repeated string actions = 3; */
        for (let i = 0; i < message.actions.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.actions[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.WhoAuthorized.Request.Resource
 */
export const WhoAuthorized_Request_Resource = new WhoAuthorized_Request_Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAuthorized_Response$Type extends MessageType<WhoAuthorized_Response> {
    constructor() {
        super("indykite.auditsink.v1beta1.WhoAuthorized.Response", [
            { no: 1, name: "decision_time", kind: "message", T: () => Timestamp },
            { no: 2, name: "decisions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => WhoAuthorized_Response_ResourceType } }
        ]);
    }
    create(value?: PartialMessage<WhoAuthorized_Response>): WhoAuthorized_Response {
        const message = { decisions: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhoAuthorized_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAuthorized_Response): WhoAuthorized_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp decision_time */ 1:
                    message.decisionTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.decisionTime);
                    break;
                case /* map<string, indykite.auditsink.v1beta1.WhoAuthorized.Response.ResourceType> decisions */ 2:
                    this.binaryReadMap2(message.decisions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: WhoAuthorized_Response["decisions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WhoAuthorized_Response["decisions"] | undefined, val: WhoAuthorized_Response["decisions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = WhoAuthorized_Response_ResourceType.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.auditsink.v1beta1.WhoAuthorized.Response.decisions");
            }
        }
        map[key ?? ""] = val ?? WhoAuthorized_Response_ResourceType.create();
    }
    internalBinaryWrite(message: WhoAuthorized_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp decision_time = 1; */
        if (message.decisionTime)
            Timestamp.internalBinaryWrite(message.decisionTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, indykite.auditsink.v1beta1.WhoAuthorized.Response.ResourceType> decisions = 2; */
        for (let k of Object.keys(message.decisions)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            WhoAuthorized_Response_ResourceType.internalBinaryWrite(message.decisions[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.WhoAuthorized.Response
 */
export const WhoAuthorized_Response = new WhoAuthorized_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAuthorized_Response_Subject$Type extends MessageType<WhoAuthorized_Response_Subject> {
    constructor() {
        super("indykite.auditsink.v1beta1.WhoAuthorized.Response.Subject", [
            { no: 1, name: "external_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WhoAuthorized_Response_Subject>): WhoAuthorized_Response_Subject {
        const message = { externalId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhoAuthorized_Response_Subject>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAuthorized_Response_Subject): WhoAuthorized_Response_Subject {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string external_id */ 1:
                    message.externalId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhoAuthorized_Response_Subject, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string external_id = 1; */
        if (message.externalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.externalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.WhoAuthorized.Response.Subject
 */
export const WhoAuthorized_Response_Subject = new WhoAuthorized_Response_Subject$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAuthorized_Response_Action$Type extends MessageType<WhoAuthorized_Response_Action> {
    constructor() {
        super("indykite.auditsink.v1beta1.WhoAuthorized.Response.Action", [
            { no: 1, name: "subjects", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WhoAuthorized_Response_Subject }
        ]);
    }
    create(value?: PartialMessage<WhoAuthorized_Response_Action>): WhoAuthorized_Response_Action {
        const message = { subjects: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhoAuthorized_Response_Action>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAuthorized_Response_Action): WhoAuthorized_Response_Action {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated indykite.auditsink.v1beta1.WhoAuthorized.Response.Subject subjects */ 1:
                    message.subjects.push(WhoAuthorized_Response_Subject.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhoAuthorized_Response_Action, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated indykite.auditsink.v1beta1.WhoAuthorized.Response.Subject subjects = 1; */
        for (let i = 0; i < message.subjects.length; i++)
            WhoAuthorized_Response_Subject.internalBinaryWrite(message.subjects[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.WhoAuthorized.Response.Action
 */
export const WhoAuthorized_Response_Action = new WhoAuthorized_Response_Action$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAuthorized_Response_Resource$Type extends MessageType<WhoAuthorized_Response_Resource> {
    constructor() {
        super("indykite.auditsink.v1beta1.WhoAuthorized.Response.Resource", [
            { no: 1, name: "actions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => WhoAuthorized_Response_Action } }
        ]);
    }
    create(value?: PartialMessage<WhoAuthorized_Response_Resource>): WhoAuthorized_Response_Resource {
        const message = { actions: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhoAuthorized_Response_Resource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAuthorized_Response_Resource): WhoAuthorized_Response_Resource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, indykite.auditsink.v1beta1.WhoAuthorized.Response.Action> actions */ 1:
                    this.binaryReadMap1(message.actions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: WhoAuthorized_Response_Resource["actions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WhoAuthorized_Response_Resource["actions"] | undefined, val: WhoAuthorized_Response_Resource["actions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = WhoAuthorized_Response_Action.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.auditsink.v1beta1.WhoAuthorized.Response.Resource.actions");
            }
        }
        map[key ?? ""] = val ?? WhoAuthorized_Response_Action.create();
    }
    internalBinaryWrite(message: WhoAuthorized_Response_Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, indykite.auditsink.v1beta1.WhoAuthorized.Response.Action> actions = 1; */
        for (let k of Object.keys(message.actions)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            WhoAuthorized_Response_Action.internalBinaryWrite(message.actions[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.WhoAuthorized.Response.Resource
 */
export const WhoAuthorized_Response_Resource = new WhoAuthorized_Response_Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAuthorized_Response_ResourceType$Type extends MessageType<WhoAuthorized_Response_ResourceType> {
    constructor() {
        super("indykite.auditsink.v1beta1.WhoAuthorized.Response.ResourceType", [
            { no: 1, name: "resources", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => WhoAuthorized_Response_Resource } }
        ]);
    }
    create(value?: PartialMessage<WhoAuthorized_Response_ResourceType>): WhoAuthorized_Response_ResourceType {
        const message = { resources: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhoAuthorized_Response_ResourceType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAuthorized_Response_ResourceType): WhoAuthorized_Response_ResourceType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, indykite.auditsink.v1beta1.WhoAuthorized.Response.Resource> resources */ 1:
                    this.binaryReadMap1(message.resources, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: WhoAuthorized_Response_ResourceType["resources"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WhoAuthorized_Response_ResourceType["resources"] | undefined, val: WhoAuthorized_Response_ResourceType["resources"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = WhoAuthorized_Response_Resource.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.auditsink.v1beta1.WhoAuthorized.Response.ResourceType.resources");
            }
        }
        map[key ?? ""] = val ?? WhoAuthorized_Response_Resource.create();
    }
    internalBinaryWrite(message: WhoAuthorized_Response_ResourceType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, indykite.auditsink.v1beta1.WhoAuthorized.Response.Resource> resources = 1; */
        for (let k of Object.keys(message.resources)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            WhoAuthorized_Response_Resource.internalBinaryWrite(message.resources[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.auditsink.v1beta1.WhoAuthorized.Response.ResourceType
 */
export const WhoAuthorized_Response_ResourceType = new WhoAuthorized_Response_ResourceType$Type();
