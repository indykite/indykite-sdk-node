// @generated by protobuf-ts 2.9.0 with parameter long_type_string,client_grpc1,generate_dependencies
// @generated from protobuf file "indykite/identitymatching/v1beta1/model.proto" (package "indykite.identitymatching.v1beta1", syntax proto3)
// tslint:disable
//
// Copyright (c) 2024 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message indykite.identitymatching.v1beta1.PropertyMapping
 */
export interface PropertyMapping {
    /**
     * SourceNodeType is the type of the node that will be compared to nodes of TargetNodeType.
     *
     * @generated from protobuf field: string source_node_type = 1;
     */
    sourceNodeType: string;
    /**
     * SourceNodeProperty is a property of the source node that will be compared to TargetNodeProperty.
     *
     * @generated from protobuf field: string source_node_property = 2;
     */
    sourceNodeProperty: string;
    /**
     * TargetNodeType is the type of the node that will be compared to nodes of SourceNodeType.
     *
     * @generated from protobuf field: string target_node_type = 3;
     */
    targetNodeType: string;
    /**
     * TargetNodeProperty is a property of the source node that will be compared to SourceNodeProperty.
     *
     * @generated from protobuf field: string target_node_property = 4;
     */
    targetNodeProperty: string;
    /**
     * SimilarityScoreCutoff defines the threshold (in range [0,1]), above which identities will be automatically matched.
     *
     * @generated from protobuf field: float similarity_score_cutoff = 5;
     */
    similarityScoreCutoff: number;
}
/**
 * @generated from protobuf enum indykite.identitymatching.v1beta1.PipelineStatus
 */
export enum PipelineStatus {
    /**
     * @generated from protobuf enum value: PIPELINE_STATUS_STATUS_INVALID = 0;
     */
    STATUS_INVALID = 0,
    /**
     * @generated from protobuf enum value: PIPELINE_STATUS_STATUS_PENDING = 1;
     */
    STATUS_PENDING = 1,
    /**
     * @generated from protobuf enum value: PIPELINE_STATUS_STATUS_IN_PROGRESS = 2;
     */
    STATUS_IN_PROGRESS = 2,
    /**
     * @generated from protobuf enum value: PIPELINE_STATUS_STATUS_SUCCESS = 3;
     */
    STATUS_SUCCESS = 3,
    /**
     * @generated from protobuf enum value: PIPELINE_STATUS_STATUS_ERROR = 4;
     */
    STATUS_ERROR = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class PropertyMapping$Type extends MessageType<PropertyMapping> {
    constructor() {
        super("indykite.identitymatching.v1beta1.PropertyMapping", [
            { no: 1, name: "source_node_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "source_node_property", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "target_node_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "target_node_property", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "similarity_score_cutoff", kind: "scalar", T: 2 /*ScalarType.FLOAT*/, options: { "validate.rules": { float: { lte: 1, gte: 0, ignoreEmpty: true } } } }
        ]);
    }
    create(value?: PartialMessage<PropertyMapping>): PropertyMapping {
        const message = { sourceNodeType: "", sourceNodeProperty: "", targetNodeType: "", targetNodeProperty: "", similarityScoreCutoff: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PropertyMapping>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PropertyMapping): PropertyMapping {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string source_node_type */ 1:
                    message.sourceNodeType = reader.string();
                    break;
                case /* string source_node_property */ 2:
                    message.sourceNodeProperty = reader.string();
                    break;
                case /* string target_node_type */ 3:
                    message.targetNodeType = reader.string();
                    break;
                case /* string target_node_property */ 4:
                    message.targetNodeProperty = reader.string();
                    break;
                case /* float similarity_score_cutoff */ 5:
                    message.similarityScoreCutoff = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PropertyMapping, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string source_node_type = 1; */
        if (message.sourceNodeType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sourceNodeType);
        /* string source_node_property = 2; */
        if (message.sourceNodeProperty !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sourceNodeProperty);
        /* string target_node_type = 3; */
        if (message.targetNodeType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.targetNodeType);
        /* string target_node_property = 4; */
        if (message.targetNodeProperty !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.targetNodeProperty);
        /* float similarity_score_cutoff = 5; */
        if (message.similarityScoreCutoff !== 0)
            writer.tag(5, WireType.Bit32).float(message.similarityScoreCutoff);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identitymatching.v1beta1.PropertyMapping
 */
export const PropertyMapping = new PropertyMapping$Type();
