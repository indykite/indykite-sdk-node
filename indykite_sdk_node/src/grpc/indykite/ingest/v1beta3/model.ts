// @generated by protobuf-ts 2.9.0 with parameter long_type_string,client_grpc1,generate_dependencies
// @generated from protobuf file "indykite/ingest/v1beta3/model.proto" (package "indykite.ingest.v1beta3", syntax proto3)
// tslint:disable
//
// Copyright (c) 2023 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Property } from "../../knowledge/objects/v1beta1/ikg";
import { Node } from "../../knowledge/objects/v1beta1/ikg";
/**
 * @generated from protobuf message indykite.ingest.v1beta3.Record
 */
export interface Record {
    /**
     * Unique identifier of the record, for client side reference
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf oneof: operation
     */
    operation: {
        oneofKind: "upsert";
        /**
         * @generated from protobuf field: indykite.ingest.v1beta3.UpsertData upsert = 2;
         */
        upsert: UpsertData;
    } | {
        oneofKind: "delete";
        /**
         * @generated from protobuf field: indykite.ingest.v1beta3.DeleteData delete = 3;
         */
        delete: DeleteData;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message indykite.ingest.v1beta3.UpsertData
 */
export interface UpsertData {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "node";
        /**
         * @generated from protobuf field: indykite.knowledge.objects.v1beta1.Node node = 1;
         */
        node: Node;
    } | {
        oneofKind: "relationship";
        /**
         * @generated from protobuf field: indykite.ingest.v1beta3.Relationship relationship = 2;
         */
        relationship: Relationship;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message indykite.ingest.v1beta3.DeleteData
 */
export interface DeleteData {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "node";
        /**
         * @generated from protobuf field: indykite.ingest.v1beta3.NodeMatch node = 1;
         */
        node: NodeMatch;
    } | {
        oneofKind: "relationship";
        /**
         * @generated from protobuf field: indykite.ingest.v1beta3.Relationship relationship = 2;
         */
        relationship: Relationship;
    } | {
        oneofKind: "nodeProperty";
        /**
         * @generated from protobuf field: indykite.ingest.v1beta3.DeleteData.NodePropertyMatch node_property = 3;
         */
        nodeProperty: DeleteData_NodePropertyMatch;
    } | {
        oneofKind: "relationshipProperty";
        /**
         * @generated from protobuf field: indykite.ingest.v1beta3.DeleteData.RelationshipPropertyMatch relationship_property = 4;
         */
        relationshipProperty: DeleteData_RelationshipPropertyMatch;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message indykite.ingest.v1beta3.DeleteData.NodePropertyMatch
 */
export interface DeleteData_NodePropertyMatch {
    /**
     * @generated from protobuf field: indykite.ingest.v1beta3.NodeMatch match = 1;
     */
    match?: NodeMatch;
    /**
     * @generated from protobuf field: string property_type = 2;
     */
    propertyType: string;
}
/**
 * @generated from protobuf message indykite.ingest.v1beta3.DeleteData.RelationshipPropertyMatch
 */
export interface DeleteData_RelationshipPropertyMatch {
    /**
     * @generated from protobuf field: indykite.ingest.v1beta3.NodeMatch source = 1;
     */
    source?: NodeMatch;
    /**
     * @generated from protobuf field: indykite.ingest.v1beta3.NodeMatch target = 2;
     */
    target?: NodeMatch;
    /**
     * @generated from protobuf field: string type = 3;
     */
    type: string;
    /**
     * @generated from protobuf field: string property_type = 4;
     */
    propertyType: string;
}
/**
 * @generated from protobuf message indykite.ingest.v1beta3.Relationship
 */
export interface Relationship {
    /**
     * @generated from protobuf field: indykite.ingest.v1beta3.NodeMatch source = 1;
     */
    source?: NodeMatch;
    /**
     * @generated from protobuf field: indykite.ingest.v1beta3.NodeMatch target = 2;
     */
    target?: NodeMatch;
    /**
     * @generated from protobuf field: string type = 3;
     */
    type: string;
    /**
     * @generated from protobuf field: repeated indykite.knowledge.objects.v1beta1.Property properties = 4;
     */
    properties: Property[];
}
/**
 * @generated from protobuf message indykite.ingest.v1beta3.NodeMatch
 */
export interface NodeMatch {
    /**
     * @generated from protobuf field: string external_id = 1;
     */
    externalId: string;
    /**
     * @generated from protobuf field: string type = 2;
     */
    type: string;
}
/**
 * @generated from protobuf message indykite.ingest.v1beta3.RecordError
 */
export interface RecordError {
    /**
     * @generated from protobuf field: string error = 1;
     */
    error: string;
}
/**
 * @generated from protobuf message indykite.ingest.v1beta3.Info
 */
export interface Info {
    /**
     * @generated from protobuf field: repeated indykite.ingest.v1beta3.Change changes = 1;
     */
    changes: Change[];
}
/**
 * @generated from protobuf message indykite.ingest.v1beta3.Change
 */
export interface Change {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: indykite.ingest.v1beta3.DataType data_type = 2;
     */
    dataType: DataType;
}
/**
 * @generated from protobuf enum indykite.ingest.v1beta3.DataType
 */
export enum DataType {
    /**
     * @generated from protobuf enum value: DATA_TYPE_INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from protobuf enum value: DATA_TYPE_NODE = 1;
     */
    NODE = 1,
    /**
     * @generated from protobuf enum value: DATA_TYPE_RELATIONSHIP = 3;
     */
    RELATIONSHIP = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Record$Type extends MessageType<Record> {
    constructor() {
        super("indykite.ingest.v1beta3.Record", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "256" } } } },
            { no: 2, name: "upsert", kind: "message", oneof: "operation", T: () => UpsertData },
            { no: 3, name: "delete", kind: "message", oneof: "operation", T: () => DeleteData }
        ]);
    }
    create(value?: PartialMessage<Record>): Record {
        const message = { id: "", operation: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Record>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Record): Record {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* indykite.ingest.v1beta3.UpsertData upsert */ 2:
                    message.operation = {
                        oneofKind: "upsert",
                        upsert: UpsertData.internalBinaryRead(reader, reader.uint32(), options, (message.operation as any).upsert)
                    };
                    break;
                case /* indykite.ingest.v1beta3.DeleteData delete */ 3:
                    message.operation = {
                        oneofKind: "delete",
                        delete: DeleteData.internalBinaryRead(reader, reader.uint32(), options, (message.operation as any).delete)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Record, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* indykite.ingest.v1beta3.UpsertData upsert = 2; */
        if (message.operation.oneofKind === "upsert")
            UpsertData.internalBinaryWrite(message.operation.upsert, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* indykite.ingest.v1beta3.DeleteData delete = 3; */
        if (message.operation.oneofKind === "delete")
            DeleteData.internalBinaryWrite(message.operation.delete, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.ingest.v1beta3.Record
 */
export const Record = new Record$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertData$Type extends MessageType<UpsertData> {
    constructor() {
        super("indykite.ingest.v1beta3.UpsertData", [
            { no: 1, name: "node", kind: "message", oneof: "data", T: () => Node },
            { no: 2, name: "relationship", kind: "message", oneof: "data", T: () => Relationship }
        ]);
    }
    create(value?: PartialMessage<UpsertData>): UpsertData {
        const message = { data: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpsertData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertData): UpsertData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.knowledge.objects.v1beta1.Node node */ 1:
                    message.data = {
                        oneofKind: "node",
                        node: Node.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).node)
                    };
                    break;
                case /* indykite.ingest.v1beta3.Relationship relationship */ 2:
                    message.data = {
                        oneofKind: "relationship",
                        relationship: Relationship.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).relationship)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.knowledge.objects.v1beta1.Node node = 1; */
        if (message.data.oneofKind === "node")
            Node.internalBinaryWrite(message.data.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* indykite.ingest.v1beta3.Relationship relationship = 2; */
        if (message.data.oneofKind === "relationship")
            Relationship.internalBinaryWrite(message.data.relationship, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.ingest.v1beta3.UpsertData
 */
export const UpsertData = new UpsertData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteData$Type extends MessageType<DeleteData> {
    constructor() {
        super("indykite.ingest.v1beta3.DeleteData", [
            { no: 1, name: "node", kind: "message", oneof: "data", T: () => NodeMatch },
            { no: 2, name: "relationship", kind: "message", oneof: "data", T: () => Relationship },
            { no: 3, name: "node_property", kind: "message", oneof: "data", T: () => DeleteData_NodePropertyMatch },
            { no: 4, name: "relationship_property", kind: "message", oneof: "data", T: () => DeleteData_RelationshipPropertyMatch }
        ]);
    }
    create(value?: PartialMessage<DeleteData>): DeleteData {
        const message = { data: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteData): DeleteData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.ingest.v1beta3.NodeMatch node */ 1:
                    message.data = {
                        oneofKind: "node",
                        node: NodeMatch.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).node)
                    };
                    break;
                case /* indykite.ingest.v1beta3.Relationship relationship */ 2:
                    message.data = {
                        oneofKind: "relationship",
                        relationship: Relationship.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).relationship)
                    };
                    break;
                case /* indykite.ingest.v1beta3.DeleteData.NodePropertyMatch node_property */ 3:
                    message.data = {
                        oneofKind: "nodeProperty",
                        nodeProperty: DeleteData_NodePropertyMatch.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).nodeProperty)
                    };
                    break;
                case /* indykite.ingest.v1beta3.DeleteData.RelationshipPropertyMatch relationship_property */ 4:
                    message.data = {
                        oneofKind: "relationshipProperty",
                        relationshipProperty: DeleteData_RelationshipPropertyMatch.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).relationshipProperty)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.ingest.v1beta3.NodeMatch node = 1; */
        if (message.data.oneofKind === "node")
            NodeMatch.internalBinaryWrite(message.data.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* indykite.ingest.v1beta3.Relationship relationship = 2; */
        if (message.data.oneofKind === "relationship")
            Relationship.internalBinaryWrite(message.data.relationship, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* indykite.ingest.v1beta3.DeleteData.NodePropertyMatch node_property = 3; */
        if (message.data.oneofKind === "nodeProperty")
            DeleteData_NodePropertyMatch.internalBinaryWrite(message.data.nodeProperty, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* indykite.ingest.v1beta3.DeleteData.RelationshipPropertyMatch relationship_property = 4; */
        if (message.data.oneofKind === "relationshipProperty")
            DeleteData_RelationshipPropertyMatch.internalBinaryWrite(message.data.relationshipProperty, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.ingest.v1beta3.DeleteData
 */
export const DeleteData = new DeleteData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteData_NodePropertyMatch$Type extends MessageType<DeleteData_NodePropertyMatch> {
    constructor() {
        super("indykite.ingest.v1beta3.DeleteData.NodePropertyMatch", [
            { no: 1, name: "match", kind: "message", T: () => NodeMatch, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "property_type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "256", pattern: "^[a-zA-Z_][a-zA-Z0-9_]+$", ignoreEmpty: true } } } }
        ]);
    }
    create(value?: PartialMessage<DeleteData_NodePropertyMatch>): DeleteData_NodePropertyMatch {
        const message = { propertyType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteData_NodePropertyMatch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteData_NodePropertyMatch): DeleteData_NodePropertyMatch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.ingest.v1beta3.NodeMatch match */ 1:
                    message.match = NodeMatch.internalBinaryRead(reader, reader.uint32(), options, message.match);
                    break;
                case /* string property_type */ 2:
                    message.propertyType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteData_NodePropertyMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.ingest.v1beta3.NodeMatch match = 1; */
        if (message.match)
            NodeMatch.internalBinaryWrite(message.match, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string property_type = 2; */
        if (message.propertyType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.propertyType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.ingest.v1beta3.DeleteData.NodePropertyMatch
 */
export const DeleteData_NodePropertyMatch = new DeleteData_NodePropertyMatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteData_RelationshipPropertyMatch$Type extends MessageType<DeleteData_RelationshipPropertyMatch> {
    constructor() {
        super("indykite.ingest.v1beta3.DeleteData.RelationshipPropertyMatch", [
            { no: 1, name: "source", kind: "message", T: () => NodeMatch, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "target", kind: "message", T: () => NodeMatch, options: { "validate.rules": { message: { required: true } } } },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "128", pattern: "^[A-Z]+(?:_[A-Z]+)*$" } } } },
            { no: 4, name: "property_type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "256", pattern: "^[a-zA-Z_][a-zA-Z0-9_]+$", ignoreEmpty: true } } } }
        ]);
    }
    create(value?: PartialMessage<DeleteData_RelationshipPropertyMatch>): DeleteData_RelationshipPropertyMatch {
        const message = { type: "", propertyType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteData_RelationshipPropertyMatch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteData_RelationshipPropertyMatch): DeleteData_RelationshipPropertyMatch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.ingest.v1beta3.NodeMatch source */ 1:
                    message.source = NodeMatch.internalBinaryRead(reader, reader.uint32(), options, message.source);
                    break;
                case /* indykite.ingest.v1beta3.NodeMatch target */ 2:
                    message.target = NodeMatch.internalBinaryRead(reader, reader.uint32(), options, message.target);
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* string property_type */ 4:
                    message.propertyType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteData_RelationshipPropertyMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.ingest.v1beta3.NodeMatch source = 1; */
        if (message.source)
            NodeMatch.internalBinaryWrite(message.source, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* indykite.ingest.v1beta3.NodeMatch target = 2; */
        if (message.target)
            NodeMatch.internalBinaryWrite(message.target, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* string property_type = 4; */
        if (message.propertyType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.propertyType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.ingest.v1beta3.DeleteData.RelationshipPropertyMatch
 */
export const DeleteData_RelationshipPropertyMatch = new DeleteData_RelationshipPropertyMatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Relationship$Type extends MessageType<Relationship> {
    constructor() {
        super("indykite.ingest.v1beta3.Relationship", [
            { no: 1, name: "source", kind: "message", T: () => NodeMatch, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "target", kind: "message", T: () => NodeMatch, options: { "validate.rules": { message: { required: true } } } },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "128", pattern: "^[A-Z]+(?:_[A-Z]+)*$" } } } },
            { no: 4, name: "properties", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Property, options: { "validate.rules": { repeated: { maxItems: "50" } } } }
        ]);
    }
    create(value?: PartialMessage<Relationship>): Relationship {
        const message = { type: "", properties: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Relationship>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Relationship): Relationship {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.ingest.v1beta3.NodeMatch source */ 1:
                    message.source = NodeMatch.internalBinaryRead(reader, reader.uint32(), options, message.source);
                    break;
                case /* indykite.ingest.v1beta3.NodeMatch target */ 2:
                    message.target = NodeMatch.internalBinaryRead(reader, reader.uint32(), options, message.target);
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* repeated indykite.knowledge.objects.v1beta1.Property properties */ 4:
                    message.properties.push(Property.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Relationship, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.ingest.v1beta3.NodeMatch source = 1; */
        if (message.source)
            NodeMatch.internalBinaryWrite(message.source, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* indykite.ingest.v1beta3.NodeMatch target = 2; */
        if (message.target)
            NodeMatch.internalBinaryWrite(message.target, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* repeated indykite.knowledge.objects.v1beta1.Property properties = 4; */
        for (let i = 0; i < message.properties.length; i++)
            Property.internalBinaryWrite(message.properties[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.ingest.v1beta3.Relationship
 */
export const Relationship = new Relationship$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeMatch$Type extends MessageType<NodeMatch> {
    constructor() {
        super("indykite.ingest.v1beta3.NodeMatch", [
            { no: 1, name: "external_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1", maxLen: "256" } } } },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "64", pattern: "^([A-Z][a-z]+)+$" } } } }
        ]);
    }
    create(value?: PartialMessage<NodeMatch>): NodeMatch {
        const message = { externalId: "", type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NodeMatch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NodeMatch): NodeMatch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string external_id */ 1:
                    message.externalId = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NodeMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string external_id = 1; */
        if (message.externalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.externalId);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.ingest.v1beta3.NodeMatch
 */
export const NodeMatch = new NodeMatch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecordError$Type extends MessageType<RecordError> {
    constructor() {
        super("indykite.ingest.v1beta3.RecordError", [
            { no: 1, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RecordError>): RecordError {
        const message = { error: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RecordError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecordError): RecordError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error */ 1:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecordError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error = 1; */
        if (message.error !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.ingest.v1beta3.RecordError
 */
export const RecordError = new RecordError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Info$Type extends MessageType<Info> {
    constructor() {
        super("indykite.ingest.v1beta3.Info", [
            { no: 1, name: "changes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Change }
        ]);
    }
    create(value?: PartialMessage<Info>): Info {
        const message = { changes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Info>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Info): Info {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated indykite.ingest.v1beta3.Change changes */ 1:
                    message.changes.push(Change.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Info, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated indykite.ingest.v1beta3.Change changes = 1; */
        for (let i = 0; i < message.changes.length; i++)
            Change.internalBinaryWrite(message.changes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.ingest.v1beta3.Info
 */
export const Info = new Info$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Change$Type extends MessageType<Change> {
    constructor() {
        super("indykite.ingest.v1beta3.Change", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data_type", kind: "enum", T: () => ["indykite.ingest.v1beta3.DataType", DataType, "DATA_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<Change>): Change {
        const message = { id: "", dataType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Change>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Change): Change {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* indykite.ingest.v1beta3.DataType data_type */ 2:
                    message.dataType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Change, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* indykite.ingest.v1beta3.DataType data_type = 2; */
        if (message.dataType !== 0)
            writer.tag(2, WireType.Varint).int32(message.dataType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.ingest.v1beta3.Change
 */
export const Change = new Change$Type();
