// @generated by protobuf-ts 2.9.0 with parameter long_type_string,client_grpc1,generate_dependencies
// @generated from protobuf file "indykite/tda/v1beta1/trusted_data_access_api.proto" (package "indykite.tda.v1beta1", syntax proto3)
// tslint:disable
//
// Copyright (c) 2024 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TrustedDataNode } from "./model";
import { Consent } from "./model";
import { User } from "../../knowledge/objects/v1beta1/ikg";
/**
 * @generated from protobuf message indykite.tda.v1beta1.ListConsentsRequest
 */
export interface ListConsentsRequest {
    /**
     * Unique identifier for the user.
     *
     * @generated from protobuf field: indykite.knowledge.objects.v1beta1.User user = 1;
     */
    user?: User;
    /**
     * ApplicationId is the id of the application that the consent is for.
     *
     * @generated from protobuf field: string application_id = 2;
     */
    applicationId: string;
}
/**
 * @generated from protobuf message indykite.tda.v1beta1.ListConsentsResponse
 */
export interface ListConsentsResponse {
    /**
     * @generated from protobuf field: repeated indykite.tda.v1beta1.Consent consents = 1;
     */
    consents: Consent[];
}
/**
 * @generated from protobuf message indykite.tda.v1beta1.DataAccessRequest
 */
export interface DataAccessRequest {
    /**
     * Unique identifier for the consent
     *
     * @generated from protobuf field: string consent_id = 1;
     */
    consentId: string;
    /**
     * ApplicationId is the id of the application that the consent is for.
     *
     * @generated from protobuf field: string application_id = 2;
     */
    applicationId: string;
    /**
     * Optional, unique identifier for the user.
     *
     * @generated from protobuf field: indykite.knowledge.objects.v1beta1.User user = 3;
     */
    user?: User;
}
/**
 * @generated from protobuf message indykite.tda.v1beta1.DataAccessResponse
 */
export interface DataAccessResponse {
    /**
     * @generated from protobuf field: repeated indykite.tda.v1beta1.TrustedDataNode nodes = 1;
     */
    nodes: TrustedDataNode[];
}
/**
 * The request to grant consent
 *
 * @generated from protobuf message indykite.tda.v1beta1.GrantConsentRequest
 */
export interface GrantConsentRequest {
    /**
     * Unique identifier for the user
     *
     * @generated from protobuf field: indykite.knowledge.objects.v1beta1.User user = 1;
     */
    user?: User;
    /**
     * Unique identifier for the consent
     *
     * @generated from protobuf field: string consent_id = 2;
     */
    consentId: string;
    /**
     * Optional: Specifies the duration in second that the consent remains valid, ranging from 1 day to 2 years.
     * Should be lower or equal to the consent's configuration.
     *
     * @generated from protobuf field: uint64 validity_period = 4;
     */
    validityPeriod: string;
}
/**
 * @generated from protobuf message indykite.tda.v1beta1.GrantConsentResponse
 */
export interface GrantConsentResponse {
    /**
     * @generated from protobuf field: uint64 properties_granted_count = 1;
     */
    propertiesGrantedCount: string;
}
/**
 * @generated from protobuf message indykite.tda.v1beta1.RevokeConsentRequest
 */
export interface RevokeConsentRequest {
    /**
     * Unique identifier for the user
     *
     * @generated from protobuf field: indykite.knowledge.objects.v1beta1.User user = 1;
     */
    user?: User;
    /**
     * Unique identifier for the consent
     *
     * @generated from protobuf field: string consent_id = 2;
     */
    consentId: string;
}
/**
 * @generated from protobuf message indykite.tda.v1beta1.RevokeConsentResponse
 */
export interface RevokeConsentResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class ListConsentsRequest$Type extends MessageType<ListConsentsRequest> {
    constructor() {
        super("indykite.tda.v1beta1.ListConsentsRequest", [
            { no: 1, name: "user", kind: "message", T: () => User, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "22", maxLen: "254", pattern: "^[A-Za-z0-9-_:]{22,254}$", ignoreEmpty: true } } } }
        ]);
    }
    create(value?: PartialMessage<ListConsentsRequest>): ListConsentsRequest {
        const message = { applicationId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListConsentsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListConsentsRequest): ListConsentsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.knowledge.objects.v1beta1.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string application_id */ 2:
                    message.applicationId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListConsentsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.knowledge.objects.v1beta1.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string application_id = 2; */
        if (message.applicationId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.applicationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.tda.v1beta1.ListConsentsRequest
 */
export const ListConsentsRequest = new ListConsentsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListConsentsResponse$Type extends MessageType<ListConsentsResponse> {
    constructor() {
        super("indykite.tda.v1beta1.ListConsentsResponse", [
            { no: 1, name: "consents", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Consent }
        ]);
    }
    create(value?: PartialMessage<ListConsentsResponse>): ListConsentsResponse {
        const message = { consents: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListConsentsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListConsentsResponse): ListConsentsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated indykite.tda.v1beta1.Consent consents */ 1:
                    message.consents.push(Consent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListConsentsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated indykite.tda.v1beta1.Consent consents = 1; */
        for (let i = 0; i < message.consents.length; i++)
            Consent.internalBinaryWrite(message.consents[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.tda.v1beta1.ListConsentsResponse
 */
export const ListConsentsResponse = new ListConsentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DataAccessRequest$Type extends MessageType<DataAccessRequest> {
    constructor() {
        super("indykite.tda.v1beta1.DataAccessRequest", [
            { no: 1, name: "consent_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "22", maxLen: "254", pattern: "^[A-Za-z0-9-_:]{22,254}$" } } } },
            { no: 2, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "22", maxLen: "254", pattern: "^[A-Za-z0-9-_:]{22,254}$", ignoreEmpty: true } } } },
            { no: 3, name: "user", kind: "message", T: () => User, options: { "validate.rules": { message: { required: false } } } }
        ]);
    }
    create(value?: PartialMessage<DataAccessRequest>): DataAccessRequest {
        const message = { consentId: "", applicationId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DataAccessRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DataAccessRequest): DataAccessRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string consent_id */ 1:
                    message.consentId = reader.string();
                    break;
                case /* string application_id */ 2:
                    message.applicationId = reader.string();
                    break;
                case /* indykite.knowledge.objects.v1beta1.User user */ 3:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DataAccessRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string consent_id = 1; */
        if (message.consentId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.consentId);
        /* string application_id = 2; */
        if (message.applicationId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.applicationId);
        /* indykite.knowledge.objects.v1beta1.User user = 3; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.tda.v1beta1.DataAccessRequest
 */
export const DataAccessRequest = new DataAccessRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DataAccessResponse$Type extends MessageType<DataAccessResponse> {
    constructor() {
        super("indykite.tda.v1beta1.DataAccessResponse", [
            { no: 1, name: "nodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TrustedDataNode }
        ]);
    }
    create(value?: PartialMessage<DataAccessResponse>): DataAccessResponse {
        const message = { nodes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DataAccessResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DataAccessResponse): DataAccessResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated indykite.tda.v1beta1.TrustedDataNode nodes */ 1:
                    message.nodes.push(TrustedDataNode.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DataAccessResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated indykite.tda.v1beta1.TrustedDataNode nodes = 1; */
        for (let i = 0; i < message.nodes.length; i++)
            TrustedDataNode.internalBinaryWrite(message.nodes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.tda.v1beta1.DataAccessResponse
 */
export const DataAccessResponse = new DataAccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrantConsentRequest$Type extends MessageType<GrantConsentRequest> {
    constructor() {
        super("indykite.tda.v1beta1.GrantConsentRequest", [
            { no: 1, name: "user", kind: "message", T: () => User, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "consent_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "22", maxLen: "254", pattern: "^[A-Za-z0-9-_:]{22,254}$" } } } },
            { no: 4, name: "validity_period", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<GrantConsentRequest>): GrantConsentRequest {
        const message = { consentId: "", validityPeriod: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GrantConsentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrantConsentRequest): GrantConsentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.knowledge.objects.v1beta1.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string consent_id */ 2:
                    message.consentId = reader.string();
                    break;
                case /* uint64 validity_period */ 4:
                    message.validityPeriod = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrantConsentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.knowledge.objects.v1beta1.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string consent_id = 2; */
        if (message.consentId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.consentId);
        /* uint64 validity_period = 4; */
        if (message.validityPeriod !== "0")
            writer.tag(4, WireType.Varint).uint64(message.validityPeriod);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.tda.v1beta1.GrantConsentRequest
 */
export const GrantConsentRequest = new GrantConsentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrantConsentResponse$Type extends MessageType<GrantConsentResponse> {
    constructor() {
        super("indykite.tda.v1beta1.GrantConsentResponse", [
            { no: 1, name: "properties_granted_count", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<GrantConsentResponse>): GrantConsentResponse {
        const message = { propertiesGrantedCount: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GrantConsentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrantConsentResponse): GrantConsentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 properties_granted_count */ 1:
                    message.propertiesGrantedCount = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrantConsentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 properties_granted_count = 1; */
        if (message.propertiesGrantedCount !== "0")
            writer.tag(1, WireType.Varint).uint64(message.propertiesGrantedCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.tda.v1beta1.GrantConsentResponse
 */
export const GrantConsentResponse = new GrantConsentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevokeConsentRequest$Type extends MessageType<RevokeConsentRequest> {
    constructor() {
        super("indykite.tda.v1beta1.RevokeConsentRequest", [
            { no: 1, name: "user", kind: "message", T: () => User, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "consent_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "22", maxLen: "254", pattern: "^[A-Za-z0-9-_:]{22,254}$" } } } }
        ]);
    }
    create(value?: PartialMessage<RevokeConsentRequest>): RevokeConsentRequest {
        const message = { consentId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RevokeConsentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevokeConsentRequest): RevokeConsentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.knowledge.objects.v1beta1.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string consent_id */ 2:
                    message.consentId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevokeConsentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.knowledge.objects.v1beta1.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string consent_id = 2; */
        if (message.consentId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.consentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.tda.v1beta1.RevokeConsentRequest
 */
export const RevokeConsentRequest = new RevokeConsentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevokeConsentResponse$Type extends MessageType<RevokeConsentResponse> {
    constructor() {
        super("indykite.tda.v1beta1.RevokeConsentResponse", []);
    }
    create(value?: PartialMessage<RevokeConsentResponse>): RevokeConsentResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RevokeConsentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevokeConsentResponse): RevokeConsentResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RevokeConsentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.tda.v1beta1.RevokeConsentResponse
 */
export const RevokeConsentResponse = new RevokeConsentResponse$Type();
/**
 * @generated ServiceType for protobuf service indykite.tda.v1beta1.TrustedDataAccessAPI
 */
export const TrustedDataAccessAPI = new ServiceType("indykite.tda.v1beta1.TrustedDataAccessAPI", [
    { name: "DataAccess", options: {}, I: DataAccessRequest, O: DataAccessResponse },
    { name: "GrantConsent", options: {}, I: GrantConsentRequest, O: GrantConsentResponse },
    { name: "RevokeConsent", options: {}, I: RevokeConsentRequest, O: RevokeConsentResponse },
    { name: "ListConsents", options: {}, I: ListConsentsRequest, O: ListConsentsResponse }
]);
