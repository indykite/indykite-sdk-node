// @generated by protobuf-ts 2.4.0 with parameter long_type_string,client_grpc1,generate_dependencies,// @generated from protobuf file "indykite/identity/v1beta1/authenteq.proto" (package "indykite.identity.v1beta1", syntax proto3),// tslint:disable
//
// Copyright (c) 2021 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message indykite.identity.v1beta1.AuthenteqDetails
 */
export interface AuthenteqDetails {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: indykite.identity.v1beta1.AuthenteqDocumentData document_data = 4;
     */
    documentData?: AuthenteqDocumentData;
}
/**
 * @generated from protobuf message indykite.identity.v1beta1.AuthenteqDocumentData
 */
export interface AuthenteqDocumentData {
    /**
     * @generated from protobuf field: string document_type = 1;
     */
    documentType: string;
    /**
     * @generated from protobuf field: string document_number = 2;
     */
    documentNumber: string;
    /**
     * @generated from protobuf field: string issuing_country = 3;
     */
    issuingCountry: string;
    /**
     * @generated from protobuf field: string jurisdiction = 4;
     */
    jurisdiction: string;
    /**
     * @generated from protobuf field: string nationality = 5;
     */
    nationality: string;
    /**
     * @generated from protobuf field: string surname_and_given_names = 6;
     */
    surnameAndGivenNames: string;
    /**
     * @generated from protobuf field: string surname = 7;
     */
    surname: string;
    /**
     * @generated from protobuf field: string given_names = 8;
     */
    givenNames: string;
    /**
     * @generated from protobuf field: string name_suffixes = 9;
     */
    nameSuffixes: string;
    /**
     * @generated from protobuf field: string name_prefixes = 10;
     */
    namePrefixes: string;
    /**
     * @generated from protobuf field: string sex = 11;
     */
    sex: string;
    /**
     * @generated from protobuf field: string date_of_birth = 12;
     */
    dateOfBirth: string;
    /**
     * @generated from protobuf field: string date_of_expiry = 13;
     */
    dateOfExpiry: string;
    /**
     * @generated from protobuf field: string date_of_issue = 14;
     */
    dateOfIssue: string;
    /**
     * @generated from protobuf field: string license_class = 15;
     */
    licenseClass: string;
    /**
     * @generated from protobuf field: map<string, indykite.identity.v1beta1.LicenseClassDetails> license_class_details = 16;
     */
    licenseClassDetails: {
        [key: string]: LicenseClassDetails;
    };
    /**
     * @generated from protobuf field: indykite.identity.v1beta1.WebImage cropped_front_image = 17;
     */
    croppedFrontImage?: WebImage;
    /**
     * @generated from protobuf field: indykite.identity.v1beta1.WebImage cropped_back_image = 18;
     */
    croppedBackImage?: WebImage;
    /**
     * @generated from protobuf field: indykite.identity.v1beta1.WebImage face_image = 19;
     */
    faceImage?: WebImage;
}
/**
 * @generated from protobuf message indykite.identity.v1beta1.LicenseClassDetails
 */
export interface LicenseClassDetails {
    /**
     * @generated from protobuf field: string from = 1;
     */
    from: string;
    /**
     * @generated from protobuf field: string to = 2;
     */
    to: string;
    /**
     * @generated from protobuf field: string notes = 3;
     */
    notes: string;
}
/**
 * @generated from protobuf message indykite.identity.v1beta1.WebImage
 */
export interface WebImage {
    /**
     * @generated from protobuf field: string content_type = 1;
     */
    contentType: string;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class AuthenteqDetails$Type extends MessageType<AuthenteqDetails> {
    constructor() {
        super("indykite.identity.v1beta1.AuthenteqDetails", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "document_data", kind: "message", T: () => AuthenteqDocumentData }
        ]);
    }
    create(value?: PartialMessage<AuthenteqDetails>): AuthenteqDetails {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthenteqDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenteqDetails): AuthenteqDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* indykite.identity.v1beta1.AuthenteqDocumentData document_data */ 4:
                    message.documentData = AuthenteqDocumentData.internalBinaryRead(reader, reader.uint32(), options, message.documentData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenteqDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* indykite.identity.v1beta1.AuthenteqDocumentData document_data = 4; */
        if (message.documentData)
            AuthenteqDocumentData.internalBinaryWrite(message.documentData, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta1.AuthenteqDetails
 */
export const AuthenteqDetails = new AuthenteqDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthenteqDocumentData$Type extends MessageType<AuthenteqDocumentData> {
    constructor() {
        super("indykite.identity.v1beta1.AuthenteqDocumentData", [
            { no: 1, name: "document_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "document_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "issuing_country", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "jurisdiction", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "nationality", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "surname_and_given_names", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "surname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "given_names", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "name_suffixes", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "name_prefixes", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "sex", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "date_of_birth", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "date_of_expiry", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "date_of_issue", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "license_class", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "license_class_details", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => LicenseClassDetails } },
            { no: 17, name: "cropped_front_image", kind: "message", T: () => WebImage },
            { no: 18, name: "cropped_back_image", kind: "message", T: () => WebImage },
            { no: 19, name: "face_image", kind: "message", T: () => WebImage }
        ]);
    }
    create(value?: PartialMessage<AuthenteqDocumentData>): AuthenteqDocumentData {
        const message = { documentType: "", documentNumber: "", issuingCountry: "", jurisdiction: "", nationality: "", surnameAndGivenNames: "", surname: "", givenNames: "", nameSuffixes: "", namePrefixes: "", sex: "", dateOfBirth: "", dateOfExpiry: "", dateOfIssue: "", licenseClass: "", licenseClassDetails: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthenteqDocumentData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenteqDocumentData): AuthenteqDocumentData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string document_type */ 1:
                    message.documentType = reader.string();
                    break;
                case /* string document_number */ 2:
                    message.documentNumber = reader.string();
                    break;
                case /* string issuing_country */ 3:
                    message.issuingCountry = reader.string();
                    break;
                case /* string jurisdiction */ 4:
                    message.jurisdiction = reader.string();
                    break;
                case /* string nationality */ 5:
                    message.nationality = reader.string();
                    break;
                case /* string surname_and_given_names */ 6:
                    message.surnameAndGivenNames = reader.string();
                    break;
                case /* string surname */ 7:
                    message.surname = reader.string();
                    break;
                case /* string given_names */ 8:
                    message.givenNames = reader.string();
                    break;
                case /* string name_suffixes */ 9:
                    message.nameSuffixes = reader.string();
                    break;
                case /* string name_prefixes */ 10:
                    message.namePrefixes = reader.string();
                    break;
                case /* string sex */ 11:
                    message.sex = reader.string();
                    break;
                case /* string date_of_birth */ 12:
                    message.dateOfBirth = reader.string();
                    break;
                case /* string date_of_expiry */ 13:
                    message.dateOfExpiry = reader.string();
                    break;
                case /* string date_of_issue */ 14:
                    message.dateOfIssue = reader.string();
                    break;
                case /* string license_class */ 15:
                    message.licenseClass = reader.string();
                    break;
                case /* map<string, indykite.identity.v1beta1.LicenseClassDetails> license_class_details */ 16:
                    this.binaryReadMap16(message.licenseClassDetails, reader, options);
                    break;
                case /* indykite.identity.v1beta1.WebImage cropped_front_image */ 17:
                    message.croppedFrontImage = WebImage.internalBinaryRead(reader, reader.uint32(), options, message.croppedFrontImage);
                    break;
                case /* indykite.identity.v1beta1.WebImage cropped_back_image */ 18:
                    message.croppedBackImage = WebImage.internalBinaryRead(reader, reader.uint32(), options, message.croppedBackImage);
                    break;
                case /* indykite.identity.v1beta1.WebImage face_image */ 19:
                    message.faceImage = WebImage.internalBinaryRead(reader, reader.uint32(), options, message.faceImage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap16(map: AuthenteqDocumentData["licenseClassDetails"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof AuthenteqDocumentData["licenseClassDetails"] | undefined, val: AuthenteqDocumentData["licenseClassDetails"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = LicenseClassDetails.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.identity.v1beta1.AuthenteqDocumentData.license_class_details");
            }
        }
        map[key ?? ""] = val ?? LicenseClassDetails.create();
    }
    internalBinaryWrite(message: AuthenteqDocumentData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string document_type = 1; */
        if (message.documentType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.documentType);
        /* string document_number = 2; */
        if (message.documentNumber !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.documentNumber);
        /* string issuing_country = 3; */
        if (message.issuingCountry !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.issuingCountry);
        /* string jurisdiction = 4; */
        if (message.jurisdiction !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.jurisdiction);
        /* string nationality = 5; */
        if (message.nationality !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.nationality);
        /* string surname_and_given_names = 6; */
        if (message.surnameAndGivenNames !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.surnameAndGivenNames);
        /* string surname = 7; */
        if (message.surname !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.surname);
        /* string given_names = 8; */
        if (message.givenNames !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.givenNames);
        /* string name_suffixes = 9; */
        if (message.nameSuffixes !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.nameSuffixes);
        /* string name_prefixes = 10; */
        if (message.namePrefixes !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.namePrefixes);
        /* string sex = 11; */
        if (message.sex !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.sex);
        /* string date_of_birth = 12; */
        if (message.dateOfBirth !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.dateOfBirth);
        /* string date_of_expiry = 13; */
        if (message.dateOfExpiry !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.dateOfExpiry);
        /* string date_of_issue = 14; */
        if (message.dateOfIssue !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.dateOfIssue);
        /* string license_class = 15; */
        if (message.licenseClass !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.licenseClass);
        /* map<string, indykite.identity.v1beta1.LicenseClassDetails> license_class_details = 16; */
        for (let k of Object.keys(message.licenseClassDetails)) {
            writer.tag(16, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            LicenseClassDetails.internalBinaryWrite(message.licenseClassDetails[k], writer, options);
            writer.join().join();
        }
        /* indykite.identity.v1beta1.WebImage cropped_front_image = 17; */
        if (message.croppedFrontImage)
            WebImage.internalBinaryWrite(message.croppedFrontImage, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* indykite.identity.v1beta1.WebImage cropped_back_image = 18; */
        if (message.croppedBackImage)
            WebImage.internalBinaryWrite(message.croppedBackImage, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* indykite.identity.v1beta1.WebImage face_image = 19; */
        if (message.faceImage)
            WebImage.internalBinaryWrite(message.faceImage, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta1.AuthenteqDocumentData
 */
export const AuthenteqDocumentData = new AuthenteqDocumentData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LicenseClassDetails$Type extends MessageType<LicenseClassDetails> {
    constructor() {
        super("indykite.identity.v1beta1.LicenseClassDetails", [
            { no: 1, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "to", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "notes", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LicenseClassDetails>): LicenseClassDetails {
        const message = { from: "", to: "", notes: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LicenseClassDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LicenseClassDetails): LicenseClassDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string from */ 1:
                    message.from = reader.string();
                    break;
                case /* string to */ 2:
                    message.to = reader.string();
                    break;
                case /* string notes */ 3:
                    message.notes = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LicenseClassDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string from = 1; */
        if (message.from !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.from);
        /* string to = 2; */
        if (message.to !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.to);
        /* string notes = 3; */
        if (message.notes !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.notes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta1.LicenseClassDetails
 */
export const LicenseClassDetails = new LicenseClassDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebImage$Type extends MessageType<WebImage> {
    constructor() {
        super("indykite.identity.v1beta1.WebImage", [
            { no: 1, name: "content_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebImage>): WebImage {
        const message = { contentType: "", content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebImage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebImage): WebImage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content_type */ 1:
                    message.contentType = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content_type = 1; */
        if (message.contentType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contentType);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta1.WebImage
 */
export const WebImage = new WebImage$Type();
