// @generated by protobuf-ts 2.4.0 with parameter long_type_string,client_grpc1,generate_dependencies,// @generated from protobuf file "indykite/identity/v1beta2/consent.proto" (package "indykite.identity.v1beta2", syntax proto3),// tslint:disable
//
// Copyright (c) 2022 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp";
/**
 * @generated from protobuf message indykite.identity.v1beta2.ConsentReceipt
 */
export interface ConsentReceipt {
    /**
     * @generated from protobuf field: string pii_principal_id = 1;
     */
    piiPrincipalId: string;
    /**
     * @generated from protobuf field: indykite.identity.v1beta2.PiiProcessor pii_processor = 2;
     */
    piiProcessor?: PiiProcessor;
    /**
     * @generated from protobuf field: repeated indykite.identity.v1beta2.ConsentReceipt.Item items = 3;
     */
    items: ConsentReceipt_Item[];
}
/**
 * @generated from protobuf message indykite.identity.v1beta2.ConsentReceipt.Item
 */
export interface ConsentReceipt_Item {
    /**
     * @generated from protobuf field: string consent_id = 1;
     */
    consentId: string;
    /**
     * @generated from protobuf field: indykite.identity.v1beta2.PiiController pii_controller = 2;
     */
    piiController?: PiiController;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp consented_at_time = 3;
     */
    consentedAtTime?: Timestamp;
    /**
     * @generated from protobuf field: repeated string properties = 4;
     */
    properties: string[];
}
/**
 * @generated from protobuf message indykite.identity.v1beta2.PiiController
 */
export interface PiiController {
    /**
     * @generated from protobuf field: string pii_controller_id = 1;
     */
    piiControllerId: string;
    /**
     * @generated from protobuf field: string display_name = 2;
     */
    displayName: string;
}
/**
 * @generated from protobuf message indykite.identity.v1beta2.PiiProcessor
 */
export interface PiiProcessor {
    /**
     * @generated from protobuf field: string pii_processor_id = 1;
     */
    piiProcessorId: string;
    /**
     * @generated from protobuf field: string display_name = 2;
     */
    displayName: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: string owner = 4;
     */
    owner: string;
    /**
     * @generated from protobuf field: string policy_uri = 5;
     */
    policyUri: string;
    /**
     * @generated from protobuf field: string terms_of_service_uri = 6;
     */
    termsOfServiceUri: string;
    /**
     * @generated from protobuf field: string client_uri = 7;
     */
    clientUri: string;
    /**
     * @generated from protobuf field: string logo_uri = 8;
     */
    logoUri: string;
    /**
     * @generated from protobuf field: string user_support_email_address = 9;
     */
    userSupportEmailAddress: string;
    /**
     * @generated from protobuf field: repeated string additional_contacts = 10;
     */
    additionalContacts: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ConsentReceipt$Type extends MessageType<ConsentReceipt> {
    constructor() {
        super("indykite.identity.v1beta2.ConsentReceipt", [
            { no: 1, name: "pii_principal_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pii_processor", kind: "message", T: () => PiiProcessor },
            { no: 3, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ConsentReceipt_Item }
        ]);
    }
    create(value?: PartialMessage<ConsentReceipt>): ConsentReceipt {
        const message = { piiPrincipalId: "", items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConsentReceipt>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConsentReceipt): ConsentReceipt {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pii_principal_id */ 1:
                    message.piiPrincipalId = reader.string();
                    break;
                case /* indykite.identity.v1beta2.PiiProcessor pii_processor */ 2:
                    message.piiProcessor = PiiProcessor.internalBinaryRead(reader, reader.uint32(), options, message.piiProcessor);
                    break;
                case /* repeated indykite.identity.v1beta2.ConsentReceipt.Item items */ 3:
                    message.items.push(ConsentReceipt_Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConsentReceipt, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string pii_principal_id = 1; */
        if (message.piiPrincipalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.piiPrincipalId);
        /* indykite.identity.v1beta2.PiiProcessor pii_processor = 2; */
        if (message.piiProcessor)
            PiiProcessor.internalBinaryWrite(message.piiProcessor, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated indykite.identity.v1beta2.ConsentReceipt.Item items = 3; */
        for (let i = 0; i < message.items.length; i++)
            ConsentReceipt_Item.internalBinaryWrite(message.items[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta2.ConsentReceipt
 */
export const ConsentReceipt = new ConsentReceipt$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConsentReceipt_Item$Type extends MessageType<ConsentReceipt_Item> {
    constructor() {
        super("indykite.identity.v1beta2.ConsentReceipt.Item", [
            { no: 1, name: "consent_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pii_controller", kind: "message", T: () => PiiController },
            { no: 3, name: "consented_at_time", kind: "message", T: () => Timestamp },
            { no: 4, name: "properties", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConsentReceipt_Item>): ConsentReceipt_Item {
        const message = { consentId: "", properties: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConsentReceipt_Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConsentReceipt_Item): ConsentReceipt_Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string consent_id */ 1:
                    message.consentId = reader.string();
                    break;
                case /* indykite.identity.v1beta2.PiiController pii_controller */ 2:
                    message.piiController = PiiController.internalBinaryRead(reader, reader.uint32(), options, message.piiController);
                    break;
                case /* google.protobuf.Timestamp consented_at_time */ 3:
                    message.consentedAtTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.consentedAtTime);
                    break;
                case /* repeated string properties */ 4:
                    message.properties.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConsentReceipt_Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string consent_id = 1; */
        if (message.consentId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.consentId);
        /* indykite.identity.v1beta2.PiiController pii_controller = 2; */
        if (message.piiController)
            PiiController.internalBinaryWrite(message.piiController, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp consented_at_time = 3; */
        if (message.consentedAtTime)
            Timestamp.internalBinaryWrite(message.consentedAtTime, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string properties = 4; */
        for (let i = 0; i < message.properties.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.properties[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta2.ConsentReceipt.Item
 */
export const ConsentReceipt_Item = new ConsentReceipt_Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PiiController$Type extends MessageType<PiiController> {
    constructor() {
        super("indykite.identity.v1beta2.PiiController", [
            { no: 1, name: "pii_controller_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "display_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PiiController>): PiiController {
        const message = { piiControllerId: "", displayName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PiiController>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PiiController): PiiController {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pii_controller_id */ 1:
                    message.piiControllerId = reader.string();
                    break;
                case /* string display_name */ 2:
                    message.displayName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PiiController, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string pii_controller_id = 1; */
        if (message.piiControllerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.piiControllerId);
        /* string display_name = 2; */
        if (message.displayName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta2.PiiController
 */
export const PiiController = new PiiController$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PiiProcessor$Type extends MessageType<PiiProcessor> {
    constructor() {
        super("indykite.identity.v1beta2.PiiProcessor", [
            { no: 1, name: "pii_processor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "display_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "owner", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "policy_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "terms_of_service_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "client_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "logo_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "user_support_email_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "additional_contacts", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PiiProcessor>): PiiProcessor {
        const message = { piiProcessorId: "", displayName: "", description: "", owner: "", policyUri: "", termsOfServiceUri: "", clientUri: "", logoUri: "", userSupportEmailAddress: "", additionalContacts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PiiProcessor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PiiProcessor): PiiProcessor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pii_processor_id */ 1:
                    message.piiProcessorId = reader.string();
                    break;
                case /* string display_name */ 2:
                    message.displayName = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* string owner */ 4:
                    message.owner = reader.string();
                    break;
                case /* string policy_uri */ 5:
                    message.policyUri = reader.string();
                    break;
                case /* string terms_of_service_uri */ 6:
                    message.termsOfServiceUri = reader.string();
                    break;
                case /* string client_uri */ 7:
                    message.clientUri = reader.string();
                    break;
                case /* string logo_uri */ 8:
                    message.logoUri = reader.string();
                    break;
                case /* string user_support_email_address */ 9:
                    message.userSupportEmailAddress = reader.string();
                    break;
                case /* repeated string additional_contacts */ 10:
                    message.additionalContacts.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PiiProcessor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string pii_processor_id = 1; */
        if (message.piiProcessorId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.piiProcessorId);
        /* string display_name = 2; */
        if (message.displayName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayName);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* string owner = 4; */
        if (message.owner !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.owner);
        /* string policy_uri = 5; */
        if (message.policyUri !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.policyUri);
        /* string terms_of_service_uri = 6; */
        if (message.termsOfServiceUri !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.termsOfServiceUri);
        /* string client_uri = 7; */
        if (message.clientUri !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.clientUri);
        /* string logo_uri = 8; */
        if (message.logoUri !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.logoUri);
        /* string user_support_email_address = 9; */
        if (message.userSupportEmailAddress !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.userSupportEmailAddress);
        /* repeated string additional_contacts = 10; */
        for (let i = 0; i < message.additionalContacts.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.additionalContacts[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta2.PiiProcessor
 */
export const PiiProcessor = new PiiProcessor$Type();
