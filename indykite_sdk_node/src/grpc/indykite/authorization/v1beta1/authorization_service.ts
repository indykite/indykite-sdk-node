// @generated by protobuf-ts 2.4.0 with parameter long_type_string,client_grpc1,generate_dependencies,// @generated from protobuf file "indykite/authorization/v1beta1/authorization_service.proto" (package "indykite.authorization.v1beta1", syntax proto3),// tslint:disable
//
// Copyright (c) 2022 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { DigitalTwinIdentifier } from "../../identity/v1beta2/model";
/**
 * @generated from protobuf message indykite.authorization.v1beta1.IsAuthorizedRequest
 */
export interface IsAuthorizedRequest {
    /**
     * @generated from protobuf oneof: subject
     */
    subject: {
        oneofKind: "digitalTwinIdentifier";
        /**
         * @generated from protobuf field: indykite.identity.v1beta2.DigitalTwinIdentifier digital_twin_identifier = 1;
         */
        digitalTwinIdentifier: DigitalTwinIdentifier;
    } | {
        oneofKind: undefined;
    };
    /**
     * A list of resources to authorize against.
     *
     * @generated from protobuf field: repeated indykite.authorization.v1beta1.IsAuthorizedRequest.Resource resources = 2;
     */
    resources: IsAuthorizedRequest_Resource[];
    /**
     * A list of actions the subject want to perform.
     * NOTE: Currently only one action is supported.
     *
     * @generated from protobuf field: repeated string actions = 3;
     */
    actions: string[];
}
/**
 * Resource to authorize against.
 *
 * @generated from protobuf message indykite.authorization.v1beta1.IsAuthorizedRequest.Resource
 */
export interface IsAuthorizedRequest_Resource {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * Resource label
     *
     * @generated from protobuf field: string label = 2;
     */
    label: string;
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.IsAuthorizedResponse
 */
export interface IsAuthorizedResponse {
    /**
     * Time the decision was made.
     *
     * @generated from protobuf field: google.protobuf.Timestamp decision_time = 1;
     */
    decisionTime?: Timestamp;
    /**
     * Decisions is map with resource references as keys.
     *
     * @generated from protobuf field: map<string, indykite.authorization.v1beta1.AuthorizationDecision> decisions = 2;
     */
    decisions: {
        [key: string]: AuthorizationDecision;
    };
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.AuthorizationDecision
 */
export interface AuthorizationDecision {
    /**
     * Is allowed to perform action.
     *
     * @generated from protobuf field: map<string, bool> allow_action = 1;
     */
    allowAction: {
        [key: string]: boolean;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class IsAuthorizedRequest$Type extends MessageType<IsAuthorizedRequest> {
    constructor() {
        super("indykite.authorization.v1beta1.IsAuthorizedRequest", [
            { no: 1, name: "digital_twin_identifier", kind: "message", oneof: "subject", T: () => DigitalTwinIdentifier, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "resources", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IsAuthorizedRequest_Resource, options: { "validate.rules": { repeated: { minItems: "1", maxItems: "32" } } } },
            { no: 3, name: "actions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { minItems: "1", maxItems: "1", items: { string: { minLen: "2", maxLen: "50", pattern: "^[a-zA-Z0-9.:_\\-\\/]{2,}$" } } } } } }
        ]);
    }
    create(value?: PartialMessage<IsAuthorizedRequest>): IsAuthorizedRequest {
        const message = { subject: { oneofKind: undefined }, resources: [], actions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsAuthorizedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAuthorizedRequest): IsAuthorizedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.identity.v1beta2.DigitalTwinIdentifier digital_twin_identifier */ 1:
                    message.subject = {
                        oneofKind: "digitalTwinIdentifier",
                        digitalTwinIdentifier: DigitalTwinIdentifier.internalBinaryRead(reader, reader.uint32(), options, (message.subject as any).digitalTwinIdentifier)
                    };
                    break;
                case /* repeated indykite.authorization.v1beta1.IsAuthorizedRequest.Resource resources */ 2:
                    message.resources.push(IsAuthorizedRequest_Resource.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string actions */ 3:
                    message.actions.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IsAuthorizedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.identity.v1beta2.DigitalTwinIdentifier digital_twin_identifier = 1; */
        if (message.subject.oneofKind === "digitalTwinIdentifier")
            DigitalTwinIdentifier.internalBinaryWrite(message.subject.digitalTwinIdentifier, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated indykite.authorization.v1beta1.IsAuthorizedRequest.Resource resources = 2; */
        for (let i = 0; i < message.resources.length; i++)
            IsAuthorizedRequest_Resource.internalBinaryWrite(message.resources[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated string actions = 3; */
        for (let i = 0; i < message.actions.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.actions[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.IsAuthorizedRequest
 */
export const IsAuthorizedRequest = new IsAuthorizedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsAuthorizedRequest_Resource$Type extends MessageType<IsAuthorizedRequest_Resource> {
    constructor() {
        super("indykite.authorization.v1beta1.IsAuthorizedRequest.Resource", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "2", maxLen: "50" } } } },
            { no: 2, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "2", maxLen: "50", pattern: "^(?:[A-Z][a-z]+)+$" } } } }
        ]);
    }
    create(value?: PartialMessage<IsAuthorizedRequest_Resource>): IsAuthorizedRequest_Resource {
        const message = { id: "", label: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsAuthorizedRequest_Resource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAuthorizedRequest_Resource): IsAuthorizedRequest_Resource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string label */ 2:
                    message.label = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IsAuthorizedRequest_Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string label = 2; */
        if (message.label !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.label);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.IsAuthorizedRequest.Resource
 */
export const IsAuthorizedRequest_Resource = new IsAuthorizedRequest_Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsAuthorizedResponse$Type extends MessageType<IsAuthorizedResponse> {
    constructor() {
        super("indykite.authorization.v1beta1.IsAuthorizedResponse", [
            { no: 1, name: "decision_time", kind: "message", T: () => Timestamp },
            { no: 2, name: "decisions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => AuthorizationDecision } }
        ]);
    }
    create(value?: PartialMessage<IsAuthorizedResponse>): IsAuthorizedResponse {
        const message = { decisions: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsAuthorizedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAuthorizedResponse): IsAuthorizedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp decision_time */ 1:
                    message.decisionTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.decisionTime);
                    break;
                case /* map<string, indykite.authorization.v1beta1.AuthorizationDecision> decisions */ 2:
                    this.binaryReadMap2(message.decisions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: IsAuthorizedResponse["decisions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof IsAuthorizedResponse["decisions"] | undefined, val: IsAuthorizedResponse["decisions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = AuthorizationDecision.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.authorization.v1beta1.IsAuthorizedResponse.decisions");
            }
        }
        map[key ?? ""] = val ?? AuthorizationDecision.create();
    }
    internalBinaryWrite(message: IsAuthorizedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp decision_time = 1; */
        if (message.decisionTime)
            Timestamp.internalBinaryWrite(message.decisionTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, indykite.authorization.v1beta1.AuthorizationDecision> decisions = 2; */
        for (let k of Object.keys(message.decisions)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            AuthorizationDecision.internalBinaryWrite(message.decisions[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.IsAuthorizedResponse
 */
export const IsAuthorizedResponse = new IsAuthorizedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizationDecision$Type extends MessageType<AuthorizationDecision> {
    constructor() {
        super("indykite.authorization.v1beta1.AuthorizationDecision", [
            { no: 1, name: "allow_action", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 8 /*ScalarType.BOOL*/ } }
        ]);
    }
    create(value?: PartialMessage<AuthorizationDecision>): AuthorizationDecision {
        const message = { allowAction: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthorizationDecision>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthorizationDecision): AuthorizationDecision {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, bool> allow_action */ 1:
                    this.binaryReadMap1(message.allowAction, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: AuthorizationDecision["allowAction"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof AuthorizationDecision["allowAction"] | undefined, val: AuthorizationDecision["allowAction"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.bool();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.authorization.v1beta1.AuthorizationDecision.allow_action");
            }
        }
        map[key ?? ""] = val ?? false;
    }
    internalBinaryWrite(message: AuthorizationDecision, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, bool> allow_action = 1; */
        for (let k of Object.keys(message.allowAction))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).bool(message.allowAction[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.AuthorizationDecision
 */
export const AuthorizationDecision = new AuthorizationDecision$Type();
/**
 * @generated ServiceType for protobuf service indykite.authorization.v1beta1.AuthorizationAPI
 */
export const AuthorizationAPI = new ServiceType("indykite.authorization.v1beta1.AuthorizationAPI", [
    { name: "IsAuthorized", options: {}, I: IsAuthorizedRequest, O: IsAuthorizedResponse }
]);
