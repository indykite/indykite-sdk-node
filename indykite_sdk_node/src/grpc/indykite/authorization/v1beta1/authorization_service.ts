// @generated by protobuf-ts 2.9.0 with parameter long_type_string,client_grpc1,generate_dependencies
// @generated from protobuf file "indykite/authorization/v1beta1/authorization_service.proto" (package "indykite.authorization.v1beta1", syntax proto3)
// tslint:disable
//
// Copyright (c) 2023 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { InputParam } from "./model";
import { Subject } from "./model";
/**
 * @generated from protobuf message indykite.authorization.v1beta1.IsAuthorizedRequest
 */
export interface IsAuthorizedRequest {
    /**
     * Subject to check if is authorized to perform given actions.
     *
     * @generated from protobuf field: indykite.authorization.v1beta1.Subject subject = 1;
     */
    subject?: Subject;
    /**
     * A list of resources to authorize against.
     *
     * @generated from protobuf field: repeated indykite.authorization.v1beta1.IsAuthorizedRequest.Resource resources = 2;
     */
    resources: IsAuthorizedRequest_Resource[];
    /**
     * Policy input params
     *
     * @generated from protobuf field: map<string, indykite.authorization.v1beta1.InputParam> input_params = 3;
     */
    inputParams: {
        [key: string]: InputParam;
    };
    /**
     * Only evaluate polices containing provided tags
     *
     * @generated from protobuf field: repeated string policy_tags = 4;
     */
    policyTags: string[];
}
/**
 * Resource to authorize against.
 *
 * @generated from protobuf message indykite.authorization.v1beta1.IsAuthorizedRequest.Resource
 */
export interface IsAuthorizedRequest_Resource {
    /**
     * Resource id.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * Resource type.
     *
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * A list of actions the subject want to perform.
     *
     * @generated from protobuf field: repeated string actions = 3;
     */
    actions: string[];
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.IsAuthorizedResponse
 */
export interface IsAuthorizedResponse {
    /**
     * Time the decision was made.
     *
     * @generated from protobuf field: google.protobuf.Timestamp decision_time = 1;
     */
    decisionTime?: Timestamp;
    /**
     * Map with resource type as key.
     *
     * @generated from protobuf field: map<string, indykite.authorization.v1beta1.IsAuthorizedResponse.ResourceType> decisions = 2;
     */
    decisions: {
        [key: string]: IsAuthorizedResponse_ResourceType;
    };
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.IsAuthorizedResponse.Action
 */
export interface IsAuthorizedResponse_Action {
    /**
     * @generated from protobuf field: bool allow = 1;
     */
    allow: boolean;
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.IsAuthorizedResponse.Resource
 */
export interface IsAuthorizedResponse_Resource {
    /**
     * Map with action as key.
     *
     * @generated from protobuf field: map<string, indykite.authorization.v1beta1.IsAuthorizedResponse.Action> actions = 1;
     */
    actions: {
        [key: string]: IsAuthorizedResponse_Action;
    };
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.IsAuthorizedResponse.ResourceType
 */
export interface IsAuthorizedResponse_ResourceType {
    /**
     * Map with resource id as key.
     *
     * @generated from protobuf field: map<string, indykite.authorization.v1beta1.IsAuthorizedResponse.Resource> resources = 1;
     */
    resources: {
        [key: string]: IsAuthorizedResponse_Resource;
    };
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.WhatAuthorizedRequest
 */
export interface WhatAuthorizedRequest {
    /**
     * Subject to check if is authorized to perform given actions.
     *
     * @generated from protobuf field: indykite.authorization.v1beta1.Subject subject = 1;
     */
    subject?: Subject;
    /**
     * A list of resources types that should be checked against.
     *
     * @generated from protobuf field: repeated indykite.authorization.v1beta1.WhatAuthorizedRequest.ResourceType resource_types = 2;
     */
    resourceTypes: WhatAuthorizedRequest_ResourceType[];
    /**
     * Policy input params
     *
     * @generated from protobuf field: map<string, indykite.authorization.v1beta1.InputParam> input_params = 3;
     */
    inputParams: {
        [key: string]: InputParam;
    };
    /**
     * Only evaluate polices containing provided tags
     *
     * @generated from protobuf field: repeated string policy_tags = 4;
     */
    policyTags: string[];
}
/**
 * Resource type to authorize against.
 *
 * @generated from protobuf message indykite.authorization.v1beta1.WhatAuthorizedRequest.ResourceType
 */
export interface WhatAuthorizedRequest_ResourceType {
    /**
     * Resource type
     *
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * Optional - A list of actions the subject want to perform.
     *
     * @generated from protobuf field: repeated string actions = 3;
     */
    actions: string[];
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.WhatAuthorizedResponse
 */
export interface WhatAuthorizedResponse {
    /**
     * Time the decision was made
     *
     * @generated from protobuf field: google.protobuf.Timestamp decision_time = 1;
     */
    decisionTime?: Timestamp;
    /**
     * Map with resource type as key
     *
     * @generated from protobuf field: map<string, indykite.authorization.v1beta1.WhatAuthorizedResponse.ResourceType> decisions = 2;
     */
    decisions: {
        [key: string]: WhatAuthorizedResponse_ResourceType;
    };
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.WhatAuthorizedResponse.Resource
 */
export interface WhatAuthorizedResponse_Resource {
    /**
     * Resource external identifier
     *
     * @generated from protobuf field: string external_id = 1;
     */
    externalId: string;
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.WhatAuthorizedResponse.Action
 */
export interface WhatAuthorizedResponse_Action {
    /**
     * List of resources
     *
     * @generated from protobuf field: repeated indykite.authorization.v1beta1.WhatAuthorizedResponse.Resource resources = 1;
     */
    resources: WhatAuthorizedResponse_Resource[];
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.WhatAuthorizedResponse.ResourceType
 */
export interface WhatAuthorizedResponse_ResourceType {
    /**
     * Map with action as key
     *
     * @generated from protobuf field: map<string, indykite.authorization.v1beta1.WhatAuthorizedResponse.Action> actions = 1;
     */
    actions: {
        [key: string]: WhatAuthorizedResponse_Action;
    };
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.WhoAuthorizedRequest
 */
export interface WhoAuthorizedRequest {
    /**
     * A list of resources to authorize against.
     *
     * @generated from protobuf field: repeated indykite.authorization.v1beta1.WhoAuthorizedRequest.Resource resources = 1;
     */
    resources: WhoAuthorizedRequest_Resource[];
    /**
     * Policy input params
     *
     * @generated from protobuf field: map<string, indykite.authorization.v1beta1.InputParam> input_params = 2;
     */
    inputParams: {
        [key: string]: InputParam;
    };
    /**
     * Only evaluate polices containing provided tags
     *
     * @generated from protobuf field: repeated string policy_tags = 3;
     */
    policyTags: string[];
}
/**
 * Resource to authorize against.
 *
 * @generated from protobuf message indykite.authorization.v1beta1.WhoAuthorizedRequest.Resource
 */
export interface WhoAuthorizedRequest_Resource {
    /**
     * Resource id.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * Resource type.
     *
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * A list of actions the subject want to perform.
     *
     * @generated from protobuf field: repeated string actions = 3;
     */
    actions: string[];
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.WhoAuthorizedResponse
 */
export interface WhoAuthorizedResponse {
    /**
     * Time the decision was made.
     *
     * @generated from protobuf field: google.protobuf.Timestamp decision_time = 1;
     */
    decisionTime?: Timestamp;
    /**
     * Map with resource type as key.
     *
     * @generated from protobuf field: map<string, indykite.authorization.v1beta1.WhoAuthorizedResponse.ResourceType> decisions = 2;
     */
    decisions: {
        [key: string]: WhoAuthorizedResponse_ResourceType;
    };
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.WhoAuthorizedResponse.Subject
 */
export interface WhoAuthorizedResponse_Subject {
    /**
     * Resource external identifier.
     *
     * @generated from protobuf field: string external_id = 1;
     */
    externalId: string;
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.WhoAuthorizedResponse.Action
 */
export interface WhoAuthorizedResponse_Action {
    /**
     * List of subjects.
     *
     * @generated from protobuf field: repeated indykite.authorization.v1beta1.WhoAuthorizedResponse.Subject subjects = 1;
     */
    subjects: WhoAuthorizedResponse_Subject[];
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.WhoAuthorizedResponse.Resource
 */
export interface WhoAuthorizedResponse_Resource {
    /**
     * Map with actions as key.
     *
     * @generated from protobuf field: map<string, indykite.authorization.v1beta1.WhoAuthorizedResponse.Action> actions = 1;
     */
    actions: {
        [key: string]: WhoAuthorizedResponse_Action;
    };
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.WhoAuthorizedResponse.ResourceType
 */
export interface WhoAuthorizedResponse_ResourceType {
    /**
     * Map with resource id as key.
     *
     * @generated from protobuf field: map<string, indykite.authorization.v1beta1.WhoAuthorizedResponse.Resource> resources = 1;
     */
    resources: {
        [key: string]: WhoAuthorizedResponse_Resource;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class IsAuthorizedRequest$Type extends MessageType<IsAuthorizedRequest> {
    constructor() {
        super("indykite.authorization.v1beta1.IsAuthorizedRequest", [
            { no: 1, name: "subject", kind: "message", T: () => Subject, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "resources", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IsAuthorizedRequest_Resource, options: { "validate.rules": { repeated: { minItems: "1", maxItems: "32" } } } },
            { no: 3, name: "input_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => InputParam }, options: { "validate.rules": { map: { minPairs: "0", maxPairs: "20", keys: { string: { minLen: "1", maxLen: "20", pattern: "^(?:[a-zA-Z][a-zA-Z0-9]+)+$" } } } } } },
            { no: 4, name: "policy_tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { unique: true, items: { string: { minLen: "1", maxLen: "20", pattern: "^[a-zA-Z0-9]+$" } }, ignoreEmpty: true } } } }
        ]);
    }
    create(value?: PartialMessage<IsAuthorizedRequest>): IsAuthorizedRequest {
        const message = { resources: [], inputParams: {}, policyTags: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsAuthorizedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAuthorizedRequest): IsAuthorizedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.authorization.v1beta1.Subject subject */ 1:
                    message.subject = Subject.internalBinaryRead(reader, reader.uint32(), options, message.subject);
                    break;
                case /* repeated indykite.authorization.v1beta1.IsAuthorizedRequest.Resource resources */ 2:
                    message.resources.push(IsAuthorizedRequest_Resource.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, indykite.authorization.v1beta1.InputParam> input_params */ 3:
                    this.binaryReadMap3(message.inputParams, reader, options);
                    break;
                case /* repeated string policy_tags */ 4:
                    message.policyTags.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: IsAuthorizedRequest["inputParams"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof IsAuthorizedRequest["inputParams"] | undefined, val: IsAuthorizedRequest["inputParams"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = InputParam.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.authorization.v1beta1.IsAuthorizedRequest.input_params");
            }
        }
        map[key ?? ""] = val ?? InputParam.create();
    }
    internalBinaryWrite(message: IsAuthorizedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.authorization.v1beta1.Subject subject = 1; */
        if (message.subject)
            Subject.internalBinaryWrite(message.subject, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated indykite.authorization.v1beta1.IsAuthorizedRequest.Resource resources = 2; */
        for (let i = 0; i < message.resources.length; i++)
            IsAuthorizedRequest_Resource.internalBinaryWrite(message.resources[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, indykite.authorization.v1beta1.InputParam> input_params = 3; */
        for (let k of Object.keys(message.inputParams)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            InputParam.internalBinaryWrite(message.inputParams[k], writer, options);
            writer.join().join();
        }
        /* repeated string policy_tags = 4; */
        for (let i = 0; i < message.policyTags.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.policyTags[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.IsAuthorizedRequest
 */
export const IsAuthorizedRequest = new IsAuthorizedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsAuthorizedRequest_Resource$Type extends MessageType<IsAuthorizedRequest_Resource> {
    constructor() {
        super("indykite.authorization.v1beta1.IsAuthorizedRequest.Resource", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "2", maxLen: "50" } } } },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "2", maxLen: "50", pattern: "^(?:[A-Z][a-z]+)+$" } } } },
            { no: 3, name: "actions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { minItems: "1", maxItems: "5", items: { string: { minLen: "2", maxLen: "50", pattern: "^[a-zA-Z0-9.:_\\-\\/]{2,}$" } } } } } }
        ]);
    }
    create(value?: PartialMessage<IsAuthorizedRequest_Resource>): IsAuthorizedRequest_Resource {
        const message = { id: "", type: "", actions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsAuthorizedRequest_Resource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAuthorizedRequest_Resource): IsAuthorizedRequest_Resource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* repeated string actions */ 3:
                    message.actions.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IsAuthorizedRequest_Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* repeated string actions = 3; */
        for (let i = 0; i < message.actions.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.actions[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.IsAuthorizedRequest.Resource
 */
export const IsAuthorizedRequest_Resource = new IsAuthorizedRequest_Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsAuthorizedResponse$Type extends MessageType<IsAuthorizedResponse> {
    constructor() {
        super("indykite.authorization.v1beta1.IsAuthorizedResponse", [
            { no: 1, name: "decision_time", kind: "message", T: () => Timestamp },
            { no: 2, name: "decisions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => IsAuthorizedResponse_ResourceType } }
        ]);
    }
    create(value?: PartialMessage<IsAuthorizedResponse>): IsAuthorizedResponse {
        const message = { decisions: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsAuthorizedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAuthorizedResponse): IsAuthorizedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp decision_time */ 1:
                    message.decisionTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.decisionTime);
                    break;
                case /* map<string, indykite.authorization.v1beta1.IsAuthorizedResponse.ResourceType> decisions */ 2:
                    this.binaryReadMap2(message.decisions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: IsAuthorizedResponse["decisions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof IsAuthorizedResponse["decisions"] | undefined, val: IsAuthorizedResponse["decisions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = IsAuthorizedResponse_ResourceType.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.authorization.v1beta1.IsAuthorizedResponse.decisions");
            }
        }
        map[key ?? ""] = val ?? IsAuthorizedResponse_ResourceType.create();
    }
    internalBinaryWrite(message: IsAuthorizedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp decision_time = 1; */
        if (message.decisionTime)
            Timestamp.internalBinaryWrite(message.decisionTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, indykite.authorization.v1beta1.IsAuthorizedResponse.ResourceType> decisions = 2; */
        for (let k of Object.keys(message.decisions)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            IsAuthorizedResponse_ResourceType.internalBinaryWrite(message.decisions[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.IsAuthorizedResponse
 */
export const IsAuthorizedResponse = new IsAuthorizedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsAuthorizedResponse_Action$Type extends MessageType<IsAuthorizedResponse_Action> {
    constructor() {
        super("indykite.authorization.v1beta1.IsAuthorizedResponse.Action", [
            { no: 1, name: "allow", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IsAuthorizedResponse_Action>): IsAuthorizedResponse_Action {
        const message = { allow: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsAuthorizedResponse_Action>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAuthorizedResponse_Action): IsAuthorizedResponse_Action {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool allow */ 1:
                    message.allow = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IsAuthorizedResponse_Action, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool allow = 1; */
        if (message.allow !== false)
            writer.tag(1, WireType.Varint).bool(message.allow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.IsAuthorizedResponse.Action
 */
export const IsAuthorizedResponse_Action = new IsAuthorizedResponse_Action$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsAuthorizedResponse_Resource$Type extends MessageType<IsAuthorizedResponse_Resource> {
    constructor() {
        super("indykite.authorization.v1beta1.IsAuthorizedResponse.Resource", [
            { no: 1, name: "actions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => IsAuthorizedResponse_Action } }
        ]);
    }
    create(value?: PartialMessage<IsAuthorizedResponse_Resource>): IsAuthorizedResponse_Resource {
        const message = { actions: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsAuthorizedResponse_Resource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAuthorizedResponse_Resource): IsAuthorizedResponse_Resource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, indykite.authorization.v1beta1.IsAuthorizedResponse.Action> actions */ 1:
                    this.binaryReadMap1(message.actions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: IsAuthorizedResponse_Resource["actions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof IsAuthorizedResponse_Resource["actions"] | undefined, val: IsAuthorizedResponse_Resource["actions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = IsAuthorizedResponse_Action.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.authorization.v1beta1.IsAuthorizedResponse.Resource.actions");
            }
        }
        map[key ?? ""] = val ?? IsAuthorizedResponse_Action.create();
    }
    internalBinaryWrite(message: IsAuthorizedResponse_Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, indykite.authorization.v1beta1.IsAuthorizedResponse.Action> actions = 1; */
        for (let k of Object.keys(message.actions)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            IsAuthorizedResponse_Action.internalBinaryWrite(message.actions[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.IsAuthorizedResponse.Resource
 */
export const IsAuthorizedResponse_Resource = new IsAuthorizedResponse_Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsAuthorizedResponse_ResourceType$Type extends MessageType<IsAuthorizedResponse_ResourceType> {
    constructor() {
        super("indykite.authorization.v1beta1.IsAuthorizedResponse.ResourceType", [
            { no: 1, name: "resources", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => IsAuthorizedResponse_Resource } }
        ]);
    }
    create(value?: PartialMessage<IsAuthorizedResponse_ResourceType>): IsAuthorizedResponse_ResourceType {
        const message = { resources: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IsAuthorizedResponse_ResourceType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsAuthorizedResponse_ResourceType): IsAuthorizedResponse_ResourceType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, indykite.authorization.v1beta1.IsAuthorizedResponse.Resource> resources */ 1:
                    this.binaryReadMap1(message.resources, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: IsAuthorizedResponse_ResourceType["resources"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof IsAuthorizedResponse_ResourceType["resources"] | undefined, val: IsAuthorizedResponse_ResourceType["resources"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = IsAuthorizedResponse_Resource.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.authorization.v1beta1.IsAuthorizedResponse.ResourceType.resources");
            }
        }
        map[key ?? ""] = val ?? IsAuthorizedResponse_Resource.create();
    }
    internalBinaryWrite(message: IsAuthorizedResponse_ResourceType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, indykite.authorization.v1beta1.IsAuthorizedResponse.Resource> resources = 1; */
        for (let k of Object.keys(message.resources)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            IsAuthorizedResponse_Resource.internalBinaryWrite(message.resources[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.IsAuthorizedResponse.ResourceType
 */
export const IsAuthorizedResponse_ResourceType = new IsAuthorizedResponse_ResourceType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhatAuthorizedRequest$Type extends MessageType<WhatAuthorizedRequest> {
    constructor() {
        super("indykite.authorization.v1beta1.WhatAuthorizedRequest", [
            { no: 1, name: "subject", kind: "message", T: () => Subject, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "resource_types", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WhatAuthorizedRequest_ResourceType, options: { "validate.rules": { repeated: { minItems: "1", maxItems: "10" } } } },
            { no: 3, name: "input_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => InputParam }, options: { "validate.rules": { map: { minPairs: "0", maxPairs: "20", keys: { string: { minLen: "1", maxLen: "20", pattern: "^(?:[a-zA-Z][a-zA-Z0-9]+)+$" } } } } } },
            { no: 4, name: "policy_tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { unique: true, items: { string: { minLen: "1", maxLen: "20", pattern: "^[a-zA-Z0-9]+$" } }, ignoreEmpty: true } } } }
        ]);
    }
    create(value?: PartialMessage<WhatAuthorizedRequest>): WhatAuthorizedRequest {
        const message = { resourceTypes: [], inputParams: {}, policyTags: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhatAuthorizedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhatAuthorizedRequest): WhatAuthorizedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.authorization.v1beta1.Subject subject */ 1:
                    message.subject = Subject.internalBinaryRead(reader, reader.uint32(), options, message.subject);
                    break;
                case /* repeated indykite.authorization.v1beta1.WhatAuthorizedRequest.ResourceType resource_types */ 2:
                    message.resourceTypes.push(WhatAuthorizedRequest_ResourceType.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, indykite.authorization.v1beta1.InputParam> input_params */ 3:
                    this.binaryReadMap3(message.inputParams, reader, options);
                    break;
                case /* repeated string policy_tags */ 4:
                    message.policyTags.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: WhatAuthorizedRequest["inputParams"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WhatAuthorizedRequest["inputParams"] | undefined, val: WhatAuthorizedRequest["inputParams"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = InputParam.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.authorization.v1beta1.WhatAuthorizedRequest.input_params");
            }
        }
        map[key ?? ""] = val ?? InputParam.create();
    }
    internalBinaryWrite(message: WhatAuthorizedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.authorization.v1beta1.Subject subject = 1; */
        if (message.subject)
            Subject.internalBinaryWrite(message.subject, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated indykite.authorization.v1beta1.WhatAuthorizedRequest.ResourceType resource_types = 2; */
        for (let i = 0; i < message.resourceTypes.length; i++)
            WhatAuthorizedRequest_ResourceType.internalBinaryWrite(message.resourceTypes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, indykite.authorization.v1beta1.InputParam> input_params = 3; */
        for (let k of Object.keys(message.inputParams)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            InputParam.internalBinaryWrite(message.inputParams[k], writer, options);
            writer.join().join();
        }
        /* repeated string policy_tags = 4; */
        for (let i = 0; i < message.policyTags.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.policyTags[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.WhatAuthorizedRequest
 */
export const WhatAuthorizedRequest = new WhatAuthorizedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhatAuthorizedRequest_ResourceType$Type extends MessageType<WhatAuthorizedRequest_ResourceType> {
    constructor() {
        super("indykite.authorization.v1beta1.WhatAuthorizedRequest.ResourceType", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "2", maxLen: "50", pattern: "^(?:[A-Z][a-z]+)+$" } } } },
            { no: 3, name: "actions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { minItems: "1", maxItems: "5", items: { string: { minLen: "2", maxLen: "50", pattern: "^[a-zA-Z0-9.:_\\-\\/]{2,}$" } }, ignoreEmpty: true } } } }
        ]);
    }
    create(value?: PartialMessage<WhatAuthorizedRequest_ResourceType>): WhatAuthorizedRequest_ResourceType {
        const message = { type: "", actions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhatAuthorizedRequest_ResourceType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhatAuthorizedRequest_ResourceType): WhatAuthorizedRequest_ResourceType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* repeated string actions */ 3:
                    message.actions.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhatAuthorizedRequest_ResourceType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* repeated string actions = 3; */
        for (let i = 0; i < message.actions.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.actions[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.WhatAuthorizedRequest.ResourceType
 */
export const WhatAuthorizedRequest_ResourceType = new WhatAuthorizedRequest_ResourceType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhatAuthorizedResponse$Type extends MessageType<WhatAuthorizedResponse> {
    constructor() {
        super("indykite.authorization.v1beta1.WhatAuthorizedResponse", [
            { no: 1, name: "decision_time", kind: "message", T: () => Timestamp },
            { no: 2, name: "decisions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => WhatAuthorizedResponse_ResourceType } }
        ]);
    }
    create(value?: PartialMessage<WhatAuthorizedResponse>): WhatAuthorizedResponse {
        const message = { decisions: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhatAuthorizedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhatAuthorizedResponse): WhatAuthorizedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp decision_time */ 1:
                    message.decisionTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.decisionTime);
                    break;
                case /* map<string, indykite.authorization.v1beta1.WhatAuthorizedResponse.ResourceType> decisions */ 2:
                    this.binaryReadMap2(message.decisions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: WhatAuthorizedResponse["decisions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WhatAuthorizedResponse["decisions"] | undefined, val: WhatAuthorizedResponse["decisions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = WhatAuthorizedResponse_ResourceType.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.authorization.v1beta1.WhatAuthorizedResponse.decisions");
            }
        }
        map[key ?? ""] = val ?? WhatAuthorizedResponse_ResourceType.create();
    }
    internalBinaryWrite(message: WhatAuthorizedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp decision_time = 1; */
        if (message.decisionTime)
            Timestamp.internalBinaryWrite(message.decisionTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, indykite.authorization.v1beta1.WhatAuthorizedResponse.ResourceType> decisions = 2; */
        for (let k of Object.keys(message.decisions)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            WhatAuthorizedResponse_ResourceType.internalBinaryWrite(message.decisions[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.WhatAuthorizedResponse
 */
export const WhatAuthorizedResponse = new WhatAuthorizedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhatAuthorizedResponse_Resource$Type extends MessageType<WhatAuthorizedResponse_Resource> {
    constructor() {
        super("indykite.authorization.v1beta1.WhatAuthorizedResponse.Resource", [
            { no: 1, name: "external_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WhatAuthorizedResponse_Resource>): WhatAuthorizedResponse_Resource {
        const message = { externalId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhatAuthorizedResponse_Resource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhatAuthorizedResponse_Resource): WhatAuthorizedResponse_Resource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string external_id */ 1:
                    message.externalId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhatAuthorizedResponse_Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string external_id = 1; */
        if (message.externalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.externalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.WhatAuthorizedResponse.Resource
 */
export const WhatAuthorizedResponse_Resource = new WhatAuthorizedResponse_Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhatAuthorizedResponse_Action$Type extends MessageType<WhatAuthorizedResponse_Action> {
    constructor() {
        super("indykite.authorization.v1beta1.WhatAuthorizedResponse.Action", [
            { no: 1, name: "resources", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WhatAuthorizedResponse_Resource }
        ]);
    }
    create(value?: PartialMessage<WhatAuthorizedResponse_Action>): WhatAuthorizedResponse_Action {
        const message = { resources: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhatAuthorizedResponse_Action>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhatAuthorizedResponse_Action): WhatAuthorizedResponse_Action {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated indykite.authorization.v1beta1.WhatAuthorizedResponse.Resource resources */ 1:
                    message.resources.push(WhatAuthorizedResponse_Resource.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhatAuthorizedResponse_Action, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated indykite.authorization.v1beta1.WhatAuthorizedResponse.Resource resources = 1; */
        for (let i = 0; i < message.resources.length; i++)
            WhatAuthorizedResponse_Resource.internalBinaryWrite(message.resources[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.WhatAuthorizedResponse.Action
 */
export const WhatAuthorizedResponse_Action = new WhatAuthorizedResponse_Action$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhatAuthorizedResponse_ResourceType$Type extends MessageType<WhatAuthorizedResponse_ResourceType> {
    constructor() {
        super("indykite.authorization.v1beta1.WhatAuthorizedResponse.ResourceType", [
            { no: 1, name: "actions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => WhatAuthorizedResponse_Action } }
        ]);
    }
    create(value?: PartialMessage<WhatAuthorizedResponse_ResourceType>): WhatAuthorizedResponse_ResourceType {
        const message = { actions: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhatAuthorizedResponse_ResourceType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhatAuthorizedResponse_ResourceType): WhatAuthorizedResponse_ResourceType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, indykite.authorization.v1beta1.WhatAuthorizedResponse.Action> actions */ 1:
                    this.binaryReadMap1(message.actions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: WhatAuthorizedResponse_ResourceType["actions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WhatAuthorizedResponse_ResourceType["actions"] | undefined, val: WhatAuthorizedResponse_ResourceType["actions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = WhatAuthorizedResponse_Action.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.authorization.v1beta1.WhatAuthorizedResponse.ResourceType.actions");
            }
        }
        map[key ?? ""] = val ?? WhatAuthorizedResponse_Action.create();
    }
    internalBinaryWrite(message: WhatAuthorizedResponse_ResourceType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, indykite.authorization.v1beta1.WhatAuthorizedResponse.Action> actions = 1; */
        for (let k of Object.keys(message.actions)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            WhatAuthorizedResponse_Action.internalBinaryWrite(message.actions[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.WhatAuthorizedResponse.ResourceType
 */
export const WhatAuthorizedResponse_ResourceType = new WhatAuthorizedResponse_ResourceType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAuthorizedRequest$Type extends MessageType<WhoAuthorizedRequest> {
    constructor() {
        super("indykite.authorization.v1beta1.WhoAuthorizedRequest", [
            { no: 1, name: "resources", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WhoAuthorizedRequest_Resource, options: { "validate.rules": { repeated: { minItems: "1", maxItems: "32" } } } },
            { no: 2, name: "input_params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => InputParam }, options: { "validate.rules": { map: { minPairs: "0", maxPairs: "20", keys: { string: { minLen: "1", maxLen: "20", pattern: "^(?:[a-zA-Z][a-zA-Z0-9]+)+$" } } } } } },
            { no: 3, name: "policy_tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { unique: true, items: { string: { minLen: "1", maxLen: "20", pattern: "^[a-zA-Z0-9]+$" } }, ignoreEmpty: true } } } }
        ]);
    }
    create(value?: PartialMessage<WhoAuthorizedRequest>): WhoAuthorizedRequest {
        const message = { resources: [], inputParams: {}, policyTags: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhoAuthorizedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAuthorizedRequest): WhoAuthorizedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated indykite.authorization.v1beta1.WhoAuthorizedRequest.Resource resources */ 1:
                    message.resources.push(WhoAuthorizedRequest_Resource.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, indykite.authorization.v1beta1.InputParam> input_params */ 2:
                    this.binaryReadMap2(message.inputParams, reader, options);
                    break;
                case /* repeated string policy_tags */ 3:
                    message.policyTags.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: WhoAuthorizedRequest["inputParams"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WhoAuthorizedRequest["inputParams"] | undefined, val: WhoAuthorizedRequest["inputParams"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = InputParam.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.authorization.v1beta1.WhoAuthorizedRequest.input_params");
            }
        }
        map[key ?? ""] = val ?? InputParam.create();
    }
    internalBinaryWrite(message: WhoAuthorizedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated indykite.authorization.v1beta1.WhoAuthorizedRequest.Resource resources = 1; */
        for (let i = 0; i < message.resources.length; i++)
            WhoAuthorizedRequest_Resource.internalBinaryWrite(message.resources[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, indykite.authorization.v1beta1.InputParam> input_params = 2; */
        for (let k of Object.keys(message.inputParams)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            InputParam.internalBinaryWrite(message.inputParams[k], writer, options);
            writer.join().join();
        }
        /* repeated string policy_tags = 3; */
        for (let i = 0; i < message.policyTags.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.policyTags[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.WhoAuthorizedRequest
 */
export const WhoAuthorizedRequest = new WhoAuthorizedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAuthorizedRequest_Resource$Type extends MessageType<WhoAuthorizedRequest_Resource> {
    constructor() {
        super("indykite.authorization.v1beta1.WhoAuthorizedRequest.Resource", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "2", maxLen: "50" } } } },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "2", maxLen: "50", pattern: "^(?:[A-Z][a-z]+)+$" } } } },
            { no: 3, name: "actions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { minItems: "1", maxItems: "5", items: { string: { minLen: "2", maxLen: "50", pattern: "^[a-zA-Z0-9.:_\\-\\/]{2,}$" } }, ignoreEmpty: true } } } }
        ]);
    }
    create(value?: PartialMessage<WhoAuthorizedRequest_Resource>): WhoAuthorizedRequest_Resource {
        const message = { id: "", type: "", actions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhoAuthorizedRequest_Resource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAuthorizedRequest_Resource): WhoAuthorizedRequest_Resource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* repeated string actions */ 3:
                    message.actions.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhoAuthorizedRequest_Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* repeated string actions = 3; */
        for (let i = 0; i < message.actions.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.actions[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.WhoAuthorizedRequest.Resource
 */
export const WhoAuthorizedRequest_Resource = new WhoAuthorizedRequest_Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAuthorizedResponse$Type extends MessageType<WhoAuthorizedResponse> {
    constructor() {
        super("indykite.authorization.v1beta1.WhoAuthorizedResponse", [
            { no: 1, name: "decision_time", kind: "message", T: () => Timestamp },
            { no: 2, name: "decisions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => WhoAuthorizedResponse_ResourceType } }
        ]);
    }
    create(value?: PartialMessage<WhoAuthorizedResponse>): WhoAuthorizedResponse {
        const message = { decisions: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhoAuthorizedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAuthorizedResponse): WhoAuthorizedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp decision_time */ 1:
                    message.decisionTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.decisionTime);
                    break;
                case /* map<string, indykite.authorization.v1beta1.WhoAuthorizedResponse.ResourceType> decisions */ 2:
                    this.binaryReadMap2(message.decisions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: WhoAuthorizedResponse["decisions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WhoAuthorizedResponse["decisions"] | undefined, val: WhoAuthorizedResponse["decisions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = WhoAuthorizedResponse_ResourceType.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.authorization.v1beta1.WhoAuthorizedResponse.decisions");
            }
        }
        map[key ?? ""] = val ?? WhoAuthorizedResponse_ResourceType.create();
    }
    internalBinaryWrite(message: WhoAuthorizedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp decision_time = 1; */
        if (message.decisionTime)
            Timestamp.internalBinaryWrite(message.decisionTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, indykite.authorization.v1beta1.WhoAuthorizedResponse.ResourceType> decisions = 2; */
        for (let k of Object.keys(message.decisions)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            WhoAuthorizedResponse_ResourceType.internalBinaryWrite(message.decisions[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.WhoAuthorizedResponse
 */
export const WhoAuthorizedResponse = new WhoAuthorizedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAuthorizedResponse_Subject$Type extends MessageType<WhoAuthorizedResponse_Subject> {
    constructor() {
        super("indykite.authorization.v1beta1.WhoAuthorizedResponse.Subject", [
            { no: 1, name: "external_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WhoAuthorizedResponse_Subject>): WhoAuthorizedResponse_Subject {
        const message = { externalId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhoAuthorizedResponse_Subject>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAuthorizedResponse_Subject): WhoAuthorizedResponse_Subject {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string external_id */ 1:
                    message.externalId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhoAuthorizedResponse_Subject, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string external_id = 1; */
        if (message.externalId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.externalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.WhoAuthorizedResponse.Subject
 */
export const WhoAuthorizedResponse_Subject = new WhoAuthorizedResponse_Subject$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAuthorizedResponse_Action$Type extends MessageType<WhoAuthorizedResponse_Action> {
    constructor() {
        super("indykite.authorization.v1beta1.WhoAuthorizedResponse.Action", [
            { no: 1, name: "subjects", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WhoAuthorizedResponse_Subject }
        ]);
    }
    create(value?: PartialMessage<WhoAuthorizedResponse_Action>): WhoAuthorizedResponse_Action {
        const message = { subjects: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhoAuthorizedResponse_Action>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAuthorizedResponse_Action): WhoAuthorizedResponse_Action {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated indykite.authorization.v1beta1.WhoAuthorizedResponse.Subject subjects */ 1:
                    message.subjects.push(WhoAuthorizedResponse_Subject.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhoAuthorizedResponse_Action, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated indykite.authorization.v1beta1.WhoAuthorizedResponse.Subject subjects = 1; */
        for (let i = 0; i < message.subjects.length; i++)
            WhoAuthorizedResponse_Subject.internalBinaryWrite(message.subjects[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.WhoAuthorizedResponse.Action
 */
export const WhoAuthorizedResponse_Action = new WhoAuthorizedResponse_Action$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAuthorizedResponse_Resource$Type extends MessageType<WhoAuthorizedResponse_Resource> {
    constructor() {
        super("indykite.authorization.v1beta1.WhoAuthorizedResponse.Resource", [
            { no: 1, name: "actions", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => WhoAuthorizedResponse_Action } }
        ]);
    }
    create(value?: PartialMessage<WhoAuthorizedResponse_Resource>): WhoAuthorizedResponse_Resource {
        const message = { actions: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhoAuthorizedResponse_Resource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAuthorizedResponse_Resource): WhoAuthorizedResponse_Resource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, indykite.authorization.v1beta1.WhoAuthorizedResponse.Action> actions */ 1:
                    this.binaryReadMap1(message.actions, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: WhoAuthorizedResponse_Resource["actions"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WhoAuthorizedResponse_Resource["actions"] | undefined, val: WhoAuthorizedResponse_Resource["actions"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = WhoAuthorizedResponse_Action.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.authorization.v1beta1.WhoAuthorizedResponse.Resource.actions");
            }
        }
        map[key ?? ""] = val ?? WhoAuthorizedResponse_Action.create();
    }
    internalBinaryWrite(message: WhoAuthorizedResponse_Resource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, indykite.authorization.v1beta1.WhoAuthorizedResponse.Action> actions = 1; */
        for (let k of Object.keys(message.actions)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            WhoAuthorizedResponse_Action.internalBinaryWrite(message.actions[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.WhoAuthorizedResponse.Resource
 */
export const WhoAuthorizedResponse_Resource = new WhoAuthorizedResponse_Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAuthorizedResponse_ResourceType$Type extends MessageType<WhoAuthorizedResponse_ResourceType> {
    constructor() {
        super("indykite.authorization.v1beta1.WhoAuthorizedResponse.ResourceType", [
            { no: 1, name: "resources", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => WhoAuthorizedResponse_Resource } }
        ]);
    }
    create(value?: PartialMessage<WhoAuthorizedResponse_ResourceType>): WhoAuthorizedResponse_ResourceType {
        const message = { resources: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhoAuthorizedResponse_ResourceType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAuthorizedResponse_ResourceType): WhoAuthorizedResponse_ResourceType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, indykite.authorization.v1beta1.WhoAuthorizedResponse.Resource> resources */ 1:
                    this.binaryReadMap1(message.resources, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: WhoAuthorizedResponse_ResourceType["resources"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WhoAuthorizedResponse_ResourceType["resources"] | undefined, val: WhoAuthorizedResponse_ResourceType["resources"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = WhoAuthorizedResponse_Resource.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.authorization.v1beta1.WhoAuthorizedResponse.ResourceType.resources");
            }
        }
        map[key ?? ""] = val ?? WhoAuthorizedResponse_Resource.create();
    }
    internalBinaryWrite(message: WhoAuthorizedResponse_ResourceType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, indykite.authorization.v1beta1.WhoAuthorizedResponse.Resource> resources = 1; */
        for (let k of Object.keys(message.resources)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            WhoAuthorizedResponse_Resource.internalBinaryWrite(message.resources[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.WhoAuthorizedResponse.ResourceType
 */
export const WhoAuthorizedResponse_ResourceType = new WhoAuthorizedResponse_ResourceType$Type();
/**
 * @generated ServiceType for protobuf service indykite.authorization.v1beta1.AuthorizationAPI
 */
export const AuthorizationAPI = new ServiceType("indykite.authorization.v1beta1.AuthorizationAPI", [
    { name: "IsAuthorized", options: {}, I: IsAuthorizedRequest, O: IsAuthorizedResponse },
    { name: "WhatAuthorized", options: {}, I: WhatAuthorizedRequest, O: WhatAuthorizedResponse },
    { name: "WhoAuthorized", options: {}, I: WhoAuthorizedRequest, O: WhoAuthorizedResponse }
]);
