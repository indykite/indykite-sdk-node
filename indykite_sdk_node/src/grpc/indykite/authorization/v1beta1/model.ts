// @generated by protobuf-ts 2.9.0 with parameter long_type_string,client_grpc1,generate_dependencies
// @generated from protobuf file "indykite/authorization/v1beta1/model.proto" (package "indykite.authorization.v1beta1", syntax proto3)
// tslint:disable
//
// Copyright (c) 2023 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Map } from "../../objects/v1beta2/value";
import { Array$ } from "../../objects/v1beta2/value";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { Value } from "../../objects/v1beta1/struct";
/**
 * Subject to check if is authorized.
 *
 * @generated from protobuf message indykite.authorization.v1beta1.Subject
 */
export interface Subject {
    /**
     * @generated from protobuf oneof: subject
     */
    subject: {
        oneofKind: "digitalTwinId";
        /**
         * @generated from protobuf field: indykite.authorization.v1beta1.DigitalTwin digital_twin_id = 2;
         */
        digitalTwinId: DigitalTwin;
    } | {
        oneofKind: "digitalTwinProperty";
        /**
         * @generated from protobuf field: indykite.authorization.v1beta1.Property digital_twin_property = 3;
         */
        digitalTwinProperty: Property;
    } | {
        oneofKind: "accessToken";
        /**
         * @generated from protobuf field: string access_token = 4;
         */
        accessToken: string;
    } | {
        oneofKind: "externalId";
        /**
         * @generated from protobuf field: indykite.authorization.v1beta1.ExternalID external_id = 5;
         */
        externalId: ExternalID;
    } | {
        oneofKind: undefined;
    };
}
/**
 * DigitalTwin represents a digital entity.
 *
 * @generated from protobuf message indykite.authorization.v1beta1.DigitalTwin
 */
export interface DigitalTwin {
    /**
     * Id the unique credential identifier.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.Property
 */
export interface Property {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: indykite.objects.v1beta1.Value value = 2;
     */
    value?: Value;
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.ExternalID
 */
export interface ExternalID {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: string external_id = 2;
     */
    externalId: string;
}
/**
 * @generated from protobuf message indykite.authorization.v1beta1.InputParam
 */
export interface InputParam {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "stringValue";
        /**
         * A string value.
         *
         * @generated from protobuf field: string string_value = 1;
         */
        stringValue: string;
    } | {
        oneofKind: "boolValue";
        /**
         * A boolean value.
         *
         * @generated from protobuf field: bool bool_value = 2;
         */
        boolValue: boolean;
    } | {
        oneofKind: "integerValue";
        /**
         * An integer value.
         *
         * @generated from protobuf field: int64 integer_value = 3;
         */
        integerValue: string;
    } | {
        oneofKind: "doubleValue";
        /**
         * A double value.
         *
         * @generated from protobuf field: double double_value = 4;
         */
        doubleValue: number;
    } | {
        oneofKind: "timeValue";
        /**
         * A timestamp value.
         *
         * @generated from protobuf field: google.protobuf.Timestamp time_value = 5;
         */
        timeValue: Timestamp;
    } | {
        oneofKind: "durationValue";
        /**
         * A duration value.
         *
         * @generated from protobuf field: google.protobuf.Duration duration_value = 6;
         */
        durationValue: Duration;
    } | {
        oneofKind: "arrayValue";
        /**
         * An array value.
         *
         * @generated from protobuf field: indykite.objects.v1beta2.Array array_value = 7;
         */
        arrayValue: Array$;
    } | {
        oneofKind: "mapValue";
        /**
         * A map value.
         *
         * @generated from protobuf field: indykite.objects.v1beta2.Map map_value = 8;
         */
        mapValue: Map;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Subject$Type extends MessageType<Subject> {
    constructor() {
        super("indykite.authorization.v1beta1.Subject", [
            { no: 2, name: "digital_twin_id", kind: "message", oneof: "subject", T: () => DigitalTwin, options: { "validate.rules": { message: { required: true } } } },
            { no: 3, name: "digital_twin_property", kind: "message", oneof: "subject", T: () => Property, options: { "validate.rules": { message: { required: true } } } },
            { no: 4, name: "access_token", kind: "scalar", oneof: "subject", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "20" } } } },
            { no: 5, name: "external_id", kind: "message", oneof: "subject", T: () => ExternalID, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<Subject>): Subject {
        const message = { subject: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Subject>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Subject): Subject {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.authorization.v1beta1.DigitalTwin digital_twin_id */ 2:
                    message.subject = {
                        oneofKind: "digitalTwinId",
                        digitalTwinId: DigitalTwin.internalBinaryRead(reader, reader.uint32(), options, (message.subject as any).digitalTwinId)
                    };
                    break;
                case /* indykite.authorization.v1beta1.Property digital_twin_property */ 3:
                    message.subject = {
                        oneofKind: "digitalTwinProperty",
                        digitalTwinProperty: Property.internalBinaryRead(reader, reader.uint32(), options, (message.subject as any).digitalTwinProperty)
                    };
                    break;
                case /* string access_token */ 4:
                    message.subject = {
                        oneofKind: "accessToken",
                        accessToken: reader.string()
                    };
                    break;
                case /* indykite.authorization.v1beta1.ExternalID external_id */ 5:
                    message.subject = {
                        oneofKind: "externalId",
                        externalId: ExternalID.internalBinaryRead(reader, reader.uint32(), options, (message.subject as any).externalId)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Subject, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.authorization.v1beta1.DigitalTwin digital_twin_id = 2; */
        if (message.subject.oneofKind === "digitalTwinId")
            DigitalTwin.internalBinaryWrite(message.subject.digitalTwinId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* indykite.authorization.v1beta1.Property digital_twin_property = 3; */
        if (message.subject.oneofKind === "digitalTwinProperty")
            Property.internalBinaryWrite(message.subject.digitalTwinProperty, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string access_token = 4; */
        if (message.subject.oneofKind === "accessToken")
            writer.tag(4, WireType.LengthDelimited).string(message.subject.accessToken);
        /* indykite.authorization.v1beta1.ExternalID external_id = 5; */
        if (message.subject.oneofKind === "externalId")
            ExternalID.internalBinaryWrite(message.subject.externalId, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.Subject
 */
export const Subject = new Subject$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DigitalTwin$Type extends MessageType<DigitalTwin> {
    constructor() {
        super("indykite.authorization.v1beta1.DigitalTwin", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "27", maxLen: "100", pattern: "^gid:[A-Za-z0-9-_]{27,100}$" } } } }
        ]);
    }
    create(value?: PartialMessage<DigitalTwin>): DigitalTwin {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DigitalTwin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DigitalTwin): DigitalTwin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DigitalTwin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.DigitalTwin
 */
export const DigitalTwin = new DigitalTwin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Property$Type extends MessageType<Property> {
    constructor() {
        super("indykite.authorization.v1beta1.Property", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "2", maxLen: "20" } } } },
            { no: 2, name: "value", kind: "message", T: () => Value, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<Property>): Property {
        const message = { type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Property>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Property): Property {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* indykite.objects.v1beta1.Value value */ 2:
                    message.value = Value.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Property, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* indykite.objects.v1beta1.Value value = 2; */
        if (message.value)
            Value.internalBinaryWrite(message.value, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.Property
 */
export const Property = new Property$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExternalID$Type extends MessageType<ExternalID> {
    constructor() {
        super("indykite.authorization.v1beta1.ExternalID", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "64", pattern: "^[a-zA-Z]*$" } } } },
            { no: 2, name: "external_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<ExternalID>): ExternalID {
        const message = { type: "", externalId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExternalID>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExternalID): ExternalID {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string external_id */ 2:
                    message.externalId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExternalID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string external_id = 2; */
        if (message.externalId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.externalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.ExternalID
 */
export const ExternalID = new ExternalID$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InputParam$Type extends MessageType<InputParam> {
    constructor() {
        super("indykite.authorization.v1beta1.InputParam", [
            { no: 1, name: "string_value", kind: "scalar", oneof: "value", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1", maxLen: "50" } } } },
            { no: 2, name: "bool_value", kind: "scalar", oneof: "value", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "integer_value", kind: "scalar", oneof: "value", T: 3 /*ScalarType.INT64*/ },
            { no: 4, name: "double_value", kind: "scalar", oneof: "value", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "time_value", kind: "message", oneof: "value", T: () => Timestamp },
            { no: 6, name: "duration_value", kind: "message", oneof: "value", T: () => Duration },
            { no: 7, name: "array_value", kind: "message", oneof: "value", T: () => Array$ },
            { no: 8, name: "map_value", kind: "message", oneof: "value", T: () => Map }
        ]);
    }
    create(value?: PartialMessage<InputParam>): InputParam {
        const message = { value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InputParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InputParam): InputParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string string_value */ 1:
                    message.value = {
                        oneofKind: "stringValue",
                        stringValue: reader.string()
                    };
                    break;
                case /* bool bool_value */ 2:
                    message.value = {
                        oneofKind: "boolValue",
                        boolValue: reader.bool()
                    };
                    break;
                case /* int64 integer_value */ 3:
                    message.value = {
                        oneofKind: "integerValue",
                        integerValue: reader.int64().toString()
                    };
                    break;
                case /* double double_value */ 4:
                    message.value = {
                        oneofKind: "doubleValue",
                        doubleValue: reader.double()
                    };
                    break;
                case /* google.protobuf.Timestamp time_value */ 5:
                    message.value = {
                        oneofKind: "timeValue",
                        timeValue: Timestamp.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).timeValue)
                    };
                    break;
                case /* google.protobuf.Duration duration_value */ 6:
                    message.value = {
                        oneofKind: "durationValue",
                        durationValue: Duration.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).durationValue)
                    };
                    break;
                case /* indykite.objects.v1beta2.Array array_value */ 7:
                    message.value = {
                        oneofKind: "arrayValue",
                        arrayValue: Array$.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).arrayValue)
                    };
                    break;
                case /* indykite.objects.v1beta2.Map map_value */ 8:
                    message.value = {
                        oneofKind: "mapValue",
                        mapValue: Map.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).mapValue)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InputParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string string_value = 1; */
        if (message.value.oneofKind === "stringValue")
            writer.tag(1, WireType.LengthDelimited).string(message.value.stringValue);
        /* bool bool_value = 2; */
        if (message.value.oneofKind === "boolValue")
            writer.tag(2, WireType.Varint).bool(message.value.boolValue);
        /* int64 integer_value = 3; */
        if (message.value.oneofKind === "integerValue")
            writer.tag(3, WireType.Varint).int64(message.value.integerValue);
        /* double double_value = 4; */
        if (message.value.oneofKind === "doubleValue")
            writer.tag(4, WireType.Bit64).double(message.value.doubleValue);
        /* google.protobuf.Timestamp time_value = 5; */
        if (message.value.oneofKind === "timeValue")
            Timestamp.internalBinaryWrite(message.value.timeValue, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration duration_value = 6; */
        if (message.value.oneofKind === "durationValue")
            Duration.internalBinaryWrite(message.value.durationValue, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* indykite.objects.v1beta2.Array array_value = 7; */
        if (message.value.oneofKind === "arrayValue")
            Array$.internalBinaryWrite(message.value.arrayValue, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* indykite.objects.v1beta2.Map map_value = 8; */
        if (message.value.oneofKind === "mapValue")
            Map.internalBinaryWrite(message.value.mapValue, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.authorization.v1beta1.InputParam
 */
export const InputParam = new InputParam$Type();
