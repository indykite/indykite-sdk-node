// @generated by protobuf-ts 2.4.0 with parameter long_type_string,client_grpc1,generate_dependencies,// @generated from protobuf file "indykite/ingest/v1beta1/ingest_api.proto" (package "indykite.ingest.v1beta1", syntax proto3),// tslint:disable
//
// Copyright (c) 2022 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Value } from "../../objects/v1beta1/struct";
/**
 * @generated from protobuf message indykite.ingest.v1beta1.StreamRecordsRequest
 */
export interface StreamRecordsRequest {
    /**
     * @generated from protobuf field: string mapping_config_id = 1;
     */
    mappingConfigId: string;
    /**
     * @generated from protobuf field: map<string, indykite.objects.v1beta1.Value> record = 2;
     */
    record: {
        [key: string]: Value;
    };
}
/**
 * @generated from protobuf message indykite.ingest.v1beta1.StreamRecordsResponse
 */
export interface StreamRecordsResponse {
    /**
     * @generated from protobuf field: uint32 num_records = 1;
     */
    numRecords: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class StreamRecordsRequest$Type extends MessageType<StreamRecordsRequest> {
    constructor() {
        super("indykite.ingest.v1beta1.StreamRecordsRequest", [
            { no: 1, name: "mapping_config_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "22", maxLen: "254", pattern: "^[A-Za-z0-9-_:]{22,254}$" } } } },
            { no: 2, name: "record", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Value }, options: { "validate.rules": { map: { minPairs: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<StreamRecordsRequest>): StreamRecordsRequest {
        const message = { mappingConfigId: "", record: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamRecordsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamRecordsRequest): StreamRecordsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string mapping_config_id */ 1:
                    message.mappingConfigId = reader.string();
                    break;
                case /* map<string, indykite.objects.v1beta1.Value> record */ 2:
                    this.binaryReadMap2(message.record, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: StreamRecordsRequest["record"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof StreamRecordsRequest["record"] | undefined, val: StreamRecordsRequest["record"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Value.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field indykite.ingest.v1beta1.StreamRecordsRequest.record");
            }
        }
        map[key ?? ""] = val ?? Value.create();
    }
    internalBinaryWrite(message: StreamRecordsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string mapping_config_id = 1; */
        if (message.mappingConfigId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.mappingConfigId);
        /* map<string, indykite.objects.v1beta1.Value> record = 2; */
        for (let k of Object.keys(message.record)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Value.internalBinaryWrite(message.record[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.ingest.v1beta1.StreamRecordsRequest
 */
export const StreamRecordsRequest = new StreamRecordsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamRecordsResponse$Type extends MessageType<StreamRecordsResponse> {
    constructor() {
        super("indykite.ingest.v1beta1.StreamRecordsResponse", [
            { no: 1, name: "num_records", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StreamRecordsResponse>): StreamRecordsResponse {
        const message = { numRecords: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamRecordsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamRecordsResponse): StreamRecordsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 num_records */ 1:
                    message.numRecords = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamRecordsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 num_records = 1; */
        if (message.numRecords !== 0)
            writer.tag(1, WireType.Varint).uint32(message.numRecords);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.ingest.v1beta1.StreamRecordsResponse
 */
export const StreamRecordsResponse = new StreamRecordsResponse$Type();
/**
 * @generated ServiceType for protobuf service indykite.ingest.v1beta1.IngestAPI
 */
export const IngestAPI = new ServiceType("indykite.ingest.v1beta1.IngestAPI", [
    { name: "StreamRecords", clientStreaming: true, options: {}, I: StreamRecordsRequest, O: StreamRecordsResponse }
]);
