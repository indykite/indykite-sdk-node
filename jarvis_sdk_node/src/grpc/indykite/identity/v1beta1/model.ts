// @generated by protobuf-ts 2.4.0 with parameter long_type_string,client_grpc1,generate_dependencies,// @generated from protobuf file "indykite/identity/v1beta1/model.proto" (package "indykite.identity.v1beta1", syntax proto3),// tslint:disable
//
// Copyright (c) 2020 IndyKite
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MapValue } from "../../objects/v1beta1/struct";
import { Value } from "../../../google/protobuf/struct";
import { Property } from "./attributes";
import { Timestamp } from "../../../google/protobuf/timestamp";
/**
 * DigitalTwin represents a digital entity.
 *
 * @generated from protobuf message indykite.identity.v1beta1.DigitalTwin
 */
export interface DigitalTwin {
    /**
     * Id the unique credential identifier.
     *
     * @generated from protobuf field: bytes id = 1;
     */
    id: Uint8Array;
    /**
     * TenantId the unique identifier of the tenant of Credential.
     *
     * @generated from protobuf field: bytes tenant_id = 2;
     */
    tenantId: Uint8Array;
    /**
     * @generated from protobuf field: indykite.identity.v1beta1.DigitalTwinKind kind = 3;
     */
    kind: DigitalTwinKind;
    /**
     * @generated from protobuf field: indykite.identity.v1beta1.DigitalTwinState state = 4;
     */
    state: DigitalTwinState;
}
/**
 * @generated from protobuf message indykite.identity.v1beta1.DigitalEntity
 */
export interface DigitalEntity {
    /**
     * @generated from protobuf field: indykite.identity.v1beta1.DigitalTwin digital_twin = 1;
     */
    digitalTwin?: DigitalTwin;
    /**
     * DigitalTwin created at property
     *
     * @generated from protobuf field: google.protobuf.Timestamp create_time = 2;
     */
    createTime?: Timestamp;
    /**
     * Properties contains the requested property values.
     *
     * @generated from protobuf field: repeated indykite.identity.v1beta1.Property properties = 3;
     */
    properties: Property[];
}
/**
 * ErrorMessage see [Problem Details for HTTP APIs](https://tools.ietf.org/html/rfc7807)
 *
 * @generated from protobuf message indykite.identity.v1beta1.ErrorMessage
 */
export interface ErrorMessage {
    /**
     * @generated from protobuf field: indykite.identity.v1beta1.ErrorCode code = 1;
     */
    code: ErrorCode;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: google.protobuf.Value detail = 3;
     */
    detail?: Value;
}
/**
 * Invitation represents a user invitation object.
 *
 * @generated from protobuf message indykite.identity.v1beta1.Invitation
 */
export interface Invitation {
    /**
     * TenantId specify under which tenant the user is invited
     *
     * @generated from protobuf field: bytes tenant_id = 1;
     */
    tenantId: Uint8Array;
    /**
     * ReferenceId is unique external reference identifier to correlate the lifecycle events with.
     *
     * @generated from protobuf field: string reference_id = 2;
     */
    referenceId: string;
    /**
     * InviteAtTime can be empty to send invitation immediately.
     * Or can specify time in the future to postpone sending invitation message.
     *
     * @generated from protobuf field: google.protobuf.Timestamp invite_at_time = 3;
     */
    inviteAtTime?: Timestamp;
    /**
     * ExpireTime can be empty and default lifetime is used. Or you can specify own expiration time of invitation.
     *
     * @generated from protobuf field: google.protobuf.Timestamp expire_time = 4;
     */
    expireTime?: Timestamp;
    /**
     * Attributes passed into message sender
     *
     * @generated from protobuf field: indykite.objects.v1beta1.MapValue message_attributes = 5;
     */
    messageAttributes?: MapValue;
    /**
     * AcceptedBy specify DigitalTwin who accepted invitation
     *
     * @generated from protobuf field: indykite.identity.v1beta1.DigitalTwin accepted_by = 8;
     */
    acceptedBy?: DigitalTwin;
    /**
     * State describe current state of workflow
     *
     * @generated from protobuf field: indykite.identity.v1beta1.InvitationState state = 9;
     */
    state: InvitationState;
    /**
     * @generated from protobuf oneof: invitee
     */
    invitee: {
        oneofKind: "email";
        /**
         * Email address where invitation message will be sent.
         *
         * @generated from protobuf field: string email = 6;
         */
        email: string;
    } | {
        oneofKind: "mobile";
        /**
         * Mobile number where sms will be sent.
         *
         * @generated from protobuf field: string mobile = 7;
         */
        mobile: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * WellKnown represents important OpenID Connect discovery metadata
 *
 * It includes links to several endpoints (e.g. /oauth2/token) and exposes information on supported signature algorithms
 * among others.
 *
 * @generated from protobuf message indykite.identity.v1beta1.WellKnown
 */
export interface WellKnown {
    /**
     * URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier.
     * If IssuerURL discovery is supported , this value MUST be identical to the issuer value returned
     * by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.
     *
     * required: true
     *
     * @generated from protobuf field: string issuer = 1;
     */
    issuer: string;
    /**
     * URL of the OP's OAuth 2.0 Authorization Endpoint.
     *
     * required: true
     *
     * @generated from protobuf field: string authorization_endpoint = 2;
     */
    authorizationEndpoint: string;
    /**
     * URL of the OP's Dynamic Client Registration Endpoint.
     *
     * @generated from protobuf field: string registration_endpoint = 3;
     */
    registrationEndpoint: string;
    /**
     * URL of the OP's OAuth 2.0 Token Endpoint
     *
     * required: true
     *
     * @generated from protobuf field: string token_endpoint = 4;
     */
    tokenEndpoint: string;
    /**
     * URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate
     * signatures from the OP. The JWK Set MAY also contain the Server's encryption key(s), which are used by RPs
     * to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use)
     * parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage.
     * Although some algorithms allow the same key to be used for both signatures and encryption, doing so is
     * NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of
     * keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
     *
     * required: true
     *
     * @generated from protobuf field: string jwks_uri = 5;
     */
    jwksUri: string;
    /**
     * JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include
     * pairwise and public.
     *
     * required: true
     * example:
     *   - public
     *   - pairwise
     *
     * @generated from protobuf field: repeated string subject_types_supported = 6;
     */
    subjectTypesSupported: string[];
    /**
     * JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID
     * Providers MUST support the code, id_token, and the token id_token Response Type values.
     *
     * required: true
     *
     * @generated from protobuf field: repeated string response_types_supported = 7;
     */
    responseTypesSupported: string[];
    /**
     * JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply
     * values for. Note that for privacy or other reasons, this might not be an exhaustive list.
     *
     * @generated from protobuf field: repeated string claims_supported = 8;
     */
    claimsSupported: string[];
    /**
     * JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports.
     *
     * @generated from protobuf field: repeated string grant_types_supported = 9;
     */
    grantTypesSupported: string[];
    /**
     * JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports.
     *
     * @generated from protobuf field: repeated string response_modes_supported = 10;
     */
    responseModesSupported: string[];
    /**
     * URL of the OP's UserInfo Endpoint.
     *
     * @generated from protobuf field: string userinfo_endpoint = 11;
     */
    userinfoEndpoint: string;
    /**
     * SON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST
     * support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used
     *
     * @generated from protobuf field: repeated string scopes_supported = 12;
     */
    scopesSupported: string[];
    /**
     * JSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options are
     * client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0
     *
     * @generated from protobuf field: repeated string token_endpoint_auth_methods_supported = 13;
     */
    tokenEndpointAuthMethodsSupported: string[];
    /**
     * 	JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
     *
     * @generated from protobuf field: repeated string userinfo_signing_alg_values_supported = 14;
     */
    userinfoSigningAlgValuesSupported: string[];
    /**
     * JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token
     * to encode the Claims in a JWT.
     *
     * required: true
     *
     * @generated from protobuf field: repeated string id_token_signing_alg_values_supported = 15;
     */
    idTokenSigningAlgValuesSupported: string[];
    /**
     * 	Boolean value specifying whether the OP supports use of the request parameter, with true indicating support.
     *
     * @generated from protobuf field: bool request_parameter_supported = 16;
     */
    requestParameterSupported: boolean;
    /**
     * Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support.
     *
     * @generated from protobuf field: bool request_uri_parameter_supported = 17;
     */
    requestUriParameterSupported: boolean;
    /**
     * Boolean value specifying whether the OP requires any request_uri values used to be pre-registered
     * using the request_uris registration parameter.
     *
     * @generated from protobuf field: bool require_request_uri_registration = 18;
     */
    requireRequestUriRegistration: boolean;
    /**
     * Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support.
     *
     * @generated from protobuf field: bool claims_parameter_supported = 19;
     */
    claimsParameterSupported: boolean;
    /**
     * URL of the authorization server's OAuth 2.0 revocation endpoint.
     *
     * @generated from protobuf field: string revocation_endpoint = 20;
     */
    revocationEndpoint: string;
    /**
     * Boolean value specifying whether the OP supports back-channel logout, with true indicating support.
     *
     * @generated from protobuf field: bool backchannel_logout_supported = 21;
     */
    backchannelLogoutSupported: boolean;
    /**
     * Boolean value specifying whether the OP can pass a sid (session ID) Claim in the Logout Token to identify the RP
     * session with the OP. If supported, the sid Claim is also included in ID Tokens issued by the OP
     *
     * @generated from protobuf field: bool backchannel_logout_session_supported = 22;
     */
    backchannelLogoutSessionSupported: boolean;
    /**
     * Boolean value specifying whether the OP supports HTTP-based logout, with true indicating support.
     *
     * @generated from protobuf field: bool frontchannel_logout_supported = 23;
     */
    frontchannelLogoutSupported: boolean;
    /**
     * Boolean value specifying whether the OP can pass iss (issuer) and sid (session ID) query parameters to identify
     * the RP session with the OP when the frontchannel_logout_uri is used. If supported, the sid Claim is also
     * included in ID Tokens issued by the OP.
     *
     * @generated from protobuf field: bool frontchannel_logout_session_supported = 24;
     */
    frontchannelLogoutSessionSupported: boolean;
    /**
     * URL at the OP to which an RP can perform a redirect to request that the End-User be logged out at the OP.
     *
     * @generated from protobuf field: string end_session_endpoint = 25;
     */
    endSessionEndpoint: string;
}
/**
 * The token response
 * [Assertion Spec](https://mattrglobal.github.io/oidc-client-bound-assertions-spec/)
 *
 * @generated from protobuf message indykite.identity.v1beta1.OAuth2TokenResponse
 */
export interface OAuth2TokenResponse {
    /**
     * The lifetime in seconds of the access token.  For
     *  example, the value "3600" denotes that the access token will
     * expire in one hour from the time the response was generated.
     *
     * @generated from protobuf field: int64 expires_in = 1;
     */
    expiresIn: string;
    /**
     * The scope of the access token
     *
     * @generated from protobuf field: string scope = 2;
     */
    scope: string;
    /**
     * To retrieve a refresh token request the id_token scope.
     *
     * @generated from protobuf field: string id_token = 3;
     */
    idToken: string;
    /**
     * The access token issued by the authorization server.
     *
     * @generated from protobuf field: string access_token = 4;
     */
    accessToken: string;
    /**
     * The refresh token, which can be used to obtain new
     * access tokens. To retrieve it add the scope "offline" to your access token request.
     *
     * @generated from protobuf field: string refresh_token = 5;
     */
    refreshToken: string;
    /**
     * The type of the token issued
     *
     * @generated from protobuf field: string token_type = 6;
     */
    tokenType: string;
}
/**
 * @generated from protobuf message indykite.identity.v1beta1.FlushInactiveOAuth2TokensRequest
 */
export interface FlushInactiveOAuth2TokensRequest {
    /**
     * NotAfter sets after which point tokens should not be flushed. This is useful when you want to keep a history
     * of recently issued tokens for auditing.
     *
     * @generated from protobuf field: int64 not_after = 1;
     */
    notAfter: string;
}
/**
 * @generated from protobuf message indykite.identity.v1beta1.IdentityTokenInfo
 */
export interface IdentityTokenInfo {
    /**
     * UUID of the top level Customer.
     *
     * @generated from protobuf field: bytes customer_id = 1;
     */
    customerId: Uint8Array;
    /**
     * UUID of Application Space in Customer.
     *
     * @generated from protobuf field: bytes app_space_id = 2;
     */
    appSpaceId: Uint8Array;
    /**
     * UUID of Application in Application Space.
     *
     * @generated from protobuf field: bytes application_id = 3;
     */
    applicationId: Uint8Array;
    /**
     * UUID of the Subject in Application Space.
     *
     * @generated from protobuf field: indykite.identity.v1beta1.DigitalTwin subject = 4;
     */
    subject?: DigitalTwin;
    /**
     * DigitalTwin of impersonated subject in Application Space.
     * See: https://datatracker.ietf.org/doc/html/rfc8693
     *
     * @generated from protobuf field: indykite.identity.v1beta1.DigitalTwin impersonated = 5;
     */
    impersonated?: DigitalTwin;
    /**
     * IssueTime indicating when this token was originally issued.
     *
     * @generated from protobuf field: google.protobuf.Timestamp issue_time = 6;
     */
    issueTime?: Timestamp;
    /**
     * Expiration time of token
     *
     * @generated from protobuf field: google.protobuf.Timestamp expire_time = 7;
     */
    expireTime?: Timestamp;
    /**
     * AuthenticatedAtTime represents the time of authentication
     *
     * @generated from protobuf field: google.protobuf.Timestamp authentication_time = 8;
     */
    authenticationTime?: Timestamp;
    /**
     * ProviderInfo is the collection of credential providers used to prove.
     *
     * @generated from protobuf field: repeated indykite.identity.v1beta1.ProviderInfo provider_info = 9;
     */
    providerInfo: ProviderInfo[];
}
/**
 * @generated from protobuf message indykite.identity.v1beta1.ProviderInfo
 */
export interface ProviderInfo {
    /**
     * Type represent the Provider type:
     *
     * @generated from protobuf field: indykite.identity.v1beta1.ProviderType type = 1;
     */
    type: ProviderType;
    /**
     * Issuer is the identifier if available of Provider who verified the possession of credentials and issued a grant.
     *
     * Example: ["indykite.id", "google.com"]
     *
     * [did registries](https://w3c.github.io/did-spec-registries/)
     *
     * @generated from protobuf field: string issuer = 2;
     */
    issuer: string;
}
/**
 * @generated from protobuf message indykite.identity.v1beta1.UserInfoResponsePayload
 */
export interface UserInfoResponsePayload {
    /**
     * Subject - Identifier for the End-User at the IssuerURL.
     *
     * @generated from protobuf field: string sub = 1;
     */
    sub: string;
    /**
     * End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences.
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.
     *
     * @generated from protobuf field: string given_name = 3;
     */
    givenName: string;
    /**
     * Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.
     *
     * @generated from protobuf field: string family_name = 4;
     */
    familyName: string;
    /**
     * Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used.
     *
     * @generated from protobuf field: string middle_name = 5;
     */
    middleName: string;
    /**
     * Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
     *
     * @generated from protobuf field: string nickname = 6;
     */
    nickname: string;
    /**
     * Non-unique shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace.
     *
     * @generated from protobuf field: string preferred_username = 7;
     */
    preferredUsername: string;
    /**
     * URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.
     *
     * @generated from protobuf field: string profile = 8;
     */
    profile: string;
    /**
     * URL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User.
     *
     * @generated from protobuf field: string picture = 9;
     */
    picture: string;
    /**
     * URL of the End-User's Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with.
     *
     * @generated from protobuf field: string website = 10;
     */
    website: string;
    /**
     * End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7.
     *
     * @generated from protobuf field: string email = 11;
     */
    email: string;
    /**
     * True if the End-User's e-mail address has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this e-mail address was controlled by the End-User at the time the verification was performed. The means by which an e-mail address is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.
     *
     * @generated from protobuf field: bool email_verified = 12;
     */
    emailVerified: boolean;
    /**
     * End-User's gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable.
     *
     * @generated from protobuf field: string gender = 13;
     */
    gender: string;
    /**
     * End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed. Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates.
     *
     * @generated from protobuf field: string birthdate = 14;
     */
    birthdate: string;
    /**
     * String from zoneinfo [zoneinfo] time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles.
     *
     * @generated from protobuf field: string zoneinfo = 15;
     */
    zoneinfo: string;
    /**
     * End-User's locale, represented as a BCP47 [RFC5646] language tag. This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well.
     *
     * @generated from protobuf field: string locale = 16;
     */
    locale: string;
    /**
     * End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
     *
     * @generated from protobuf field: string phone_number = 17;
     */
    phoneNumber: string;
    /**
     * True if the End-User's phone number has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed. The means by which a phone number is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.
     *
     * @generated from protobuf field: bool phone_number_verified = 18;
     */
    phoneNumberVerified: boolean;
    /**
     * Time the End-User's information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
     *
     * @generated from protobuf field: int64 updated_at = 19;
     */
    updatedAt: string;
}
/**
 * PostalAddress message stores the mailing address.
 * See more at [PostalAddress](https://schema.org/PostalAddress)
 *
 * @generated from protobuf message indykite.identity.v1beta1.PostalAddress
 */
export interface PostalAddress {
    /**
     * AddressType is not just a free text for home work home preferred work preferred
     *
     * @generated from protobuf field: string address_type = 15;
     */
    addressType: string;
    /**
     * AddressCountry is the displayName of the country if available.
     *
     * @generated from protobuf field: string address_country = 1;
     */
    addressCountry: string;
    /**
     * ISO 3166-1 alpha-2 country code.
     *
     * @generated from protobuf field: string address_country_code = 2;
     */
    addressCountryCode: string;
    /**
     * AddressLocality is the locality in which the street address is, and which is in the region. For example, Mountain View.
     *
     * @generated from protobuf field: string address_locality = 3;
     */
    addressLocality: string;
    /**
     * AddressRegion is the region in which the locality is, and which is in the country.
     * For example, California or another appropriate first-level Administrative division
     *
     * @generated from protobuf field: string address_region = 4;
     */
    addressRegion: string;
    /**
     * PostOfficeBoxNumber is the post office box number for PO box addresses.
     *
     * @generated from protobuf field: string post_office_box_number = 5;
     */
    postOfficeBoxNumber: string;
    /**
     * PostalCode is the postal code. For example, 94043.
     *
     * @generated from protobuf field: string postal_code = 6;
     */
    postalCode: string;
    /**
     * @generated from protobuf field: string street_address = 7;
     */
    streetAddress: string;
    /**
     * formatted postal address
     *
     * @generated from protobuf field: string formatted = 8;
     */
    formatted: string;
}
/**
 * DigitalTwinState represents the state of an digital entity record.
 *
 * @generated from protobuf enum indykite.identity.v1beta1.DigitalTwinState
 */
export enum DigitalTwinState {
    /**
     * Default unset state.
     *
     * @generated from protobuf enum value: DIGITAL_TWIN_STATE_INVALID = 0;
     */
    INVALID = 0,
    /**
     * Active entity state.
     *
     * @generated from protobuf enum value: DIGITAL_TWIN_STATE_ACTIVE = 1;
     */
    ACTIVE = 1,
    /**
     * Temporarily suspended entity state.
     *
     * @generated from protobuf enum value: DIGITAL_TWIN_STATE_DISABLED = 2;
     */
    DISABLED = 2,
    /**
     * Deleted entity state, left in the system for auditing purpose only.
     *
     * @generated from protobuf enum value: DIGITAL_TWIN_STATE_TOMBSTONE = 4;
     */
    TOMBSTONE = 4
}
/**
 * DigitalTwinKind represents the kind of digital entity.
 *
 * @generated from protobuf enum indykite.identity.v1beta1.DigitalTwinKind
 */
export enum DigitalTwinKind {
    /**
     * Default unset value.
     *
     * @generated from protobuf enum value: DIGITAL_TWIN_KIND_INVALID = 0;
     */
    INVALID = 0,
    /**
     * This is a Person.
     *
     * @generated from protobuf enum value: DIGITAL_TWIN_KIND_PERSON = 1;
     */
    PERSON = 1,
    /**
     * This is a Service Account.
     *
     * @generated from protobuf enum value: DIGITAL_TWIN_KIND_SERVICE = 2;
     */
    SERVICE = 2,
    /**
     * This is a non living thing.
     *
     * @generated from protobuf enum value: DIGITAL_TWIN_KIND_THING = 3;
     */
    THING = 3
}
/**
 * @generated from protobuf enum indykite.identity.v1beta1.ErrorCode
 */
export enum ErrorCode {
    /**
     * @generated from protobuf enum value: ERROR_CODE_INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from protobuf enum value: ERROR_CODE_INVALID_REQUEST = 1;
     */
    INVALID_REQUEST = 1,
    /**
     * @generated from protobuf enum value: ERROR_CODE_UNAUTHORIZED = 2;
     */
    UNAUTHORIZED = 2
}
/**
 * @generated from protobuf enum indykite.identity.v1beta1.InvitationState
 */
export enum InvitationState {
    /**
     * @generated from protobuf enum value: INVITATION_STATE_INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from protobuf enum value: INVITATION_STATE_IN_FUTURE = 1;
     */
    IN_FUTURE = 1,
    /**
     * @generated from protobuf enum value: INVITATION_STATE_PENDING = 2;
     */
    PENDING = 2,
    /**
     * @generated from protobuf enum value: INVITATION_STATE_ACCEPTED = 3;
     */
    ACCEPTED = 3,
    /**
     * @generated from protobuf enum value: INVITATION_STATE_EXPIRED = 4;
     */
    EXPIRED = 4,
    /**
     * @generated from protobuf enum value: INVITATION_STATE_CANCELLED = 5;
     */
    CANCELLED = 5
}
/**
 * @generated from protobuf enum indykite.identity.v1beta1.ProviderType
 */
export enum ProviderType {
    /**
     * @generated from protobuf enum value: PROVIDER_TYPE_INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from protobuf enum value: PROVIDER_TYPE_PASSWORD = 1;
     */
    PASSWORD = 1,
    /**
     * @generated from protobuf enum value: PROVIDER_TYPE_OIDC = 2;
     */
    OIDC = 2,
    /**
     * @generated from protobuf enum value: PROVIDER_TYPE_WEBAUTHN = 3;
     */
    WEBAUTHN = 3,
    /**
     * @generated from protobuf enum value: PROVIDER_TYPE_EMAIL = 4;
     */
    EMAIL = 4,
    /**
     * @generated from protobuf enum value: PROVIDER_TYPE_SMS = 5;
     */
    SMS = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class DigitalTwin$Type extends MessageType<DigitalTwin> {
    constructor() {
        super("indykite.identity.v1beta1.DigitalTwin", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "validate.rules": { bytes: { len: "16" } } } },
            { no: 2, name: "tenant_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "validate.rules": { bytes: { len: "16" } } } },
            { no: 3, name: "kind", kind: "enum", T: () => ["indykite.identity.v1beta1.DigitalTwinKind", DigitalTwinKind, "DIGITAL_TWIN_KIND_"], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 4, name: "state", kind: "enum", T: () => ["indykite.identity.v1beta1.DigitalTwinState", DigitalTwinState, "DIGITAL_TWIN_STATE_"], options: { "validate.rules": { enum: { definedOnly: true } } } }
        ]);
    }
    create(value?: PartialMessage<DigitalTwin>): DigitalTwin {
        const message = { id: new Uint8Array(0), tenantId: new Uint8Array(0), kind: 0, state: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DigitalTwin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DigitalTwin): DigitalTwin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                case /* bytes tenant_id */ 2:
                    message.tenantId = reader.bytes();
                    break;
                case /* indykite.identity.v1beta1.DigitalTwinKind kind */ 3:
                    message.kind = reader.int32();
                    break;
                case /* indykite.identity.v1beta1.DigitalTwinState state */ 4:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DigitalTwin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        /* bytes tenant_id = 2; */
        if (message.tenantId.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.tenantId);
        /* indykite.identity.v1beta1.DigitalTwinKind kind = 3; */
        if (message.kind !== 0)
            writer.tag(3, WireType.Varint).int32(message.kind);
        /* indykite.identity.v1beta1.DigitalTwinState state = 4; */
        if (message.state !== 0)
            writer.tag(4, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta1.DigitalTwin
 */
export const DigitalTwin = new DigitalTwin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DigitalEntity$Type extends MessageType<DigitalEntity> {
    constructor() {
        super("indykite.identity.v1beta1.DigitalEntity", [
            { no: 1, name: "digital_twin", kind: "message", T: () => DigitalTwin },
            { no: 2, name: "create_time", kind: "message", T: () => Timestamp },
            { no: 3, name: "properties", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Property }
        ]);
    }
    create(value?: PartialMessage<DigitalEntity>): DigitalEntity {
        const message = { properties: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DigitalEntity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DigitalEntity): DigitalEntity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.identity.v1beta1.DigitalTwin digital_twin */ 1:
                    message.digitalTwin = DigitalTwin.internalBinaryRead(reader, reader.uint32(), options, message.digitalTwin);
                    break;
                case /* google.protobuf.Timestamp create_time */ 2:
                    message.createTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createTime);
                    break;
                case /* repeated indykite.identity.v1beta1.Property properties */ 3:
                    message.properties.push(Property.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DigitalEntity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.identity.v1beta1.DigitalTwin digital_twin = 1; */
        if (message.digitalTwin)
            DigitalTwin.internalBinaryWrite(message.digitalTwin, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp create_time = 2; */
        if (message.createTime)
            Timestamp.internalBinaryWrite(message.createTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated indykite.identity.v1beta1.Property properties = 3; */
        for (let i = 0; i < message.properties.length; i++)
            Property.internalBinaryWrite(message.properties[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta1.DigitalEntity
 */
export const DigitalEntity = new DigitalEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ErrorMessage$Type extends MessageType<ErrorMessage> {
    constructor() {
        super("indykite.identity.v1beta1.ErrorMessage", [
            { no: 1, name: "code", kind: "enum", T: () => ["indykite.identity.v1beta1.ErrorCode", ErrorCode, "ERROR_CODE_"] },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "detail", kind: "message", T: () => Value }
        ]);
    }
    create(value?: PartialMessage<ErrorMessage>): ErrorMessage {
        const message = { code: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ErrorMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ErrorMessage): ErrorMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.identity.v1beta1.ErrorCode code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* google.protobuf.Value detail */ 3:
                    message.detail = Value.internalBinaryRead(reader, reader.uint32(), options, message.detail);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ErrorMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.identity.v1beta1.ErrorCode code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* google.protobuf.Value detail = 3; */
        if (message.detail)
            Value.internalBinaryWrite(message.detail, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta1.ErrorMessage
 */
export const ErrorMessage = new ErrorMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Invitation$Type extends MessageType<Invitation> {
    constructor() {
        super("indykite.identity.v1beta1.Invitation", [
            { no: 1, name: "tenant_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "reference_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "invite_at_time", kind: "message", T: () => Timestamp },
            { no: 4, name: "expire_time", kind: "message", T: () => Timestamp },
            { no: 5, name: "message_attributes", kind: "message", T: () => MapValue },
            { no: 8, name: "accepted_by", kind: "message", T: () => DigitalTwin },
            { no: 9, name: "state", kind: "enum", T: () => ["indykite.identity.v1beta1.InvitationState", InvitationState, "INVITATION_STATE_"] },
            { no: 6, name: "email", kind: "scalar", oneof: "invitee", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "mobile", kind: "scalar", oneof: "invitee", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Invitation>): Invitation {
        const message = { tenantId: new Uint8Array(0), referenceId: "", state: 0, invitee: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Invitation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Invitation): Invitation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes tenant_id */ 1:
                    message.tenantId = reader.bytes();
                    break;
                case /* string reference_id */ 2:
                    message.referenceId = reader.string();
                    break;
                case /* google.protobuf.Timestamp invite_at_time */ 3:
                    message.inviteAtTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.inviteAtTime);
                    break;
                case /* google.protobuf.Timestamp expire_time */ 4:
                    message.expireTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expireTime);
                    break;
                case /* indykite.objects.v1beta1.MapValue message_attributes */ 5:
                    message.messageAttributes = MapValue.internalBinaryRead(reader, reader.uint32(), options, message.messageAttributes);
                    break;
                case /* indykite.identity.v1beta1.DigitalTwin accepted_by */ 8:
                    message.acceptedBy = DigitalTwin.internalBinaryRead(reader, reader.uint32(), options, message.acceptedBy);
                    break;
                case /* indykite.identity.v1beta1.InvitationState state */ 9:
                    message.state = reader.int32();
                    break;
                case /* string email */ 6:
                    message.invitee = {
                        oneofKind: "email",
                        email: reader.string()
                    };
                    break;
                case /* string mobile */ 7:
                    message.invitee = {
                        oneofKind: "mobile",
                        mobile: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Invitation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes tenant_id = 1; */
        if (message.tenantId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.tenantId);
        /* string reference_id = 2; */
        if (message.referenceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.referenceId);
        /* google.protobuf.Timestamp invite_at_time = 3; */
        if (message.inviteAtTime)
            Timestamp.internalBinaryWrite(message.inviteAtTime, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp expire_time = 4; */
        if (message.expireTime)
            Timestamp.internalBinaryWrite(message.expireTime, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* indykite.objects.v1beta1.MapValue message_attributes = 5; */
        if (message.messageAttributes)
            MapValue.internalBinaryWrite(message.messageAttributes, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* indykite.identity.v1beta1.DigitalTwin accepted_by = 8; */
        if (message.acceptedBy)
            DigitalTwin.internalBinaryWrite(message.acceptedBy, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* indykite.identity.v1beta1.InvitationState state = 9; */
        if (message.state !== 0)
            writer.tag(9, WireType.Varint).int32(message.state);
        /* string email = 6; */
        if (message.invitee.oneofKind === "email")
            writer.tag(6, WireType.LengthDelimited).string(message.invitee.email);
        /* string mobile = 7; */
        if (message.invitee.oneofKind === "mobile")
            writer.tag(7, WireType.LengthDelimited).string(message.invitee.mobile);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta1.Invitation
 */
export const Invitation = new Invitation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WellKnown$Type extends MessageType<WellKnown> {
    constructor() {
        super("indykite.identity.v1beta1.WellKnown", [
            { no: 1, name: "issuer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "authorization_endpoint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "registration_endpoint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "token_endpoint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "jwks_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "subject_types_supported", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "response_types_supported", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "claims_supported", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "grant_types_supported", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "response_modes_supported", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "userinfo_endpoint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "scopes_supported", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "token_endpoint_auth_methods_supported", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "userinfo_signing_alg_values_supported", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "id_token_signing_alg_values_supported", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "request_parameter_supported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "request_uri_parameter_supported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "require_request_uri_registration", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "claims_parameter_supported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "revocation_endpoint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "backchannel_logout_supported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 22, name: "backchannel_logout_session_supported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 23, name: "frontchannel_logout_supported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 24, name: "frontchannel_logout_session_supported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 25, name: "end_session_endpoint", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WellKnown>): WellKnown {
        const message = { issuer: "", authorizationEndpoint: "", registrationEndpoint: "", tokenEndpoint: "", jwksUri: "", subjectTypesSupported: [], responseTypesSupported: [], claimsSupported: [], grantTypesSupported: [], responseModesSupported: [], userinfoEndpoint: "", scopesSupported: [], tokenEndpointAuthMethodsSupported: [], userinfoSigningAlgValuesSupported: [], idTokenSigningAlgValuesSupported: [], requestParameterSupported: false, requestUriParameterSupported: false, requireRequestUriRegistration: false, claimsParameterSupported: false, revocationEndpoint: "", backchannelLogoutSupported: false, backchannelLogoutSessionSupported: false, frontchannelLogoutSupported: false, frontchannelLogoutSessionSupported: false, endSessionEndpoint: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WellKnown>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WellKnown): WellKnown {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string issuer */ 1:
                    message.issuer = reader.string();
                    break;
                case /* string authorization_endpoint */ 2:
                    message.authorizationEndpoint = reader.string();
                    break;
                case /* string registration_endpoint */ 3:
                    message.registrationEndpoint = reader.string();
                    break;
                case /* string token_endpoint */ 4:
                    message.tokenEndpoint = reader.string();
                    break;
                case /* string jwks_uri */ 5:
                    message.jwksUri = reader.string();
                    break;
                case /* repeated string subject_types_supported */ 6:
                    message.subjectTypesSupported.push(reader.string());
                    break;
                case /* repeated string response_types_supported */ 7:
                    message.responseTypesSupported.push(reader.string());
                    break;
                case /* repeated string claims_supported */ 8:
                    message.claimsSupported.push(reader.string());
                    break;
                case /* repeated string grant_types_supported */ 9:
                    message.grantTypesSupported.push(reader.string());
                    break;
                case /* repeated string response_modes_supported */ 10:
                    message.responseModesSupported.push(reader.string());
                    break;
                case /* string userinfo_endpoint */ 11:
                    message.userinfoEndpoint = reader.string();
                    break;
                case /* repeated string scopes_supported */ 12:
                    message.scopesSupported.push(reader.string());
                    break;
                case /* repeated string token_endpoint_auth_methods_supported */ 13:
                    message.tokenEndpointAuthMethodsSupported.push(reader.string());
                    break;
                case /* repeated string userinfo_signing_alg_values_supported */ 14:
                    message.userinfoSigningAlgValuesSupported.push(reader.string());
                    break;
                case /* repeated string id_token_signing_alg_values_supported */ 15:
                    message.idTokenSigningAlgValuesSupported.push(reader.string());
                    break;
                case /* bool request_parameter_supported */ 16:
                    message.requestParameterSupported = reader.bool();
                    break;
                case /* bool request_uri_parameter_supported */ 17:
                    message.requestUriParameterSupported = reader.bool();
                    break;
                case /* bool require_request_uri_registration */ 18:
                    message.requireRequestUriRegistration = reader.bool();
                    break;
                case /* bool claims_parameter_supported */ 19:
                    message.claimsParameterSupported = reader.bool();
                    break;
                case /* string revocation_endpoint */ 20:
                    message.revocationEndpoint = reader.string();
                    break;
                case /* bool backchannel_logout_supported */ 21:
                    message.backchannelLogoutSupported = reader.bool();
                    break;
                case /* bool backchannel_logout_session_supported */ 22:
                    message.backchannelLogoutSessionSupported = reader.bool();
                    break;
                case /* bool frontchannel_logout_supported */ 23:
                    message.frontchannelLogoutSupported = reader.bool();
                    break;
                case /* bool frontchannel_logout_session_supported */ 24:
                    message.frontchannelLogoutSessionSupported = reader.bool();
                    break;
                case /* string end_session_endpoint */ 25:
                    message.endSessionEndpoint = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WellKnown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string issuer = 1; */
        if (message.issuer !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.issuer);
        /* string authorization_endpoint = 2; */
        if (message.authorizationEndpoint !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.authorizationEndpoint);
        /* string registration_endpoint = 3; */
        if (message.registrationEndpoint !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.registrationEndpoint);
        /* string token_endpoint = 4; */
        if (message.tokenEndpoint !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tokenEndpoint);
        /* string jwks_uri = 5; */
        if (message.jwksUri !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.jwksUri);
        /* repeated string subject_types_supported = 6; */
        for (let i = 0; i < message.subjectTypesSupported.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.subjectTypesSupported[i]);
        /* repeated string response_types_supported = 7; */
        for (let i = 0; i < message.responseTypesSupported.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.responseTypesSupported[i]);
        /* repeated string claims_supported = 8; */
        for (let i = 0; i < message.claimsSupported.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.claimsSupported[i]);
        /* repeated string grant_types_supported = 9; */
        for (let i = 0; i < message.grantTypesSupported.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.grantTypesSupported[i]);
        /* repeated string response_modes_supported = 10; */
        for (let i = 0; i < message.responseModesSupported.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.responseModesSupported[i]);
        /* string userinfo_endpoint = 11; */
        if (message.userinfoEndpoint !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.userinfoEndpoint);
        /* repeated string scopes_supported = 12; */
        for (let i = 0; i < message.scopesSupported.length; i++)
            writer.tag(12, WireType.LengthDelimited).string(message.scopesSupported[i]);
        /* repeated string token_endpoint_auth_methods_supported = 13; */
        for (let i = 0; i < message.tokenEndpointAuthMethodsSupported.length; i++)
            writer.tag(13, WireType.LengthDelimited).string(message.tokenEndpointAuthMethodsSupported[i]);
        /* repeated string userinfo_signing_alg_values_supported = 14; */
        for (let i = 0; i < message.userinfoSigningAlgValuesSupported.length; i++)
            writer.tag(14, WireType.LengthDelimited).string(message.userinfoSigningAlgValuesSupported[i]);
        /* repeated string id_token_signing_alg_values_supported = 15; */
        for (let i = 0; i < message.idTokenSigningAlgValuesSupported.length; i++)
            writer.tag(15, WireType.LengthDelimited).string(message.idTokenSigningAlgValuesSupported[i]);
        /* bool request_parameter_supported = 16; */
        if (message.requestParameterSupported !== false)
            writer.tag(16, WireType.Varint).bool(message.requestParameterSupported);
        /* bool request_uri_parameter_supported = 17; */
        if (message.requestUriParameterSupported !== false)
            writer.tag(17, WireType.Varint).bool(message.requestUriParameterSupported);
        /* bool require_request_uri_registration = 18; */
        if (message.requireRequestUriRegistration !== false)
            writer.tag(18, WireType.Varint).bool(message.requireRequestUriRegistration);
        /* bool claims_parameter_supported = 19; */
        if (message.claimsParameterSupported !== false)
            writer.tag(19, WireType.Varint).bool(message.claimsParameterSupported);
        /* string revocation_endpoint = 20; */
        if (message.revocationEndpoint !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.revocationEndpoint);
        /* bool backchannel_logout_supported = 21; */
        if (message.backchannelLogoutSupported !== false)
            writer.tag(21, WireType.Varint).bool(message.backchannelLogoutSupported);
        /* bool backchannel_logout_session_supported = 22; */
        if (message.backchannelLogoutSessionSupported !== false)
            writer.tag(22, WireType.Varint).bool(message.backchannelLogoutSessionSupported);
        /* bool frontchannel_logout_supported = 23; */
        if (message.frontchannelLogoutSupported !== false)
            writer.tag(23, WireType.Varint).bool(message.frontchannelLogoutSupported);
        /* bool frontchannel_logout_session_supported = 24; */
        if (message.frontchannelLogoutSessionSupported !== false)
            writer.tag(24, WireType.Varint).bool(message.frontchannelLogoutSessionSupported);
        /* string end_session_endpoint = 25; */
        if (message.endSessionEndpoint !== "")
            writer.tag(25, WireType.LengthDelimited).string(message.endSessionEndpoint);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta1.WellKnown
 */
export const WellKnown = new WellKnown$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OAuth2TokenResponse$Type extends MessageType<OAuth2TokenResponse> {
    constructor() {
        super("indykite.identity.v1beta1.OAuth2TokenResponse", [
            { no: 1, name: "expires_in", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "scope", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "id_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "token_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OAuth2TokenResponse>): OAuth2TokenResponse {
        const message = { expiresIn: "0", scope: "", idToken: "", accessToken: "", refreshToken: "", tokenType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OAuth2TokenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OAuth2TokenResponse): OAuth2TokenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 expires_in */ 1:
                    message.expiresIn = reader.int64().toString();
                    break;
                case /* string scope */ 2:
                    message.scope = reader.string();
                    break;
                case /* string id_token */ 3:
                    message.idToken = reader.string();
                    break;
                case /* string access_token */ 4:
                    message.accessToken = reader.string();
                    break;
                case /* string refresh_token */ 5:
                    message.refreshToken = reader.string();
                    break;
                case /* string token_type */ 6:
                    message.tokenType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OAuth2TokenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 expires_in = 1; */
        if (message.expiresIn !== "0")
            writer.tag(1, WireType.Varint).int64(message.expiresIn);
        /* string scope = 2; */
        if (message.scope !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.scope);
        /* string id_token = 3; */
        if (message.idToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.idToken);
        /* string access_token = 4; */
        if (message.accessToken !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.accessToken);
        /* string refresh_token = 5; */
        if (message.refreshToken !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.refreshToken);
        /* string token_type = 6; */
        if (message.tokenType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.tokenType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta1.OAuth2TokenResponse
 */
export const OAuth2TokenResponse = new OAuth2TokenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlushInactiveOAuth2TokensRequest$Type extends MessageType<FlushInactiveOAuth2TokensRequest> {
    constructor() {
        super("indykite.identity.v1beta1.FlushInactiveOAuth2TokensRequest", [
            { no: 1, name: "not_after", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<FlushInactiveOAuth2TokensRequest>): FlushInactiveOAuth2TokensRequest {
        const message = { notAfter: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FlushInactiveOAuth2TokensRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FlushInactiveOAuth2TokensRequest): FlushInactiveOAuth2TokensRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 not_after */ 1:
                    message.notAfter = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FlushInactiveOAuth2TokensRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 not_after = 1; */
        if (message.notAfter !== "0")
            writer.tag(1, WireType.Varint).int64(message.notAfter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta1.FlushInactiveOAuth2TokensRequest
 */
export const FlushInactiveOAuth2TokensRequest = new FlushInactiveOAuth2TokensRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IdentityTokenInfo$Type extends MessageType<IdentityTokenInfo> {
    constructor() {
        super("indykite.identity.v1beta1.IdentityTokenInfo", [
            { no: 1, name: "customer_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "app_space_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "application_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "subject", kind: "message", T: () => DigitalTwin },
            { no: 5, name: "impersonated", kind: "message", T: () => DigitalTwin },
            { no: 6, name: "issue_time", kind: "message", T: () => Timestamp },
            { no: 7, name: "expire_time", kind: "message", T: () => Timestamp },
            { no: 8, name: "authentication_time", kind: "message", T: () => Timestamp },
            { no: 9, name: "provider_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ProviderInfo }
        ]);
    }
    create(value?: PartialMessage<IdentityTokenInfo>): IdentityTokenInfo {
        const message = { customerId: new Uint8Array(0), appSpaceId: new Uint8Array(0), applicationId: new Uint8Array(0), providerInfo: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IdentityTokenInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IdentityTokenInfo): IdentityTokenInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes customer_id */ 1:
                    message.customerId = reader.bytes();
                    break;
                case /* bytes app_space_id */ 2:
                    message.appSpaceId = reader.bytes();
                    break;
                case /* bytes application_id */ 3:
                    message.applicationId = reader.bytes();
                    break;
                case /* indykite.identity.v1beta1.DigitalTwin subject */ 4:
                    message.subject = DigitalTwin.internalBinaryRead(reader, reader.uint32(), options, message.subject);
                    break;
                case /* indykite.identity.v1beta1.DigitalTwin impersonated */ 5:
                    message.impersonated = DigitalTwin.internalBinaryRead(reader, reader.uint32(), options, message.impersonated);
                    break;
                case /* google.protobuf.Timestamp issue_time */ 6:
                    message.issueTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.issueTime);
                    break;
                case /* google.protobuf.Timestamp expire_time */ 7:
                    message.expireTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expireTime);
                    break;
                case /* google.protobuf.Timestamp authentication_time */ 8:
                    message.authenticationTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.authenticationTime);
                    break;
                case /* repeated indykite.identity.v1beta1.ProviderInfo provider_info */ 9:
                    message.providerInfo.push(ProviderInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IdentityTokenInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes customer_id = 1; */
        if (message.customerId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.customerId);
        /* bytes app_space_id = 2; */
        if (message.appSpaceId.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.appSpaceId);
        /* bytes application_id = 3; */
        if (message.applicationId.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.applicationId);
        /* indykite.identity.v1beta1.DigitalTwin subject = 4; */
        if (message.subject)
            DigitalTwin.internalBinaryWrite(message.subject, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* indykite.identity.v1beta1.DigitalTwin impersonated = 5; */
        if (message.impersonated)
            DigitalTwin.internalBinaryWrite(message.impersonated, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp issue_time = 6; */
        if (message.issueTime)
            Timestamp.internalBinaryWrite(message.issueTime, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp expire_time = 7; */
        if (message.expireTime)
            Timestamp.internalBinaryWrite(message.expireTime, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp authentication_time = 8; */
        if (message.authenticationTime)
            Timestamp.internalBinaryWrite(message.authenticationTime, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated indykite.identity.v1beta1.ProviderInfo provider_info = 9; */
        for (let i = 0; i < message.providerInfo.length; i++)
            ProviderInfo.internalBinaryWrite(message.providerInfo[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta1.IdentityTokenInfo
 */
export const IdentityTokenInfo = new IdentityTokenInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProviderInfo$Type extends MessageType<ProviderInfo> {
    constructor() {
        super("indykite.identity.v1beta1.ProviderInfo", [
            { no: 1, name: "type", kind: "enum", T: () => ["indykite.identity.v1beta1.ProviderType", ProviderType, "PROVIDER_TYPE_"] },
            { no: 2, name: "issuer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProviderInfo>): ProviderInfo {
        const message = { type: 0, issuer: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProviderInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProviderInfo): ProviderInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* indykite.identity.v1beta1.ProviderType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string issuer */ 2:
                    message.issuer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProviderInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* indykite.identity.v1beta1.ProviderType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string issuer = 2; */
        if (message.issuer !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.issuer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta1.ProviderInfo
 */
export const ProviderInfo = new ProviderInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserInfoResponsePayload$Type extends MessageType<UserInfoResponsePayload> {
    constructor() {
        super("indykite.identity.v1beta1.UserInfoResponsePayload", [
            { no: 1, name: "sub", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "given_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "family_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "middle_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "preferred_username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "profile", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "picture", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "website", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "email_verified", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "gender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "birthdate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "zoneinfo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "locale", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "phone_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "phone_number_verified", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "updated_at", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<UserInfoResponsePayload>): UserInfoResponsePayload {
        const message = { sub: "", name: "", givenName: "", familyName: "", middleName: "", nickname: "", preferredUsername: "", profile: "", picture: "", website: "", email: "", emailVerified: false, gender: "", birthdate: "", zoneinfo: "", locale: "", phoneNumber: "", phoneNumberVerified: false, updatedAt: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserInfoResponsePayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserInfoResponsePayload): UserInfoResponsePayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sub */ 1:
                    message.sub = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string given_name */ 3:
                    message.givenName = reader.string();
                    break;
                case /* string family_name */ 4:
                    message.familyName = reader.string();
                    break;
                case /* string middle_name */ 5:
                    message.middleName = reader.string();
                    break;
                case /* string nickname */ 6:
                    message.nickname = reader.string();
                    break;
                case /* string preferred_username */ 7:
                    message.preferredUsername = reader.string();
                    break;
                case /* string profile */ 8:
                    message.profile = reader.string();
                    break;
                case /* string picture */ 9:
                    message.picture = reader.string();
                    break;
                case /* string website */ 10:
                    message.website = reader.string();
                    break;
                case /* string email */ 11:
                    message.email = reader.string();
                    break;
                case /* bool email_verified */ 12:
                    message.emailVerified = reader.bool();
                    break;
                case /* string gender */ 13:
                    message.gender = reader.string();
                    break;
                case /* string birthdate */ 14:
                    message.birthdate = reader.string();
                    break;
                case /* string zoneinfo */ 15:
                    message.zoneinfo = reader.string();
                    break;
                case /* string locale */ 16:
                    message.locale = reader.string();
                    break;
                case /* string phone_number */ 17:
                    message.phoneNumber = reader.string();
                    break;
                case /* bool phone_number_verified */ 18:
                    message.phoneNumberVerified = reader.bool();
                    break;
                case /* int64 updated_at */ 19:
                    message.updatedAt = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserInfoResponsePayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sub = 1; */
        if (message.sub !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sub);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string given_name = 3; */
        if (message.givenName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.givenName);
        /* string family_name = 4; */
        if (message.familyName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.familyName);
        /* string middle_name = 5; */
        if (message.middleName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.middleName);
        /* string nickname = 6; */
        if (message.nickname !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.nickname);
        /* string preferred_username = 7; */
        if (message.preferredUsername !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.preferredUsername);
        /* string profile = 8; */
        if (message.profile !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.profile);
        /* string picture = 9; */
        if (message.picture !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.picture);
        /* string website = 10; */
        if (message.website !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.website);
        /* string email = 11; */
        if (message.email !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.email);
        /* bool email_verified = 12; */
        if (message.emailVerified !== false)
            writer.tag(12, WireType.Varint).bool(message.emailVerified);
        /* string gender = 13; */
        if (message.gender !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.gender);
        /* string birthdate = 14; */
        if (message.birthdate !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.birthdate);
        /* string zoneinfo = 15; */
        if (message.zoneinfo !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.zoneinfo);
        /* string locale = 16; */
        if (message.locale !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.locale);
        /* string phone_number = 17; */
        if (message.phoneNumber !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.phoneNumber);
        /* bool phone_number_verified = 18; */
        if (message.phoneNumberVerified !== false)
            writer.tag(18, WireType.Varint).bool(message.phoneNumberVerified);
        /* int64 updated_at = 19; */
        if (message.updatedAt !== "0")
            writer.tag(19, WireType.Varint).int64(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta1.UserInfoResponsePayload
 */
export const UserInfoResponsePayload = new UserInfoResponsePayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostalAddress$Type extends MessageType<PostalAddress> {
    constructor() {
        super("indykite.identity.v1beta1.PostalAddress", [
            { no: 15, name: "address_type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { in: ["home", "home_preferred", "work", "work_preferred", "other", "other_preferred"] } } } },
            { no: 1, name: "address_country", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "254" } } } },
            { no: 2, name: "address_country_code", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { in: ["AF", "AX", "AL", "DZ", "AS", "AD", "AO", "AI", "AQ", "AG", "AR", "AM", "AW", "AU", "AT", "AZ", "BS", "BH", "BD", "BB", "BY", "BE", "BZ", "BJ", "BM", "BT", "BO", "BQ", "BA", "BW", "BV", "BR", "IO", "BN", "BG", "BF", "BI", "KH", "CM", "CA", "CV", "KY", "CF", "TD", "CL", "CN", "CX", "CC", "CO", "KM", "CG", "CD", "CK", "CR", "CI", "HR", "CU", "CW", "CY", "CZ", "DK", "DJ", "DM", "DO", "EC", "EG", "SV", "GQ", "ER", "EE", "ET", "FK", "FO", "FJ", "FI", "FR", "GF", "PF", "TF", "GA", "GM", "GE", "DE", "GH", "GI", "GR", "GL", "GD", "GP", "GU", "GT", "GG", "GN", "GW", "GY", "HT", "HM", "VA", "HN", "HK", "HU", "IS", "IN", "ID", "IR", "IQ", "IE", "IM", "IL", "IT", "JM", "JP", "JE", "JO", "KZ", "KE", "KI", "KP", "KR", "KW", "KG", "LA", "LV", "LB", "LS", "LR", "LY", "LI", "LT", "LU", "MO", "MK", "MG", "MW", "MY", "MV", "ML", "MT", "MH", "MQ", "MR", "MU", "YT", "MX", "FM", "MD", "MC", "MN", "ME", "MS", "MA", "MZ", "MM", "NA", "NR", "NP", "NL", "NC", "NZ", "NI", "NE", "NG", "NU", "NF", "MP", "NO", "OM", "PK", "PW", "PS", "PA", "PG", "PY", "PE", "PH", "PN", "PL", "PT", "PR", "QA", "RE", "RO", "RU", "RW", "BL", "SH", "KN", "LC", "MF", "PM", "VC", "WS", "SM", "ST", "SA", "SN", "RS", "SC", "SL", "SG", "SX", "SK", "SI", "SB", "SO", "ZA", "GS", "SS", "ES", "LK", "SD", "SR", "SJ", "SZ", "SE", "CH", "SY", "TW", "TJ", "TZ", "TH", "TL", "TG", "TK", "TO", "TT", "TN", "TR", "TM", "TC", "TV", "UG", "UA", "AE", "GB", "US", "UM", "UY", "UZ", "VU", "VE", "VN", "VG", "VI", "WF", "EH", "YE", "ZM", "ZW"] } } } },
            { no: 3, name: "address_locality", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "254" } } } },
            { no: 4, name: "address_region", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "254" } } } },
            { no: 5, name: "post_office_box_number", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "50" } } } },
            { no: 6, name: "postal_code", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "50" } } } },
            { no: 7, name: "street_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "254" } } } },
            { no: 8, name: "formatted", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "1024" } } } }
        ]);
    }
    create(value?: PartialMessage<PostalAddress>): PostalAddress {
        const message = { addressType: "", addressCountry: "", addressCountryCode: "", addressLocality: "", addressRegion: "", postOfficeBoxNumber: "", postalCode: "", streetAddress: "", formatted: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PostalAddress>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostalAddress): PostalAddress {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address_type */ 15:
                    message.addressType = reader.string();
                    break;
                case /* string address_country */ 1:
                    message.addressCountry = reader.string();
                    break;
                case /* string address_country_code */ 2:
                    message.addressCountryCode = reader.string();
                    break;
                case /* string address_locality */ 3:
                    message.addressLocality = reader.string();
                    break;
                case /* string address_region */ 4:
                    message.addressRegion = reader.string();
                    break;
                case /* string post_office_box_number */ 5:
                    message.postOfficeBoxNumber = reader.string();
                    break;
                case /* string postal_code */ 6:
                    message.postalCode = reader.string();
                    break;
                case /* string street_address */ 7:
                    message.streetAddress = reader.string();
                    break;
                case /* string formatted */ 8:
                    message.formatted = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostalAddress, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address_type = 15; */
        if (message.addressType !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.addressType);
        /* string address_country = 1; */
        if (message.addressCountry !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.addressCountry);
        /* string address_country_code = 2; */
        if (message.addressCountryCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.addressCountryCode);
        /* string address_locality = 3; */
        if (message.addressLocality !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.addressLocality);
        /* string address_region = 4; */
        if (message.addressRegion !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.addressRegion);
        /* string post_office_box_number = 5; */
        if (message.postOfficeBoxNumber !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.postOfficeBoxNumber);
        /* string postal_code = 6; */
        if (message.postalCode !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.postalCode);
        /* string street_address = 7; */
        if (message.streetAddress !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.streetAddress);
        /* string formatted = 8; */
        if (message.formatted !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.formatted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indykite.identity.v1beta1.PostalAddress
 */
export const PostalAddress = new PostalAddress$Type();
